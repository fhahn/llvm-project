; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -p loop-vectorize -S %s | FileCheck --check-prefix=DEFAULT %s
; RUN: opt -p loop-vectorize  -prefer-predicate-over-epilogue=predicate-else-scalar-epilogue -S %s | FileCheck --check-prefix=PRED %s

target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

define fastcc void @invar_cond(ptr %dst, float %0) {
; DEFAULT-LABEL: define fastcc void @invar_cond(
; DEFAULT-SAME: ptr [[DST:%.*]], float [[TMP0:%.*]]) {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    br i1 true, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x float> poison, float [[TMP0]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x float> [[BROADCAST_SPLATINSERT]], <4 x float> poison, <4 x i32> zeroinitializer
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE14:%.*]] ]
; DEFAULT-NEXT:    [[OFFSET_IDX:%.*]] = add i64 1, [[INDEX]]
; DEFAULT-NEXT:    [[TMP1:%.*]] = fcmp oeq <4 x float> [[BROADCAST_SPLAT]], zeroinitializer
; DEFAULT-NEXT:    [[TMP2:%.*]] = fcmp oeq <4 x float> [[BROADCAST_SPLAT]], zeroinitializer
; DEFAULT-NEXT:    [[TMP3:%.*]] = extractelement <4 x i1> [[TMP1]], i32 0
; DEFAULT-NEXT:    br i1 [[TMP3]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; DEFAULT:       pred.store.if:
; DEFAULT-NEXT:    [[TMP4:%.*]] = add i64 [[OFFSET_IDX]], 0
; DEFAULT-NEXT:    [[TMP5:%.*]] = add i64 [[TMP4]], 1
; DEFAULT-NEXT:    [[TMP6:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP5]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[TMP6]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE]]
; DEFAULT:       pred.store.continue:
; DEFAULT-NEXT:    [[TMP7:%.*]] = extractelement <4 x i1> [[TMP1]], i32 1
; DEFAULT-NEXT:    br i1 [[TMP7]], label [[PRED_STORE_IF1:%.*]], label [[PRED_STORE_CONTINUE2:%.*]]
; DEFAULT:       pred.store.if1:
; DEFAULT-NEXT:    [[TMP8:%.*]] = add i64 [[OFFSET_IDX]], 1
; DEFAULT-NEXT:    [[TMP9:%.*]] = add i64 [[TMP8]], 1
; DEFAULT-NEXT:    [[TMP10:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP9]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[TMP10]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE2]]
; DEFAULT:       pred.store.continue2:
; DEFAULT-NEXT:    [[TMP11:%.*]] = extractelement <4 x i1> [[TMP1]], i32 2
; DEFAULT-NEXT:    br i1 [[TMP11]], label [[PRED_STORE_IF3:%.*]], label [[PRED_STORE_CONTINUE4:%.*]]
; DEFAULT:       pred.store.if3:
; DEFAULT-NEXT:    [[TMP12:%.*]] = add i64 [[OFFSET_IDX]], 2
; DEFAULT-NEXT:    [[TMP13:%.*]] = add i64 [[TMP12]], 1
; DEFAULT-NEXT:    [[TMP14:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP13]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[TMP14]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE4]]
; DEFAULT:       pred.store.continue4:
; DEFAULT-NEXT:    [[TMP15:%.*]] = extractelement <4 x i1> [[TMP1]], i32 3
; DEFAULT-NEXT:    br i1 [[TMP15]], label [[PRED_STORE_IF5:%.*]], label [[PRED_STORE_CONTINUE6:%.*]]
; DEFAULT:       pred.store.if5:
; DEFAULT-NEXT:    [[TMP16:%.*]] = add i64 [[OFFSET_IDX]], 3
; DEFAULT-NEXT:    [[TMP17:%.*]] = add i64 [[TMP16]], 1
; DEFAULT-NEXT:    [[TMP18:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP17]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[TMP18]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE6]]
; DEFAULT:       pred.store.continue6:
; DEFAULT-NEXT:    [[TMP19:%.*]] = extractelement <4 x i1> [[TMP2]], i32 0
; DEFAULT-NEXT:    br i1 [[TMP19]], label [[PRED_STORE_IF7:%.*]], label [[PRED_STORE_CONTINUE8:%.*]]
; DEFAULT:       pred.store.if7:
; DEFAULT-NEXT:    [[TMP20:%.*]] = add i64 [[OFFSET_IDX]], 4
; DEFAULT-NEXT:    [[TMP21:%.*]] = add i64 [[TMP20]], 1
; DEFAULT-NEXT:    [[TMP22:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP21]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[TMP22]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE8]]
; DEFAULT:       pred.store.continue8:
; DEFAULT-NEXT:    [[TMP23:%.*]] = extractelement <4 x i1> [[TMP2]], i32 1
; DEFAULT-NEXT:    br i1 [[TMP23]], label [[PRED_STORE_IF9:%.*]], label [[PRED_STORE_CONTINUE10:%.*]]
; DEFAULT:       pred.store.if9:
; DEFAULT-NEXT:    [[TMP24:%.*]] = add i64 [[OFFSET_IDX]], 5
; DEFAULT-NEXT:    [[TMP25:%.*]] = add i64 [[TMP24]], 1
; DEFAULT-NEXT:    [[TMP26:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP25]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[TMP26]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE10]]
; DEFAULT:       pred.store.continue10:
; DEFAULT-NEXT:    [[TMP27:%.*]] = extractelement <4 x i1> [[TMP2]], i32 2
; DEFAULT-NEXT:    br i1 [[TMP27]], label [[PRED_STORE_IF11:%.*]], label [[PRED_STORE_CONTINUE12:%.*]]
; DEFAULT:       pred.store.if11:
; DEFAULT-NEXT:    [[TMP28:%.*]] = add i64 [[OFFSET_IDX]], 6
; DEFAULT-NEXT:    [[TMP29:%.*]] = add i64 [[TMP28]], 1
; DEFAULT-NEXT:    [[TMP30:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP29]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[TMP30]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE12]]
; DEFAULT:       pred.store.continue12:
; DEFAULT-NEXT:    [[TMP31:%.*]] = extractelement <4 x i1> [[TMP2]], i32 3
; DEFAULT-NEXT:    br i1 [[TMP31]], label [[PRED_STORE_IF13:%.*]], label [[PRED_STORE_CONTINUE14]]
; DEFAULT:       pred.store.if13:
; DEFAULT-NEXT:    [[TMP32:%.*]] = add i64 [[OFFSET_IDX]], 7
; DEFAULT-NEXT:    [[TMP33:%.*]] = add i64 [[TMP32]], 1
; DEFAULT-NEXT:    [[TMP34:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP33]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[TMP34]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE14]]
; DEFAULT:       pred.store.continue14:
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; DEFAULT-NEXT:    [[TMP35:%.*]] = icmp eq i64 [[INDEX_NEXT]], 0
; DEFAULT-NEXT:    br i1 [[TMP35]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    br i1 true, label [[FOR_INC14_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 1, [[MIDDLE_BLOCK]] ], [ 1, [[ENTRY:%.*]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY6:%.*]]
; DEFAULT:       for.body6:
; DEFAULT-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[FOR_INC:%.*]] ]
; DEFAULT-NEXT:    [[IV_NEXT]] = add i64 [[IV]], 1
; DEFAULT-NEXT:    [[CMP9:%.*]] = fcmp oeq float [[TMP0]], 0.000000e+00
; DEFAULT-NEXT:    br i1 [[CMP9]], label [[IF_THEN10:%.*]], label [[FOR_INC]]
; DEFAULT:       if.then10:
; DEFAULT-NEXT:    [[ARRAYIDX86:%.*]] = getelementptr float, ptr [[DST]], i64 [[IV_NEXT]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX86]], align 4
; DEFAULT-NEXT:    br label [[FOR_INC]]
; DEFAULT:       for.inc:
; DEFAULT-NEXT:    [[CMP5_NOT:%.*]] = icmp eq i64 [[IV]], 0
; DEFAULT-NEXT:    br i1 [[CMP5_NOT]], label [[FOR_INC14_LOOPEXIT]], label [[FOR_BODY6]], !llvm.loop [[LOOP3:![0-9]+]]
; DEFAULT:       for.inc14.loopexit:
; DEFAULT-NEXT:    ret void
;
; PRED-LABEL: define fastcc void @invar_cond(
; PRED-SAME: ptr [[DST:%.*]], float [[TMP0:%.*]]) {
; PRED-NEXT:  entry:
; PRED-NEXT:    br i1 true, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x float> poison, float [[TMP0]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x float> [[BROADCAST_SPLATINSERT]], <4 x float> poison, <4 x i32> zeroinitializer
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE6:%.*]] ]
; PRED-NEXT:    [[OFFSET_IDX:%.*]] = add i64 1, [[INDEX]]
; PRED-NEXT:    [[TMP1:%.*]] = fcmp oeq <4 x float> [[BROADCAST_SPLAT]], zeroinitializer
; PRED-NEXT:    [[TMP2:%.*]] = extractelement <4 x i1> [[TMP1]], i32 0
; PRED-NEXT:    br i1 [[TMP2]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; PRED:       pred.store.if:
; PRED-NEXT:    [[TMP3:%.*]] = add i64 [[OFFSET_IDX]], 0
; PRED-NEXT:    [[TMP4:%.*]] = add i64 [[TMP3]], 1
; PRED-NEXT:    [[TMP5:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP4]]
; PRED-NEXT:    store float 0.000000e+00, ptr [[TMP5]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE]]
; PRED:       pred.store.continue:
; PRED-NEXT:    [[TMP6:%.*]] = extractelement <4 x i1> [[TMP1]], i32 1
; PRED-NEXT:    br i1 [[TMP6]], label [[PRED_STORE_IF1:%.*]], label [[PRED_STORE_CONTINUE2:%.*]]
; PRED:       pred.store.if1:
; PRED-NEXT:    [[TMP7:%.*]] = add i64 [[OFFSET_IDX]], 1
; PRED-NEXT:    [[TMP8:%.*]] = add i64 [[TMP7]], 1
; PRED-NEXT:    [[TMP9:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP8]]
; PRED-NEXT:    store float 0.000000e+00, ptr [[TMP9]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE2]]
; PRED:       pred.store.continue2:
; PRED-NEXT:    [[TMP10:%.*]] = extractelement <4 x i1> [[TMP1]], i32 2
; PRED-NEXT:    br i1 [[TMP10]], label [[PRED_STORE_IF3:%.*]], label [[PRED_STORE_CONTINUE4:%.*]]
; PRED:       pred.store.if3:
; PRED-NEXT:    [[TMP11:%.*]] = add i64 [[OFFSET_IDX]], 2
; PRED-NEXT:    [[TMP12:%.*]] = add i64 [[TMP11]], 1
; PRED-NEXT:    [[TMP13:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP12]]
; PRED-NEXT:    store float 0.000000e+00, ptr [[TMP13]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE4]]
; PRED:       pred.store.continue4:
; PRED-NEXT:    [[TMP14:%.*]] = extractelement <4 x i1> [[TMP1]], i32 3
; PRED-NEXT:    br i1 [[TMP14]], label [[PRED_STORE_IF5:%.*]], label [[PRED_STORE_CONTINUE6]]
; PRED:       pred.store.if5:
; PRED-NEXT:    [[TMP15:%.*]] = add i64 [[OFFSET_IDX]], 3
; PRED-NEXT:    [[TMP16:%.*]] = add i64 [[TMP15]], 1
; PRED-NEXT:    [[TMP17:%.*]] = getelementptr float, ptr [[DST]], i64 [[TMP16]]
; PRED-NEXT:    store float 0.000000e+00, ptr [[TMP17]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE6]]
; PRED:       pred.store.continue6:
; PRED-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4
; PRED-NEXT:    [[TMP18:%.*]] = icmp eq i64 [[INDEX_NEXT]], 0
; PRED-NEXT:    br i1 [[TMP18]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[FOR_INC14_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 1, [[MIDDLE_BLOCK]] ], [ 1, [[ENTRY:%.*]] ]
; PRED-NEXT:    br label [[FOR_BODY6:%.*]]
; PRED:       for.body6:
; PRED-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[FOR_INC:%.*]] ]
; PRED-NEXT:    [[IV_NEXT]] = add i64 [[IV]], 1
; PRED-NEXT:    [[CMP9:%.*]] = fcmp oeq float [[TMP0]], 0.000000e+00
; PRED-NEXT:    br i1 [[CMP9]], label [[IF_THEN10:%.*]], label [[FOR_INC]]
; PRED:       if.then10:
; PRED-NEXT:    [[ARRAYIDX86:%.*]] = getelementptr float, ptr [[DST]], i64 [[IV_NEXT]]
; PRED-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX86]], align 4
; PRED-NEXT:    br label [[FOR_INC]]
; PRED:       for.inc:
; PRED-NEXT:    [[CMP5_NOT:%.*]] = icmp eq i64 [[IV]], 0
; PRED-NEXT:    br i1 [[CMP5_NOT]], label [[FOR_INC14_LOOPEXIT]], label [[FOR_BODY6]], !llvm.loop [[LOOP3:![0-9]+]]
; PRED:       for.inc14.loopexit:
; PRED-NEXT:    ret void
;
entry:
  br label %for.body6

for.body6:                                        ; preds = %for.inc, %entry
  %iv = phi i64 [ 1, %entry ], [ %iv.next, %for.inc ]
  %iv.next = add i64 %iv, 1
  %cmp9 = fcmp oeq float %0, 0.000000e+00
  br i1 %cmp9, label %if.then10, label %for.inc

if.then10:                                        ; preds = %for.body6
  %arrayidx86 = getelementptr float, ptr %dst, i64 %iv.next
  store float 0.000000e+00, ptr %arrayidx86, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.then10, %for.body6
  %cmp5.not = icmp eq i64 %iv, 0
  br i1 %cmp5.not, label %for.inc14.loopexit, label %for.body6

for.inc14.loopexit:                               ; preds = %for.inc
  ret void
}

declare double @llvm.fabs.f64(double) #0

define void @loop_dependent_cond(ptr %error, i64 %wide.trip.count179) {
; DEFAULT-LABEL: define void @loop_dependent_cond(
; DEFAULT-SAME: ptr [[ERROR:%.*]], i64 [[WIDE_TRIP_COUNT179:%.*]]) {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    [[TMP0:%.*]] = add i64 [[WIDE_TRIP_COUNT179]], 1
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP0]], 4
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP0]], 4
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP0]], [[N_MOD_VF]]
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE7:%.*]] ]
; DEFAULT-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 0
; DEFAULT-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 2
; DEFAULT-NEXT:    [[TMP3:%.*]] = getelementptr [20 x double], ptr [[ERROR]], i64 0, i64 [[TMP1]]
; DEFAULT-NEXT:    [[TMP4:%.*]] = getelementptr [20 x double], ptr [[ERROR]], i64 0, i64 [[TMP2]]
; DEFAULT-NEXT:    [[TMP5:%.*]] = getelementptr double, ptr [[TMP3]], i32 0
; DEFAULT-NEXT:    [[TMP6:%.*]] = getelementptr double, ptr [[TMP3]], i32 2
; DEFAULT-NEXT:    [[WIDE_LOAD:%.*]] = load <2 x double>, ptr [[TMP5]], align 8
; DEFAULT-NEXT:    [[WIDE_LOAD1:%.*]] = load <2 x double>, ptr [[TMP6]], align 8
; DEFAULT-NEXT:    [[TMP7:%.*]] = call <2 x double> @llvm.fabs.v2f64(<2 x double> [[WIDE_LOAD]])
; DEFAULT-NEXT:    [[TMP8:%.*]] = call <2 x double> @llvm.fabs.v2f64(<2 x double> [[WIDE_LOAD1]])
; DEFAULT-NEXT:    [[TMP9:%.*]] = fcmp ogt <2 x double> [[TMP7]], <double 1.000000e+00, double 1.000000e+00>
; DEFAULT-NEXT:    [[TMP10:%.*]] = fcmp ogt <2 x double> [[TMP8]], <double 1.000000e+00, double 1.000000e+00>
; DEFAULT-NEXT:    [[TMP11:%.*]] = extractelement <2 x i1> [[TMP9]], i32 0
; DEFAULT-NEXT:    br i1 [[TMP11]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; DEFAULT:       pred.store.if:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE]]
; DEFAULT:       pred.store.continue:
; DEFAULT-NEXT:    [[TMP12:%.*]] = extractelement <2 x i1> [[TMP9]], i32 1
; DEFAULT-NEXT:    br i1 [[TMP12]], label [[PRED_STORE_IF2:%.*]], label [[PRED_STORE_CONTINUE3:%.*]]
; DEFAULT:       pred.store.if2:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE3]]
; DEFAULT:       pred.store.continue3:
; DEFAULT-NEXT:    [[TMP13:%.*]] = extractelement <2 x i1> [[TMP10]], i32 0
; DEFAULT-NEXT:    br i1 [[TMP13]], label [[PRED_STORE_IF4:%.*]], label [[PRED_STORE_CONTINUE5:%.*]]
; DEFAULT:       pred.store.if4:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE5]]
; DEFAULT:       pred.store.continue5:
; DEFAULT-NEXT:    [[TMP14:%.*]] = extractelement <2 x i1> [[TMP10]], i32 1
; DEFAULT-NEXT:    br i1 [[TMP14]], label [[PRED_STORE_IF6:%.*]], label [[PRED_STORE_CONTINUE7]]
; DEFAULT:       pred.store.if6:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE7]]
; DEFAULT:       pred.store.continue7:
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4
; DEFAULT-NEXT:    [[TMP15:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP15]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP0]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_END123:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY112:%.*]]
; DEFAULT:       for.body112:
; DEFAULT-NEXT:    [[IV175:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT176:%.*]], [[FOR_INC121:%.*]] ]
; DEFAULT-NEXT:    [[ARRAYIDX114:%.*]] = getelementptr [20 x double], ptr [[ERROR]], i64 0, i64 [[IV175]]
; DEFAULT-NEXT:    [[TMP16:%.*]] = load double, ptr [[ARRAYIDX114]], align 8
; DEFAULT-NEXT:    [[TMP17:%.*]] = tail call double @llvm.fabs.f64(double [[TMP16]])
; DEFAULT-NEXT:    [[CMP115:%.*]] = fcmp ogt double [[TMP17]], 1.000000e+00
; DEFAULT-NEXT:    br i1 [[CMP115]], label [[IF_THEN117:%.*]], label [[FOR_INC121]]
; DEFAULT:       if.then117:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[FOR_INC121]]
; DEFAULT:       for.inc121:
; DEFAULT-NEXT:    [[IV_NEXT176]] = add i64 [[IV175]], 1
; DEFAULT-NEXT:    [[EXITCOND180_NOT:%.*]] = icmp eq i64 [[IV175]], [[WIDE_TRIP_COUNT179]]
; DEFAULT-NEXT:    br i1 [[EXITCOND180_NOT]], label [[FOR_END123]], label [[FOR_BODY112]], !llvm.loop [[LOOP5:![0-9]+]]
; DEFAULT:       for.end123:
; DEFAULT-NEXT:    ret void
;
; PRED-LABEL: define void @loop_dependent_cond(
; PRED-SAME: ptr [[ERROR:%.*]], i64 [[WIDE_TRIP_COUNT179:%.*]]) {
; PRED-NEXT:  entry:
; PRED-NEXT:    br label [[FOR_BODY112:%.*]]
; PRED:       for.body112:
; PRED-NEXT:    [[IV175:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[IV_NEXT176:%.*]], [[FOR_INC121:%.*]] ]
; PRED-NEXT:    [[ARRAYIDX114:%.*]] = getelementptr [20 x double], ptr [[ERROR]], i64 0, i64 [[IV175]]
; PRED-NEXT:    [[TMP0:%.*]] = load double, ptr [[ARRAYIDX114]], align 8
; PRED-NEXT:    [[TMP1:%.*]] = tail call double @llvm.fabs.f64(double [[TMP0]])
; PRED-NEXT:    [[CMP115:%.*]] = fcmp ogt double [[TMP1]], 1.000000e+00
; PRED-NEXT:    br i1 [[CMP115]], label [[IF_THEN117:%.*]], label [[FOR_INC121]]
; PRED:       if.then117:
; PRED-NEXT:    store i32 0, ptr null, align 4
; PRED-NEXT:    br label [[FOR_INC121]]
; PRED:       for.inc121:
; PRED-NEXT:    [[IV_NEXT176]] = add i64 [[IV175]], 1
; PRED-NEXT:    [[EXITCOND180_NOT:%.*]] = icmp eq i64 [[IV175]], [[WIDE_TRIP_COUNT179]]
; PRED-NEXT:    br i1 [[EXITCOND180_NOT]], label [[FOR_END123:%.*]], label [[FOR_BODY112]]
; PRED:       for.end123:
; PRED-NEXT:    ret void
;
entry:
  br label %for.body112

for.body112:                                      ; preds = %for.inc121, %entry
  %iv175 = phi i64 [ 0, %entry ], [ %iv.next176, %for.inc121 ]
  %arrayidx114 = getelementptr [20 x double], ptr %error, i64 0, i64 %iv175
  %0 = load double, ptr %arrayidx114, align 8
  %1 = tail call double @llvm.fabs.f64(double %0)
  %cmp115 = fcmp ogt double %1, 1.000000e+00
  br i1 %cmp115, label %if.then117, label %for.inc121

if.then117:                                       ; preds = %for.body112
  store i32 0, ptr null, align 4
  br label %for.inc121

for.inc121:                                       ; preds = %if.then117, %for.body112
  %iv.next176 = add i64 %iv175, 1
  %exitcond180.not = icmp eq i64 %iv175, %wide.trip.count179
  br i1 %exitcond180.not, label %for.end123, label %for.body112

for.end123:                                       ; preds = %for.inc121
  ret void
}



define void @_ZN4llvm9BitVector9applyMaskILb1ELb1EEEvPKjj(ptr %this) {
; DEFAULT-LABEL: define void @_ZN4llvm9BitVector9applyMaskILb1ELb1EEEvPKjj(
; DEFAULT-SAME: ptr [[THIS:%.*]]) {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[VECTOR_RECUR:%.*]] = phi <4 x i64> [ <i64 poison, i64 poison, i64 poison, i64 0>, [[VECTOR_PH]] ], [ [[TMP11:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[VEC_IND:%.*]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[STEP_ADD:%.*]] = add <4 x i32> [[VEC_IND]], <i32 4, i32 4, i32 4, i32 4>
; DEFAULT-NEXT:    [[OFFSET_IDX:%.*]] = mul i64 [[INDEX]], 4
; DEFAULT-NEXT:    [[TMP0:%.*]] = add i64 [[OFFSET_IDX]], 0
; DEFAULT-NEXT:    [[TMP1:%.*]] = add i64 [[OFFSET_IDX]], 16
; DEFAULT-NEXT:    [[NEXT_GEP:%.*]] = getelementptr i8, ptr null, i64 [[TMP0]]
; DEFAULT-NEXT:    [[NEXT_GEP4:%.*]] = getelementptr i8, ptr null, i64 [[TMP1]]
; DEFAULT-NEXT:    [[TMP2:%.*]] = getelementptr i32, ptr [[NEXT_GEP]], i32 0
; DEFAULT-NEXT:    [[TMP3:%.*]] = getelementptr i32, ptr [[NEXT_GEP]], i32 4
; DEFAULT-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP2]], align 4
; DEFAULT-NEXT:    [[WIDE_LOAD5:%.*]] = load <4 x i32>, ptr [[TMP3]], align 4
; DEFAULT-NEXT:    [[TMP4:%.*]] = xor <4 x i32> [[WIDE_LOAD]], <i32 1, i32 1, i32 1, i32 1>
; DEFAULT-NEXT:    [[TMP5:%.*]] = xor <4 x i32> [[WIDE_LOAD5]], <i32 1, i32 1, i32 1, i32 1>
; DEFAULT-NEXT:    [[TMP6:%.*]] = zext <4 x i32> [[TMP4]] to <4 x i64>
; DEFAULT-NEXT:    [[TMP7:%.*]] = zext <4 x i32> [[TMP5]] to <4 x i64>
; DEFAULT-NEXT:    [[TMP8:%.*]] = zext <4 x i32> [[VEC_IND]] to <4 x i64>
; DEFAULT-NEXT:    [[TMP9:%.*]] = zext <4 x i32> [[STEP_ADD]] to <4 x i64>
; DEFAULT-NEXT:    [[TMP10:%.*]] = shl <4 x i64> [[TMP6]], [[TMP8]]
; DEFAULT-NEXT:    [[TMP11]] = shl <4 x i64> [[TMP7]], [[TMP9]]
; DEFAULT-NEXT:    [[TMP12:%.*]] = shufflevector <4 x i64> [[VECTOR_RECUR]], <4 x i64> [[TMP10]], <4 x i32> <i32 3, i32 4, i32 5, i32 6>
; DEFAULT-NEXT:    [[TMP13:%.*]] = shufflevector <4 x i64> [[TMP10]], <4 x i64> [[TMP11]], <4 x i32> <i32 3, i32 4, i32 5, i32 6>
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; DEFAULT-NEXT:    [[VEC_IND_NEXT]] = add <4 x i32> [[STEP_ADD]], <i32 4, i32 4, i32 4, i32 4>
; DEFAULT-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[INDEX_NEXT]], 4294967296
; DEFAULT-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[VECTOR_RECUR_EXTRACT:%.*]] = extractelement <4 x i64> [[TMP11]], i32 3
; DEFAULT-NEXT:    [[VECTOR_RECUR_EXTRACT_FOR_PHI:%.*]] = extractelement <4 x i64> [[TMP11]], i32 2
; DEFAULT-NEXT:    br i1 true, label [[FOR_COND15_FOR_COND_CLEANUP16_CRIT_EDGE:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[SCALAR_RECUR_INIT:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[VECTOR_RECUR_EXTRACT]], [[MIDDLE_BLOCK]] ]
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi ptr [ getelementptr (i8, ptr null, i64 17179869184), [[MIDDLE_BLOCK]] ], [ null, [[ENTRY]] ]
; DEFAULT-NEXT:    [[BC_RESUME_VAL1:%.*]] = phi i32 [ 0, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ]
; DEFAULT-NEXT:    [[BC_RESUME_VAL2:%.*]] = phi i32 [ 0, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY17:%.*]]
; DEFAULT:       for.cond15.for.cond.cleanup16_crit_edge:
; DEFAULT-NEXT:    [[DOTLCSSA:%.*]] = phi i64 [ [[SCALAR_RECUR:%.*]], [[FOR_BODY17]] ], [ [[VECTOR_RECUR_EXTRACT_FOR_PHI]], [[MIDDLE_BLOCK]] ]
; DEFAULT-NEXT:    store i64 [[DOTLCSSA]], ptr [[THIS]], align 8
; DEFAULT-NEXT:    ret void
; DEFAULT:       for.body17:
; DEFAULT-NEXT:    [[SCALAR_RECUR]] = phi i64 [ [[SCALAR_RECUR_INIT]], [[SCALAR_PH]] ], [ [[SHL23:%.*]], [[FOR_BODY17]] ]
; DEFAULT-NEXT:    [[MASK_ADDR_276:%.*]] = phi ptr [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INCDEC_PTR19:%.*]], [[FOR_BODY17]] ]
; DEFAULT-NEXT:    [[B14_075:%.*]] = phi i32 [ [[BC_RESUME_VAL1]], [[SCALAR_PH]] ], [ [[ADD29:%.*]], [[FOR_BODY17]] ]
; DEFAULT-NEXT:    [[MASKWORDS_ADDR_174:%.*]] = phi i32 [ [[BC_RESUME_VAL2]], [[SCALAR_PH]] ], [ [[DEC:%.*]], [[FOR_BODY17]] ]
; DEFAULT-NEXT:    [[TMP15:%.*]] = load i32, ptr [[MASK_ADDR_276]], align 4
; DEFAULT-NEXT:    [[NOT20:%.*]] = xor i32 [[TMP15]], 1
; DEFAULT-NEXT:    [[CONV21:%.*]] = zext i32 [[NOT20]] to i64
; DEFAULT-NEXT:    [[SH_PROM22:%.*]] = zext i32 [[B14_075]] to i64
; DEFAULT-NEXT:    [[SHL23]] = shl i64 [[CONV21]], [[SH_PROM22]]
; DEFAULT-NEXT:    [[INCDEC_PTR19]] = getelementptr i8, ptr [[MASK_ADDR_276]], i64 4
; DEFAULT-NEXT:    [[ADD29]] = add i32 [[B14_075]], 1
; DEFAULT-NEXT:    [[DEC]] = add i32 [[MASKWORDS_ADDR_174]], 1
; DEFAULT-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i32 [[DEC]], 0
; DEFAULT-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_COND15_FOR_COND_CLEANUP16_CRIT_EDGE]], label [[FOR_BODY17]], !llvm.loop [[LOOP7:![0-9]+]]
;
; PRED-LABEL: define void @_ZN4llvm9BitVector9applyMaskILb1ELb1EEEvPKjj(
; PRED-SAME: ptr [[THIS:%.*]]) {
; PRED-NEXT:  entry:
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[VECTOR_RECUR:%.*]] = phi <4 x i64> [ <i64 poison, i64 poison, i64 poison, i64 0>, [[VECTOR_PH]] ], [ [[TMP5:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[VEC_IND:%.*]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[OFFSET_IDX:%.*]] = mul i64 [[INDEX]], 4
; PRED-NEXT:    [[TMP0:%.*]] = add i64 [[OFFSET_IDX]], 0
; PRED-NEXT:    [[NEXT_GEP:%.*]] = getelementptr i8, ptr null, i64 [[TMP0]]
; PRED-NEXT:    [[TMP1:%.*]] = getelementptr i32, ptr [[NEXT_GEP]], i32 0
; PRED-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP1]], align 4
; PRED-NEXT:    [[TMP2:%.*]] = xor <4 x i32> [[WIDE_LOAD]], <i32 1, i32 1, i32 1, i32 1>
; PRED-NEXT:    [[TMP3:%.*]] = zext <4 x i32> [[TMP2]] to <4 x i64>
; PRED-NEXT:    [[TMP4:%.*]] = zext <4 x i32> [[VEC_IND]] to <4 x i64>
; PRED-NEXT:    [[TMP5]] = shl <4 x i64> [[TMP3]], [[TMP4]]
; PRED-NEXT:    [[TMP6:%.*]] = shufflevector <4 x i64> [[VECTOR_RECUR]], <4 x i64> [[TMP5]], <4 x i32> <i32 3, i32 4, i32 5, i32 6>
; PRED-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4
; PRED-NEXT:    [[VEC_IND_NEXT]] = add <4 x i32> [[VEC_IND]], <i32 4, i32 4, i32 4, i32 4>
; PRED-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[INDEX_NEXT]], 4294967296
; PRED-NEXT:    br i1 [[TMP7]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    [[VECTOR_RECUR_EXTRACT:%.*]] = extractelement <4 x i64> [[TMP5]], i32 3
; PRED-NEXT:    [[VECTOR_RECUR_EXTRACT_FOR_PHI:%.*]] = extractelement <4 x i64> [[TMP5]], i32 2
; PRED-NEXT:    br i1 true, label [[FOR_COND15_FOR_COND_CLEANUP16_CRIT_EDGE:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[SCALAR_RECUR_INIT:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[VECTOR_RECUR_EXTRACT]], [[MIDDLE_BLOCK]] ]
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi ptr [ getelementptr (i8, ptr null, i64 17179869184), [[MIDDLE_BLOCK]] ], [ null, [[ENTRY]] ]
; PRED-NEXT:    [[BC_RESUME_VAL1:%.*]] = phi i32 [ 0, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ]
; PRED-NEXT:    [[BC_RESUME_VAL2:%.*]] = phi i32 [ 0, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ]
; PRED-NEXT:    br label [[FOR_BODY17:%.*]]
; PRED:       for.cond15.for.cond.cleanup16_crit_edge:
; PRED-NEXT:    [[DOTLCSSA:%.*]] = phi i64 [ [[SCALAR_RECUR:%.*]], [[FOR_BODY17]] ], [ [[VECTOR_RECUR_EXTRACT_FOR_PHI]], [[MIDDLE_BLOCK]] ]
; PRED-NEXT:    store i64 [[DOTLCSSA]], ptr [[THIS]], align 8
; PRED-NEXT:    ret void
; PRED:       for.body17:
; PRED-NEXT:    [[SCALAR_RECUR]] = phi i64 [ [[SCALAR_RECUR_INIT]], [[SCALAR_PH]] ], [ [[SHL23:%.*]], [[FOR_BODY17]] ]
; PRED-NEXT:    [[MASK_ADDR_276:%.*]] = phi ptr [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INCDEC_PTR19:%.*]], [[FOR_BODY17]] ]
; PRED-NEXT:    [[B14_075:%.*]] = phi i32 [ [[BC_RESUME_VAL1]], [[SCALAR_PH]] ], [ [[ADD29:%.*]], [[FOR_BODY17]] ]
; PRED-NEXT:    [[MASKWORDS_ADDR_174:%.*]] = phi i32 [ [[BC_RESUME_VAL2]], [[SCALAR_PH]] ], [ [[DEC:%.*]], [[FOR_BODY17]] ]
; PRED-NEXT:    [[TMP8:%.*]] = load i32, ptr [[MASK_ADDR_276]], align 4
; PRED-NEXT:    [[NOT20:%.*]] = xor i32 [[TMP8]], 1
; PRED-NEXT:    [[CONV21:%.*]] = zext i32 [[NOT20]] to i64
; PRED-NEXT:    [[SH_PROM22:%.*]] = zext i32 [[B14_075]] to i64
; PRED-NEXT:    [[SHL23]] = shl i64 [[CONV21]], [[SH_PROM22]]
; PRED-NEXT:    [[INCDEC_PTR19]] = getelementptr i8, ptr [[MASK_ADDR_276]], i64 4
; PRED-NEXT:    [[ADD29]] = add i32 [[B14_075]], 1
; PRED-NEXT:    [[DEC]] = add i32 [[MASKWORDS_ADDR_174]], 1
; PRED-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i32 [[DEC]], 0
; PRED-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_COND15_FOR_COND_CLEANUP16_CRIT_EDGE]], label [[FOR_BODY17]], !llvm.loop [[LOOP5:![0-9]+]]
;
entry:
  br label %for.body17

for.cond15.for.cond.cleanup16_crit_edge:          ; preds = %for.body17
  store i64 %0, ptr %this, align 8
  ret void

for.body17:                                       ; preds = %for.body17, %entry
  %0 = phi i64 [ 0, %entry ], [ %shl23, %for.body17 ]
  %Mask.addr.276 = phi ptr [ null, %entry ], [ %incdec.ptr19, %for.body17 ]
  %b14.075 = phi i32 [ 0, %entry ], [ %add29, %for.body17 ]
  %MaskWords.addr.174 = phi i32 [ 0, %entry ], [ %dec, %for.body17 ]
  %1 = load i32, ptr %Mask.addr.276, align 4
  %not20 = xor i32 %1, 1
  %conv21 = zext i32 %not20 to i64
  %sh_prom22 = zext i32 %b14.075 to i64
  %shl23 = shl i64 %conv21, %sh_prom22
  %incdec.ptr19 = getelementptr i8, ptr %Mask.addr.276, i64 4
  %add29 = add i32 %b14.075, 1
  %dec = add i32 %MaskWords.addr.174, 1
  %tobool.not = icmp eq i32 %dec, 0
  br i1 %tobool.not, label %for.cond15.for.cond.cleanup16_crit_edge, label %for.body17
}


define void @zext_iv_increment(ptr %dst, i64 %sub.ptr.rhs.cast.i533) {
; DEFAULT-LABEL: define void @zext_iv_increment(
; DEFAULT-SAME: ptr [[DST:%.*]], i64 [[SUB_PTR_RHS_CAST_I533:%.*]]) {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    [[UMAX1:%.*]] = call i64 @llvm.umax.i64(i64 [[SUB_PTR_RHS_CAST_I533]], i64 1)
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[UMAX1]], 2
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_SCEVCHECK:%.*]]
; DEFAULT:       vector.scevcheck:
; DEFAULT-NEXT:    [[UMAX:%.*]] = call i64 @llvm.umax.i64(i64 [[SUB_PTR_RHS_CAST_I533]], i64 1)
; DEFAULT-NEXT:    [[TMP0:%.*]] = add i64 [[UMAX]], -1
; DEFAULT-NEXT:    [[TMP1:%.*]] = icmp ugt i64 [[TMP0]], 4294967295
; DEFAULT-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP0]] to i32
; DEFAULT-NEXT:    [[TMP3:%.*]] = add i32 1, [[TMP2]]
; DEFAULT-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP3]], 1
; DEFAULT-NEXT:    [[TMP5:%.*]] = icmp ugt i64 [[TMP0]], 4294967295
; DEFAULT-NEXT:    [[TMP6:%.*]] = or i1 [[TMP4]], [[TMP5]]
; DEFAULT-NEXT:    br i1 [[TMP6]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[UMAX1]], 2
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[UMAX1]], [[N_MOD_VF]]
; DEFAULT-NEXT:    [[IND_END:%.*]] = trunc i64 [[N_VEC]] to i32
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 0
; DEFAULT-NEXT:    [[TMP8:%.*]] = add i64 [[INDEX]], 1
; DEFAULT-NEXT:    [[TMP9:%.*]] = getelementptr { i32, i32, i32 }, ptr [[DST]], i64 [[TMP7]], i32 2
; DEFAULT-NEXT:    [[TMP10:%.*]] = getelementptr { i32, i32, i32 }, ptr [[DST]], i64 [[TMP8]], i32 2
; DEFAULT-NEXT:    store i32 0, ptr [[TMP9]], align 8
; DEFAULT-NEXT:    store i32 0, ptr [[TMP10]], align 8
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2
; DEFAULT-NEXT:    [[TMP11:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP11]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[UMAX1]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP173_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; DEFAULT-NEXT:    [[BC_RESUME_VAL2:%.*]] = phi i32 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY174:%.*]]
; DEFAULT:       for.cond.cleanup173.loopexit:
; DEFAULT-NEXT:    ret void
; DEFAULT:       for.body174:
; DEFAULT-NEXT:    [[CONV169801:%.*]] = phi i64 [ [[CONV169:%.*]], [[FOR_BODY174]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; DEFAULT-NEXT:    [[I167_0800:%.*]] = phi i32 [ [[INC179:%.*]], [[FOR_BODY174]] ], [ [[BC_RESUME_VAL2]], [[SCALAR_PH]] ]
; DEFAULT-NEXT:    [[PATCH_INDEX:%.*]] = getelementptr { i32, i32, i32 }, ptr [[DST]], i64 [[CONV169801]], i32 2
; DEFAULT-NEXT:    store i32 0, ptr [[PATCH_INDEX]], align 8
; DEFAULT-NEXT:    [[INC179]] = add i32 [[I167_0800]], 1
; DEFAULT-NEXT:    [[CONV169]] = zext i32 [[INC179]] to i64
; DEFAULT-NEXT:    [[CMP172:%.*]] = icmp ult i64 [[CONV169]], [[SUB_PTR_RHS_CAST_I533]]
; DEFAULT-NEXT:    br i1 [[CMP172]], label [[FOR_BODY174]], label [[FOR_COND_CLEANUP173_LOOPEXIT]], !llvm.loop [[LOOP9:![0-9]+]]
;
; PRED-LABEL: define void @zext_iv_increment(
; PRED-SAME: ptr [[DST:%.*]], i64 [[SUB_PTR_RHS_CAST_I533:%.*]]) {
; PRED-NEXT:  entry:
; PRED-NEXT:    [[UMAX1:%.*]] = call i64 @llvm.umax.i64(i64 [[SUB_PTR_RHS_CAST_I533]], i64 1)
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_SCEVCHECK:%.*]]
; PRED:       vector.scevcheck:
; PRED-NEXT:    [[UMAX:%.*]] = call i64 @llvm.umax.i64(i64 [[SUB_PTR_RHS_CAST_I533]], i64 1)
; PRED-NEXT:    [[TMP0:%.*]] = add i64 [[UMAX]], -1
; PRED-NEXT:    [[TMP1:%.*]] = icmp ugt i64 [[TMP0]], 4294967295
; PRED-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP0]] to i32
; PRED-NEXT:    [[TMP3:%.*]] = add i32 1, [[TMP2]]
; PRED-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP3]], 1
; PRED-NEXT:    [[TMP5:%.*]] = icmp ugt i64 [[TMP0]], 4294967295
; PRED-NEXT:    [[TMP6:%.*]] = or i1 [[TMP4]], [[TMP5]]
; PRED-NEXT:    br i1 [[TMP6]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[N_RND_UP:%.*]] = add i64 [[UMAX1]], 1
; PRED-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_RND_UP]], 2
; PRED-NEXT:    [[N_VEC:%.*]] = sub i64 [[N_RND_UP]], [[N_MOD_VF]]
; PRED-NEXT:    [[IND_END:%.*]] = trunc i64 [[N_VEC]] to i32
; PRED-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[UMAX1]], 1
; PRED-NEXT:    [[BROADCAST_SPLATINSERT3:%.*]] = insertelement <2 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT4:%.*]] = shufflevector <2 x i64> [[BROADCAST_SPLATINSERT3]], <2 x i64> poison, <2 x i32> zeroinitializer
; PRED-NEXT:    br label [[FOR_BODY174:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE6:%.*]] ]
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <2 x i64> poison, i64 [[INDEX]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <2 x i64> [[BROADCAST_SPLATINSERT]], <2 x i64> poison, <2 x i32> zeroinitializer
; PRED-NEXT:    [[VEC_IV:%.*]] = add <2 x i64> [[BROADCAST_SPLAT]], <i64 0, i64 1>
; PRED-NEXT:    [[TMP7:%.*]] = icmp ule <2 x i64> [[VEC_IV]], [[BROADCAST_SPLAT4]]
; PRED-NEXT:    [[TMP8:%.*]] = extractelement <2 x i1> [[TMP7]], i32 0
; PRED-NEXT:    br i1 [[TMP8]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; PRED:       pred.store.if:
; PRED-NEXT:    [[TMP9:%.*]] = add i64 [[INDEX]], 0
; PRED-NEXT:    [[TMP10:%.*]] = getelementptr { i32, i32, i32 }, ptr [[DST]], i64 [[TMP9]], i32 2
; PRED-NEXT:    store i32 0, ptr [[TMP10]], align 8
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE]]
; PRED:       pred.store.continue:
; PRED-NEXT:    [[TMP11:%.*]] = extractelement <2 x i1> [[TMP7]], i32 1
; PRED-NEXT:    br i1 [[TMP11]], label [[PRED_STORE_IF5:%.*]], label [[PRED_STORE_CONTINUE6]]
; PRED:       pred.store.if5:
; PRED-NEXT:    [[TMP12:%.*]] = add i64 [[INDEX]], 1
; PRED-NEXT:    [[TMP13:%.*]] = getelementptr { i32, i32, i32 }, ptr [[DST]], i64 [[TMP12]], i32 2
; PRED-NEXT:    store i32 0, ptr [[TMP13]], align 8
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE6]]
; PRED:       pred.store.continue6:
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 2
; PRED-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; PRED-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[FOR_BODY174]], !llvm.loop [[LOOP6:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[FOR_COND_CLEANUP173_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; PRED-NEXT:    [[BC_RESUME_VAL2:%.*]] = phi i32 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; PRED-NEXT:    br label [[FOR_BODY175:%.*]]
; PRED:       for.cond.cleanup173.loopexit:
; PRED-NEXT:    ret void
; PRED:       for.body174:
; PRED-NEXT:    [[CONV169801:%.*]] = phi i64 [ [[CONV169:%.*]], [[FOR_BODY175]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; PRED-NEXT:    [[I167_0800:%.*]] = phi i32 [ [[INC179:%.*]], [[FOR_BODY175]] ], [ [[BC_RESUME_VAL2]], [[SCALAR_PH]] ]
; PRED-NEXT:    [[PATCH_INDEX:%.*]] = getelementptr { i32, i32, i32 }, ptr [[DST]], i64 [[CONV169801]], i32 2
; PRED-NEXT:    store i32 0, ptr [[PATCH_INDEX]], align 8
; PRED-NEXT:    [[INC179]] = add i32 [[I167_0800]], 1
; PRED-NEXT:    [[CONV169]] = zext i32 [[INC179]] to i64
; PRED-NEXT:    [[CMP172:%.*]] = icmp ult i64 [[CONV169]], [[SUB_PTR_RHS_CAST_I533]]
; PRED-NEXT:    br i1 [[CMP172]], label [[FOR_BODY175]], label [[FOR_COND_CLEANUP173_LOOPEXIT]], !llvm.loop [[LOOP7:![0-9]+]]
;
entry:
  br label %for.body174

for.cond.cleanup173.loopexit:                     ; preds = %for.body174
  ret void

for.body174:                                      ; preds = %for.body174, %entry
  %conv169801 = phi i64 [ %conv169, %for.body174 ], [ 0, %entry ]
  %i167.0800 = phi i32 [ %inc179, %for.body174 ], [ 0, %entry ]
  %patch_index = getelementptr { i32, i32, i32 }, ptr %dst, i64 %conv169801, i32 2
  store i32 0, ptr %patch_index, align 8
  %inc179 = add i32 %i167.0800, 1
  %conv169 = zext i32 %inc179 to i64
  %cmp172 = icmp ult i64 %conv169, %sub.ptr.rhs.cast.i533
  br i1 %cmp172, label %for.body174, label %for.cond.cleanup173.loopexit
}


define void @invar_cond_chain_1(ptr %I, i1 %cmp322) {
; DEFAULT-LABEL: define void @invar_cond_chain_1(
; DEFAULT-SAME: ptr [[I:%.*]], i1 [[CMP322:%.*]]) {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    [[I1:%.*]] = ptrtoint ptr [[I]] to i64
; DEFAULT-NEXT:    [[TMP0:%.*]] = lshr i64 [[I1]], 2
; DEFAULT-NEXT:    [[TMP1:%.*]] = add nuw nsw i64 [[TMP0]], 1
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP1]], 8
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP1]], 8
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP1]], [[N_MOD_VF]]
; DEFAULT-NEXT:    [[TMP2:%.*]] = mul i64 [[N_VEC]], 4
; DEFAULT-NEXT:    [[IND_END:%.*]] = getelementptr i8, ptr null, i64 [[TMP2]]
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i1> poison, i1 [[CMP322]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i1> [[BROADCAST_SPLATINSERT]], <4 x i1> poison, <4 x i32> zeroinitializer
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE17:%.*]] ]
; DEFAULT-NEXT:    [[OFFSET_IDX:%.*]] = mul i64 [[INDEX]], 4
; DEFAULT-NEXT:    [[TMP3:%.*]] = add i64 [[OFFSET_IDX]], 0
; DEFAULT-NEXT:    [[TMP4:%.*]] = add i64 [[OFFSET_IDX]], 16
; DEFAULT-NEXT:    [[NEXT_GEP:%.*]] = getelementptr i8, ptr null, i64 [[TMP3]]
; DEFAULT-NEXT:    [[NEXT_GEP2:%.*]] = getelementptr i8, ptr null, i64 [[TMP4]]
; DEFAULT-NEXT:    [[TMP5:%.*]] = getelementptr i32, ptr [[NEXT_GEP]], i32 0
; DEFAULT-NEXT:    [[TMP6:%.*]] = getelementptr i32, ptr [[NEXT_GEP]], i32 4
; DEFAULT-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, ptr [[TMP5]], align 4
; DEFAULT-NEXT:    [[WIDE_LOAD3:%.*]] = load <4 x i32>, ptr [[TMP6]], align 4
; DEFAULT-NEXT:    [[TMP7:%.*]] = select <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i1> [[BROADCAST_SPLAT]], <4 x i1> zeroinitializer
; DEFAULT-NEXT:    [[TMP8:%.*]] = select <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i1> [[BROADCAST_SPLAT]], <4 x i1> zeroinitializer
; DEFAULT-NEXT:    [[TMP9:%.*]] = or <4 x i1> [[TMP7]], zeroinitializer
; DEFAULT-NEXT:    [[TMP10:%.*]] = or <4 x i1> [[TMP8]], zeroinitializer
; DEFAULT-NEXT:    [[TMP11:%.*]] = extractelement <4 x i1> [[TMP9]], i32 0
; DEFAULT-NEXT:    br i1 [[TMP11]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; DEFAULT:       pred.store.if:
; DEFAULT-NEXT:    [[TMP12:%.*]] = extractelement <4 x i32> [[WIDE_LOAD]], i32 0
; DEFAULT-NEXT:    store i32 [[TMP12]], ptr [[I]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE]]
; DEFAULT:       pred.store.continue:
; DEFAULT-NEXT:    [[TMP13:%.*]] = extractelement <4 x i1> [[TMP9]], i32 1
; DEFAULT-NEXT:    br i1 [[TMP13]], label [[PRED_STORE_IF4:%.*]], label [[PRED_STORE_CONTINUE5:%.*]]
; DEFAULT:       pred.store.if4:
; DEFAULT-NEXT:    [[TMP14:%.*]] = extractelement <4 x i32> [[WIDE_LOAD]], i32 1
; DEFAULT-NEXT:    store i32 [[TMP14]], ptr [[I]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE5]]
; DEFAULT:       pred.store.continue5:
; DEFAULT-NEXT:    [[TMP15:%.*]] = extractelement <4 x i1> [[TMP9]], i32 2
; DEFAULT-NEXT:    br i1 [[TMP15]], label [[PRED_STORE_IF6:%.*]], label [[PRED_STORE_CONTINUE7:%.*]]
; DEFAULT:       pred.store.if6:
; DEFAULT-NEXT:    [[TMP16:%.*]] = extractelement <4 x i32> [[WIDE_LOAD]], i32 2
; DEFAULT-NEXT:    store i32 [[TMP16]], ptr [[I]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE7]]
; DEFAULT:       pred.store.continue7:
; DEFAULT-NEXT:    [[TMP17:%.*]] = extractelement <4 x i1> [[TMP9]], i32 3
; DEFAULT-NEXT:    br i1 [[TMP17]], label [[PRED_STORE_IF8:%.*]], label [[PRED_STORE_CONTINUE9:%.*]]
; DEFAULT:       pred.store.if8:
; DEFAULT-NEXT:    [[TMP18:%.*]] = extractelement <4 x i32> [[WIDE_LOAD]], i32 3
; DEFAULT-NEXT:    store i32 [[TMP18]], ptr [[I]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE9]]
; DEFAULT:       pred.store.continue9:
; DEFAULT-NEXT:    [[TMP19:%.*]] = extractelement <4 x i1> [[TMP10]], i32 0
; DEFAULT-NEXT:    br i1 [[TMP19]], label [[PRED_STORE_IF10:%.*]], label [[PRED_STORE_CONTINUE11:%.*]]
; DEFAULT:       pred.store.if10:
; DEFAULT-NEXT:    [[TMP20:%.*]] = extractelement <4 x i32> [[WIDE_LOAD3]], i32 0
; DEFAULT-NEXT:    store i32 [[TMP20]], ptr [[I]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE11]]
; DEFAULT:       pred.store.continue11:
; DEFAULT-NEXT:    [[TMP21:%.*]] = extractelement <4 x i1> [[TMP10]], i32 1
; DEFAULT-NEXT:    br i1 [[TMP21]], label [[PRED_STORE_IF12:%.*]], label [[PRED_STORE_CONTINUE13:%.*]]
; DEFAULT:       pred.store.if12:
; DEFAULT-NEXT:    [[TMP22:%.*]] = extractelement <4 x i32> [[WIDE_LOAD3]], i32 1
; DEFAULT-NEXT:    store i32 [[TMP22]], ptr [[I]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE13]]
; DEFAULT:       pred.store.continue13:
; DEFAULT-NEXT:    [[TMP23:%.*]] = extractelement <4 x i1> [[TMP10]], i32 2
; DEFAULT-NEXT:    br i1 [[TMP23]], label [[PRED_STORE_IF14:%.*]], label [[PRED_STORE_CONTINUE15:%.*]]
; DEFAULT:       pred.store.if14:
; DEFAULT-NEXT:    [[TMP24:%.*]] = extractelement <4 x i32> [[WIDE_LOAD3]], i32 2
; DEFAULT-NEXT:    store i32 [[TMP24]], ptr [[I]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE15]]
; DEFAULT:       pred.store.continue15:
; DEFAULT-NEXT:    [[TMP25:%.*]] = extractelement <4 x i1> [[TMP10]], i32 3
; DEFAULT-NEXT:    br i1 [[TMP25]], label [[PRED_STORE_IF16:%.*]], label [[PRED_STORE_CONTINUE17]]
; DEFAULT:       pred.store.if16:
; DEFAULT-NEXT:    [[TMP26:%.*]] = extractelement <4 x i32> [[WIDE_LOAD3]], i32 3
; DEFAULT-NEXT:    store i32 [[TMP26]], ptr [[I]], align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE17]]
; DEFAULT:       pred.store.continue17:
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; DEFAULT-NEXT:    [[TMP27:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP27]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP10:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP1]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP312_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi ptr [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ null, [[ENTRY:%.*]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY313:%.*]]
; DEFAULT:       for.cond.cleanup312.loopexit:
; DEFAULT-NEXT:    ret void
; DEFAULT:       for.body313:
; DEFAULT-NEXT:    [[__BEGIN3_011973:%.*]] = phi ptr [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INCDEC_PTR329:%.*]], [[IF_END327:%.*]] ]
; DEFAULT-NEXT:    [[TMP28:%.*]] = load i32, ptr [[__BEGIN3_011973]], align 4
; DEFAULT-NEXT:    br i1 true, label [[IF_ELSE321:%.*]], label [[IF_THEN316:%.*]]
; DEFAULT:       if.then316:
; DEFAULT-NEXT:    br label [[IF_END327_SINK_SPLIT:%.*]]
; DEFAULT:       if.else321:
; DEFAULT-NEXT:    br i1 [[CMP322]], label [[IF_THEN323:%.*]], label [[IF_END327]]
; DEFAULT:       if.then323:
; DEFAULT-NEXT:    br label [[IF_END327_SINK_SPLIT]]
; DEFAULT:       if.end327.sink.split:
; DEFAULT-NEXT:    store i32 [[TMP28]], ptr [[I]], align 4
; DEFAULT-NEXT:    br label [[IF_END327]]
; DEFAULT:       if.end327:
; DEFAULT-NEXT:    [[INCDEC_PTR329]] = getelementptr inbounds i8, ptr [[__BEGIN3_011973]], i64 4
; DEFAULT-NEXT:    [[CMP311_NOT:%.*]] = icmp eq ptr [[__BEGIN3_011973]], [[I]]
; DEFAULT-NEXT:    br i1 [[CMP311_NOT]], label [[FOR_COND_CLEANUP312_LOOPEXIT]], label [[FOR_BODY313]], !llvm.loop [[LOOP11:![0-9]+]]
;
; PRED-LABEL: define void @invar_cond_chain_1(
; PRED-SAME: ptr [[I:%.*]], i1 [[CMP322:%.*]]) {
; PRED-NEXT:  entry:
; PRED-NEXT:    br label [[FOR_BODY313:%.*]]
; PRED:       for.cond.cleanup312.loopexit:
; PRED-NEXT:    ret void
; PRED:       for.body313:
; PRED-NEXT:    [[__BEGIN3_011973:%.*]] = phi ptr [ null, [[ENTRY:%.*]] ], [ [[INCDEC_PTR329:%.*]], [[IF_END327:%.*]] ]
; PRED-NEXT:    [[TMP0:%.*]] = load i32, ptr [[__BEGIN3_011973]], align 4
; PRED-NEXT:    br i1 true, label [[IF_ELSE321:%.*]], label [[IF_THEN316:%.*]]
; PRED:       if.then316:
; PRED-NEXT:    br label [[IF_END327_SINK_SPLIT:%.*]]
; PRED:       if.else321:
; PRED-NEXT:    br i1 [[CMP322]], label [[IF_THEN323:%.*]], label [[IF_END327]]
; PRED:       if.then323:
; PRED-NEXT:    br label [[IF_END327_SINK_SPLIT]]
; PRED:       if.end327.sink.split:
; PRED-NEXT:    store i32 [[TMP0]], ptr [[I]], align 4
; PRED-NEXT:    br label [[IF_END327]]
; PRED:       if.end327:
; PRED-NEXT:    [[INCDEC_PTR329]] = getelementptr inbounds i8, ptr [[__BEGIN3_011973]], i64 4
; PRED-NEXT:    [[CMP311_NOT:%.*]] = icmp eq ptr [[__BEGIN3_011973]], [[I]]
; PRED-NEXT:    br i1 [[CMP311_NOT]], label [[FOR_COND_CLEANUP312_LOOPEXIT:%.*]], label [[FOR_BODY313]]
;
entry:
  br label %for.body313

for.cond.cleanup312.loopexit:                     ; preds = %if.end327
  ret void

for.body313:                                      ; preds = %if.end327, %entry
  %__begin3.011973 = phi ptr [ null, %entry ], [ %incdec.ptr329, %if.end327 ]
  %0 = load i32, ptr %__begin3.011973, align 4
  br i1 true, label %if.else321, label %if.then316

if.then316:                                       ; preds = %for.body313
  br label %if.end327.sink.split

if.else321:                                       ; preds = %for.body313
  br i1 %cmp322, label %if.then323, label %if.end327

if.then323:                                       ; preds = %if.else321
  br label %if.end327.sink.split

if.end327.sink.split:                             ; preds = %if.then323, %if.then316
  store i32 %0, ptr %I, align 4
  br label %if.end327

if.end327:                                        ; preds = %if.end327.sink.split, %if.else321
  %incdec.ptr329 = getelementptr inbounds i8, ptr %__begin3.011973, i64 4
  %cmp311.not = icmp eq ptr %__begin3.011973, %I
  br i1 %cmp311.not, label %for.cond.cleanup312.loopexit, label %for.body313
}

define void @invar_cond_chain_2(ptr %I, i32 %0) {
; DEFAULT-LABEL: define void @invar_cond_chain_2(
; DEFAULT-SAME: ptr [[I:%.*]], i32 [[TMP0:%.*]]) {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    [[I1:%.*]] = ptrtoint ptr [[I]] to i64
; DEFAULT-NEXT:    [[TMP1:%.*]] = lshr i64 [[I1]], 2
; DEFAULT-NEXT:    [[TMP2:%.*]] = add nuw nsw i64 [[TMP1]], 1
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP2]], 8
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP2]], 8
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP2]], [[N_MOD_VF]]
; DEFAULT-NEXT:    [[TMP3:%.*]] = mul i64 [[N_VEC]], 4
; DEFAULT-NEXT:    [[IND_END:%.*]] = getelementptr i8, ptr null, i64 [[TMP3]]
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT]], <4 x i32> poison, <4 x i32> zeroinitializer
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE15:%.*]] ]
; DEFAULT-NEXT:    [[TMP4:%.*]] = icmp sgt <4 x i32> [[BROADCAST_SPLAT]], zeroinitializer
; DEFAULT-NEXT:    [[TMP5:%.*]] = icmp sgt <4 x i32> [[BROADCAST_SPLAT]], zeroinitializer
; DEFAULT-NEXT:    [[TMP6:%.*]] = xor <4 x i1> [[TMP4]], <i1 true, i1 true, i1 true, i1 true>
; DEFAULT-NEXT:    [[TMP7:%.*]] = xor <4 x i1> [[TMP5]], <i1 true, i1 true, i1 true, i1 true>
; DEFAULT-NEXT:    [[TMP8:%.*]] = extractelement <4 x i1> [[TMP6]], i32 0
; DEFAULT-NEXT:    br i1 [[TMP8]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; DEFAULT:       pred.store.if:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE]]
; DEFAULT:       pred.store.continue:
; DEFAULT-NEXT:    [[TMP9:%.*]] = extractelement <4 x i1> [[TMP6]], i32 1
; DEFAULT-NEXT:    br i1 [[TMP9]], label [[PRED_STORE_IF2:%.*]], label [[PRED_STORE_CONTINUE3:%.*]]
; DEFAULT:       pred.store.if2:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE3]]
; DEFAULT:       pred.store.continue3:
; DEFAULT-NEXT:    [[TMP10:%.*]] = extractelement <4 x i1> [[TMP6]], i32 2
; DEFAULT-NEXT:    br i1 [[TMP10]], label [[PRED_STORE_IF4:%.*]], label [[PRED_STORE_CONTINUE5:%.*]]
; DEFAULT:       pred.store.if4:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE5]]
; DEFAULT:       pred.store.continue5:
; DEFAULT-NEXT:    [[TMP11:%.*]] = extractelement <4 x i1> [[TMP6]], i32 3
; DEFAULT-NEXT:    br i1 [[TMP11]], label [[PRED_STORE_IF6:%.*]], label [[PRED_STORE_CONTINUE7:%.*]]
; DEFAULT:       pred.store.if6:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE7]]
; DEFAULT:       pred.store.continue7:
; DEFAULT-NEXT:    [[TMP12:%.*]] = extractelement <4 x i1> [[TMP7]], i32 0
; DEFAULT-NEXT:    br i1 [[TMP12]], label [[PRED_STORE_IF8:%.*]], label [[PRED_STORE_CONTINUE9:%.*]]
; DEFAULT:       pred.store.if8:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE9]]
; DEFAULT:       pred.store.continue9:
; DEFAULT-NEXT:    [[TMP13:%.*]] = extractelement <4 x i1> [[TMP7]], i32 1
; DEFAULT-NEXT:    br i1 [[TMP13]], label [[PRED_STORE_IF10:%.*]], label [[PRED_STORE_CONTINUE11:%.*]]
; DEFAULT:       pred.store.if10:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE11]]
; DEFAULT:       pred.store.continue11:
; DEFAULT-NEXT:    [[TMP14:%.*]] = extractelement <4 x i1> [[TMP7]], i32 2
; DEFAULT-NEXT:    br i1 [[TMP14]], label [[PRED_STORE_IF12:%.*]], label [[PRED_STORE_CONTINUE13:%.*]]
; DEFAULT:       pred.store.if12:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE13]]
; DEFAULT:       pred.store.continue13:
; DEFAULT-NEXT:    [[TMP15:%.*]] = extractelement <4 x i1> [[TMP7]], i32 3
; DEFAULT-NEXT:    br i1 [[TMP15]], label [[PRED_STORE_IF14:%.*]], label [[PRED_STORE_CONTINUE15]]
; DEFAULT:       pred.store.if14:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[PRED_STORE_CONTINUE15]]
; DEFAULT:       pred.store.continue15:
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; DEFAULT-NEXT:    [[TMP16:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP16]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP2]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP312_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi ptr [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ null, [[ENTRY:%.*]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY313:%.*]]
; DEFAULT:       for.cond.cleanup312.loopexit:
; DEFAULT-NEXT:    ret void
; DEFAULT:       for.body313:
; DEFAULT-NEXT:    [[__BEGIN3_01197:%.*]] = phi ptr [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INCDEC_PTR329:%.*]], [[IF_END327:%.*]] ]
; DEFAULT-NEXT:    [[CMP315_NOT:%.*]] = icmp sgt i32 [[TMP0]], 0
; DEFAULT-NEXT:    br i1 [[CMP315_NOT]], label [[IF_END327]], label [[IF_THEN316:%.*]]
; DEFAULT:       if.then316:
; DEFAULT-NEXT:    br label [[IF_END327_SINK_SPLIT:%.*]]
; DEFAULT:       if.end327.sink.split:
; DEFAULT-NEXT:    store i32 0, ptr null, align 4
; DEFAULT-NEXT:    br label [[IF_END327]]
; DEFAULT:       if.end327:
; DEFAULT-NEXT:    [[INCDEC_PTR329]] = getelementptr inbounds i8, ptr [[__BEGIN3_01197]], i64 4
; DEFAULT-NEXT:    [[CMP311_NOT:%.*]] = icmp eq ptr [[__BEGIN3_01197]], [[I]]
; DEFAULT-NEXT:    br i1 [[CMP311_NOT]], label [[FOR_COND_CLEANUP312_LOOPEXIT]], label [[FOR_BODY313]], !llvm.loop [[LOOP13:![0-9]+]]
;
; PRED-LABEL: define void @invar_cond_chain_2(
; PRED-SAME: ptr [[I:%.*]], i32 [[TMP0:%.*]]) {
; PRED-NEXT:  entry:
; PRED-NEXT:    [[I1:%.*]] = ptrtoint ptr [[I]] to i64
; PRED-NEXT:    [[TMP1:%.*]] = lshr i64 [[I1]], 2
; PRED-NEXT:    [[TMP2:%.*]] = add nuw nsw i64 [[TMP1]], 1
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[N_RND_UP:%.*]] = add i64 [[TMP2]], 3
; PRED-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_RND_UP]], 4
; PRED-NEXT:    [[N_VEC:%.*]] = sub i64 [[N_RND_UP]], [[N_MOD_VF]]
; PRED-NEXT:    [[TMP3:%.*]] = mul i64 [[N_VEC]], 4
; PRED-NEXT:    [[IND_END:%.*]] = getelementptr i8, ptr null, i64 [[TMP3]]
; PRED-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[TMP2]], 1
; PRED-NEXT:    [[BROADCAST_SPLATINSERT2:%.*]] = insertelement <4 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT3:%.*]] = shufflevector <4 x i64> [[BROADCAST_SPLATINSERT2]], <4 x i64> poison, <4 x i32> zeroinitializer
; PRED-NEXT:    [[BROADCAST_SPLATINSERT4:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT5:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT4]], <4 x i32> poison, <4 x i32> zeroinitializer
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE11:%.*]] ]
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i64> poison, i64 [[INDEX]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i64> [[BROADCAST_SPLATINSERT]], <4 x i64> poison, <4 x i32> zeroinitializer
; PRED-NEXT:    [[VEC_IV:%.*]] = add <4 x i64> [[BROADCAST_SPLAT]], <i64 0, i64 1, i64 2, i64 3>
; PRED-NEXT:    [[TMP4:%.*]] = icmp ule <4 x i64> [[VEC_IV]], [[BROADCAST_SPLAT3]]
; PRED-NEXT:    [[TMP5:%.*]] = icmp sgt <4 x i32> [[BROADCAST_SPLAT5]], zeroinitializer
; PRED-NEXT:    [[TMP6:%.*]] = xor <4 x i1> [[TMP5]], <i1 true, i1 true, i1 true, i1 true>
; PRED-NEXT:    [[TMP7:%.*]] = select <4 x i1> [[TMP4]], <4 x i1> [[TMP6]], <4 x i1> zeroinitializer
; PRED-NEXT:    [[TMP8:%.*]] = extractelement <4 x i1> [[TMP7]], i32 0
; PRED-NEXT:    br i1 [[TMP8]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; PRED:       pred.store.if:
; PRED-NEXT:    store i32 0, ptr null, align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE]]
; PRED:       pred.store.continue:
; PRED-NEXT:    [[TMP9:%.*]] = extractelement <4 x i1> [[TMP7]], i32 1
; PRED-NEXT:    br i1 [[TMP9]], label [[PRED_STORE_IF6:%.*]], label [[PRED_STORE_CONTINUE7:%.*]]
; PRED:       pred.store.if6:
; PRED-NEXT:    store i32 0, ptr null, align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE7]]
; PRED:       pred.store.continue7:
; PRED-NEXT:    [[TMP10:%.*]] = extractelement <4 x i1> [[TMP7]], i32 2
; PRED-NEXT:    br i1 [[TMP10]], label [[PRED_STORE_IF8:%.*]], label [[PRED_STORE_CONTINUE9:%.*]]
; PRED:       pred.store.if8:
; PRED-NEXT:    store i32 0, ptr null, align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE9]]
; PRED:       pred.store.continue9:
; PRED-NEXT:    [[TMP11:%.*]] = extractelement <4 x i1> [[TMP7]], i32 3
; PRED-NEXT:    br i1 [[TMP11]], label [[PRED_STORE_IF10:%.*]], label [[PRED_STORE_CONTINUE11]]
; PRED:       pred.store.if10:
; PRED-NEXT:    store i32 0, ptr null, align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE11]]
; PRED:       pred.store.continue11:
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 4
; PRED-NEXT:    [[TMP12:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; PRED-NEXT:    br i1 [[TMP12]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[FOR_COND_CLEANUP312_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi ptr [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ null, [[ENTRY:%.*]] ]
; PRED-NEXT:    br label [[FOR_BODY313:%.*]]
; PRED:       for.cond.cleanup312.loopexit:
; PRED-NEXT:    ret void
; PRED:       for.body313:
; PRED-NEXT:    [[__BEGIN3_01197:%.*]] = phi ptr [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INCDEC_PTR329:%.*]], [[IF_END327:%.*]] ]
; PRED-NEXT:    [[CMP315_NOT:%.*]] = icmp sgt i32 [[TMP0]], 0
; PRED-NEXT:    br i1 [[CMP315_NOT]], label [[IF_END327]], label [[IF_THEN316:%.*]]
; PRED:       if.then316:
; PRED-NEXT:    br label [[IF_END327_SINK_SPLIT:%.*]]
; PRED:       if.end327.sink.split:
; PRED-NEXT:    store i32 0, ptr null, align 4
; PRED-NEXT:    br label [[IF_END327]]
; PRED:       if.end327:
; PRED-NEXT:    [[INCDEC_PTR329]] = getelementptr inbounds i8, ptr [[__BEGIN3_01197]], i64 4
; PRED-NEXT:    [[CMP311_NOT:%.*]] = icmp eq ptr [[__BEGIN3_01197]], [[I]]
; PRED-NEXT:    br i1 [[CMP311_NOT]], label [[FOR_COND_CLEANUP312_LOOPEXIT]], label [[FOR_BODY313]], !llvm.loop [[LOOP9:![0-9]+]]
;
entry:
  br label %for.body313

for.cond.cleanup312.loopexit:                     ; preds = %if.end327
  ret void

for.body313:                                      ; preds = %if.end327, %entry
  %__begin3.01197 = phi ptr [ null, %entry ], [ %incdec.ptr329, %if.end327 ]
  %cmp315.not = icmp sgt i32 %0, 0
  br i1 %cmp315.not, label %if.end327, label %if.then316

if.then316:                                       ; preds = %for.body313
  br label %if.end327.sink.split

if.end327.sink.split:                             ; preds = %if.then316
  store i32 0, ptr null, align 4
  br label %if.end327

if.end327:                                        ; preds = %if.end327.sink.split, %for.body313
  %incdec.ptr329 = getelementptr inbounds i8, ptr %__begin3.01197, i64 4
  %cmp311.not = icmp eq ptr %__begin3.01197, %I
  br i1 %cmp311.not, label %for.cond.cleanup312.loopexit, label %for.body313
}

define void @latch_branch_cost() {
; DEFAULT-LABEL: define void @latch_branch_cost() {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0
; DEFAULT-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 1
; DEFAULT-NEXT:    [[TMP2:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP0]]
; DEFAULT-NEXT:    [[TMP3:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP1]]
; DEFAULT-NEXT:    store i8 0, ptr [[TMP2]], align 1
; DEFAULT-NEXT:    store i8 0, ptr [[TMP3]], align 1
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2
; DEFAULT-NEXT:    [[TMP4:%.*]] = icmp eq i64 [[INDEX_NEXT]], 100
; DEFAULT-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP14:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    br i1 true, label [[FOR_END:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 100, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY:%.*]]
; DEFAULT:       for.body:
; DEFAULT-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DEFAULT-NEXT:    [[ARRAYIDX:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[INDVARS_IV]]
; DEFAULT-NEXT:    store i8 0, ptr [[ARRAYIDX]], align 1
; DEFAULT-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1
; DEFAULT-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 100
; DEFAULT-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP15:![0-9]+]]
; DEFAULT:       for.end:
; DEFAULT-NEXT:    ret void
;
; PRED-LABEL: define void @latch_branch_cost() {
; PRED-NEXT:  entry:
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE6:%.*]] ]
; PRED-NEXT:    [[VEC_IND:%.*]] = phi <8 x i64> [ <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[PRED_STORE_CONTINUE6]] ]
; PRED-NEXT:    [[TMP0:%.*]] = icmp ule <8 x i64> [[VEC_IND]], <i64 99, i64 99, i64 99, i64 99, i64 99, i64 99, i64 99, i64 99>
; PRED-NEXT:    [[TMP1:%.*]] = extractelement <8 x i1> [[TMP0]], i32 0
; PRED-NEXT:    br i1 [[TMP1]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; PRED:       pred.store.if:
; PRED-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 0
; PRED-NEXT:    [[TMP3:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP2]]
; PRED-NEXT:    store i8 0, ptr [[TMP3]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE]]
; PRED:       pred.store.continue:
; PRED-NEXT:    [[TMP4:%.*]] = extractelement <8 x i1> [[TMP0]], i32 1
; PRED-NEXT:    br i1 [[TMP4]], label [[PRED_STORE_IF1:%.*]], label [[PRED_STORE_CONTINUE2:%.*]]
; PRED:       pred.store.if1:
; PRED-NEXT:    [[TMP5:%.*]] = add i64 [[INDEX]], 1
; PRED-NEXT:    [[TMP6:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP5]]
; PRED-NEXT:    store i8 0, ptr [[TMP6]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE2]]
; PRED:       pred.store.continue2:
; PRED-NEXT:    [[TMP7:%.*]] = extractelement <8 x i1> [[TMP0]], i32 2
; PRED-NEXT:    br i1 [[TMP7]], label [[PRED_STORE_IF3:%.*]], label [[PRED_STORE_CONTINUE4:%.*]]
; PRED:       pred.store.if3:
; PRED-NEXT:    [[TMP8:%.*]] = add i64 [[INDEX]], 2
; PRED-NEXT:    [[TMP9:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP8]]
; PRED-NEXT:    store i8 0, ptr [[TMP9]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE4]]
; PRED:       pred.store.continue4:
; PRED-NEXT:    [[TMP10:%.*]] = extractelement <8 x i1> [[TMP0]], i32 3
; PRED-NEXT:    br i1 [[TMP10]], label [[PRED_STORE_IF5:%.*]], label [[PRED_STORE_CONTINUE7:%.*]]
; PRED:       pred.store.if5:
; PRED-NEXT:    [[TMP11:%.*]] = add i64 [[INDEX]], 3
; PRED-NEXT:    [[TMP12:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP11]]
; PRED-NEXT:    store i8 0, ptr [[TMP12]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE7]]
; PRED:       pred.store.continue6:
; PRED-NEXT:    [[TMP13:%.*]] = extractelement <8 x i1> [[TMP0]], i32 4
; PRED-NEXT:    br i1 [[TMP13]], label [[PRED_STORE_IF7:%.*]], label [[PRED_STORE_CONTINUE8:%.*]]
; PRED:       pred.store.if7:
; PRED-NEXT:    [[TMP14:%.*]] = add i64 [[INDEX]], 4
; PRED-NEXT:    [[TMP15:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP14]]
; PRED-NEXT:    store i8 0, ptr [[TMP15]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE8]]
; PRED:       pred.store.continue8:
; PRED-NEXT:    [[TMP16:%.*]] = extractelement <8 x i1> [[TMP0]], i32 5
; PRED-NEXT:    br i1 [[TMP16]], label [[PRED_STORE_IF9:%.*]], label [[PRED_STORE_CONTINUE10:%.*]]
; PRED:       pred.store.if9:
; PRED-NEXT:    [[TMP17:%.*]] = add i64 [[INDEX]], 5
; PRED-NEXT:    [[TMP18:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP17]]
; PRED-NEXT:    store i8 0, ptr [[TMP18]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE10]]
; PRED:       pred.store.continue10:
; PRED-NEXT:    [[TMP19:%.*]] = extractelement <8 x i1> [[TMP0]], i32 6
; PRED-NEXT:    br i1 [[TMP19]], label [[PRED_STORE_IF11:%.*]], label [[PRED_STORE_CONTINUE12:%.*]]
; PRED:       pred.store.if11:
; PRED-NEXT:    [[TMP20:%.*]] = add i64 [[INDEX]], 6
; PRED-NEXT:    [[TMP21:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP20]]
; PRED-NEXT:    store i8 0, ptr [[TMP21]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE12]]
; PRED:       pred.store.continue12:
; PRED-NEXT:    [[TMP22:%.*]] = extractelement <8 x i1> [[TMP0]], i32 7
; PRED-NEXT:    br i1 [[TMP22]], label [[PRED_STORE_IF13:%.*]], label [[PRED_STORE_CONTINUE6]]
; PRED:       pred.store.if13:
; PRED-NEXT:    [[TMP23:%.*]] = add i64 [[INDEX]], 7
; PRED-NEXT:    [[TMP24:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP23]]
; PRED-NEXT:    store i8 0, ptr [[TMP24]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE6]]
; PRED:       pred.store.continue14:
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 8
; PRED-NEXT:    [[VEC_IND_NEXT]] = add <8 x i64> [[VEC_IND]], <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
; PRED-NEXT:    [[TMP25:%.*]] = icmp eq i64 [[INDEX_NEXT]], 104
; PRED-NEXT:    br i1 [[TMP25]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP10:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[FOR_END:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 104, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; PRED-NEXT:    br label [[FOR_BODY:%.*]]
; PRED:       for.body:
; PRED-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; PRED-NEXT:    [[ARRAYIDX:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[INDVARS_IV]]
; PRED-NEXT:    store i8 0, ptr [[ARRAYIDX]], align 1
; PRED-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1
; PRED-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 100
; PRED-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]
; PRED:       for.end:
; PRED-NEXT:    ret void
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 %indvars.iv
  store i8 0, ptr %arrayidx, align 1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 100
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret void
}
;.
; DEFAULT: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; DEFAULT: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; DEFAULT: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; DEFAULT: [[LOOP3]] = distinct !{[[LOOP3]], [[META2]], [[META1]]}
; DEFAULT: [[LOOP4]] = distinct !{[[LOOP4]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP5]] = distinct !{[[LOOP5]], [[META2]], [[META1]]}
; DEFAULT: [[LOOP6]] = distinct !{[[LOOP6]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP7]] = distinct !{[[LOOP7]], [[META2]], [[META1]]}
; DEFAULT: [[LOOP8]] = distinct !{[[LOOP8]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP9]] = distinct !{[[LOOP9]], [[META1]]}
; DEFAULT: [[LOOP10]] = distinct !{[[LOOP10]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP11]] = distinct !{[[LOOP11]], [[META2]], [[META1]]}
; DEFAULT: [[LOOP12]] = distinct !{[[LOOP12]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP13]] = distinct !{[[LOOP13]], [[META2]], [[META1]]}
; DEFAULT: [[LOOP14]] = distinct !{[[LOOP14]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP15]] = distinct !{[[LOOP15]], [[META1]]}
;.
; PRED: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; PRED: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; PRED: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; PRED: [[LOOP3]] = distinct !{[[LOOP3]], [[META2]], [[META1]]}
; PRED: [[LOOP4]] = distinct !{[[LOOP4]], [[META1]], [[META2]]}
; PRED: [[LOOP5]] = distinct !{[[LOOP5]], [[META2]], [[META1]]}
; PRED: [[LOOP6]] = distinct !{[[LOOP6]], [[META1]], [[META2]]}
; PRED: [[LOOP7]] = distinct !{[[LOOP7]], [[META1]]}
; PRED: [[LOOP8]] = distinct !{[[LOOP8]], [[META1]], [[META2]]}
; PRED: [[LOOP9]] = distinct !{[[LOOP9]], [[META2]], [[META1]]}
; PRED: [[LOOP10]] = distinct !{[[LOOP10]], [[META1]], [[META2]]}
; PRED: [[LOOP11]] = distinct !{[[LOOP11]], [[META2]], [[META1]]}
;.
