; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -p loop-vectorize -S %s | FileCheck --check-prefixes=DEFAULT %s
; RUN: opt -p loop-vectorize -prefer-predicate-over-epilogue=predicate-else-scalar-epilogue -S %s | FileCheck --check-prefixes=PRED %s

target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

define void @mc_chroma(ptr %dst, ptr %src, i32 %mvy, i64 %wide.trip.count) #0 {
; DEFAULT-LABEL: define void @mc_chroma(
; DEFAULT-SAME: ptr [[DST:%.*]], ptr [[SRC:%.*]], i32 [[MVY:%.*]], i64 [[WIDE_TRIP_COUNT:%.*]]) #[[ATTR0:[0-9]+]] {
; DEFAULT-NEXT:  iter.check:
; DEFAULT-NEXT:    [[SRC2:%.*]] = ptrtoint ptr [[SRC]] to i64
; DEFAULT-NEXT:    [[DST1:%.*]] = ptrtoint ptr [[DST]] to i64
; DEFAULT-NEXT:    [[TMP0:%.*]] = add i64 [[WIDE_TRIP_COUNT]], 1
; DEFAULT-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 4
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP0]], [[TMP2]]
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[VEC_EPILOG_SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; DEFAULT:       vector.memcheck:
; DEFAULT-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP4:%.*]] = mul i64 [[TMP3]], 8
; DEFAULT-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 2
; DEFAULT-NEXT:    [[TMP6:%.*]] = sub i64 [[DST1]], [[SRC2]]
; DEFAULT-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP6]], [[TMP5]]
; DEFAULT-NEXT:    br i1 [[DIFF_CHECK]], label [[VEC_EPILOG_SCALAR_PH]], label [[VECTOR_MAIN_LOOP_ITER_CHECK:%.*]]
; DEFAULT:       vector.main.loop.iter.check:
; DEFAULT-NEXT:    [[TMP7:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP8:%.*]] = mul i64 [[TMP7]], 16
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK3:%.*]] = icmp ult i64 [[TMP0]], [[TMP8]]
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK3]], label [[VEC_EPILOG_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[TMP9:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP10:%.*]] = mul i64 [[TMP9]], 16
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP0]], [[TMP10]]
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP0]], [[N_MOD_VF]]
; DEFAULT-NEXT:    [[TMP11:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP12:%.*]] = mul i64 [[TMP11]], 16
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 8 x i32> poison, i32 [[MVY]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 8 x i32> [[BROADCAST_SPLATINSERT]], <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer
; DEFAULT-NEXT:    [[TMP13:%.*]] = trunc <vscale x 8 x i32> [[BROADCAST_SPLAT]] to <vscale x 8 x i16>
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP14:%.*]] = add i64 [[INDEX]], 0
; DEFAULT-NEXT:    [[TMP15:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP16:%.*]] = mul i64 [[TMP15]], 8
; DEFAULT-NEXT:    [[TMP17:%.*]] = add i64 [[TMP16]], 0
; DEFAULT-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP17]], 1
; DEFAULT-NEXT:    [[TMP19:%.*]] = add i64 [[INDEX]], [[TMP18]]
; DEFAULT-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[SRC]], i64 [[TMP14]]
; DEFAULT-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr [[SRC]], i64 [[TMP19]]
; DEFAULT-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[TMP20]], i32 0
; DEFAULT-NEXT:    [[TMP23:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP24:%.*]] = mul i64 [[TMP23]], 8
; DEFAULT-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[TMP20]], i64 [[TMP24]]
; DEFAULT-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 8 x i8>, ptr [[TMP22]], align 1
; DEFAULT-NEXT:    [[WIDE_LOAD4:%.*]] = load <vscale x 8 x i8>, ptr [[TMP25]], align 1
; DEFAULT-NEXT:    [[TMP26:%.*]] = zext <vscale x 8 x i8> [[WIDE_LOAD]] to <vscale x 8 x i16>
; DEFAULT-NEXT:    [[TMP27:%.*]] = zext <vscale x 8 x i8> [[WIDE_LOAD4]] to <vscale x 8 x i16>
; DEFAULT-NEXT:    [[TMP28:%.*]] = mul <vscale x 8 x i16> [[TMP26]], [[TMP13]]
; DEFAULT-NEXT:    [[TMP29:%.*]] = mul <vscale x 8 x i16> [[TMP27]], [[TMP13]]
; DEFAULT-NEXT:    [[TMP30:%.*]] = zext <vscale x 8 x i8> [[WIDE_LOAD]] to <vscale x 8 x i16>
; DEFAULT-NEXT:    [[TMP31:%.*]] = zext <vscale x 8 x i8> [[WIDE_LOAD4]] to <vscale x 8 x i16>
; DEFAULT-NEXT:    [[TMP32:%.*]] = or <vscale x 8 x i16> [[TMP28]], [[TMP30]]
; DEFAULT-NEXT:    [[TMP33:%.*]] = or <vscale x 8 x i16> [[TMP29]], [[TMP31]]
; DEFAULT-NEXT:    [[TMP34:%.*]] = lshr <vscale x 8 x i16> [[TMP32]], trunc (<vscale x 8 x i32> shufflevector (<vscale x 8 x i32> insertelement (<vscale x 8 x i32> poison, i32 1, i64 0), <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer) to <vscale x 8 x i16>)
; DEFAULT-NEXT:    [[TMP35:%.*]] = lshr <vscale x 8 x i16> [[TMP33]], trunc (<vscale x 8 x i32> shufflevector (<vscale x 8 x i32> insertelement (<vscale x 8 x i32> poison, i32 1, i64 0), <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer) to <vscale x 8 x i16>)
; DEFAULT-NEXT:    [[TMP36:%.*]] = trunc <vscale x 8 x i16> [[TMP34]] to <vscale x 8 x i8>
; DEFAULT-NEXT:    [[TMP37:%.*]] = trunc <vscale x 8 x i16> [[TMP35]] to <vscale x 8 x i8>
; DEFAULT-NEXT:    [[TMP38:%.*]] = getelementptr i8, ptr [[DST]], i64 [[TMP14]]
; DEFAULT-NEXT:    [[TMP39:%.*]] = getelementptr i8, ptr [[DST]], i64 [[TMP19]]
; DEFAULT-NEXT:    [[TMP40:%.*]] = getelementptr i8, ptr [[TMP38]], i32 0
; DEFAULT-NEXT:    [[TMP41:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP42:%.*]] = mul i64 [[TMP41]], 8
; DEFAULT-NEXT:    [[TMP43:%.*]] = getelementptr i8, ptr [[TMP38]], i64 [[TMP42]]
; DEFAULT-NEXT:    store <vscale x 8 x i8> [[TMP36]], ptr [[TMP40]], align 1
; DEFAULT-NEXT:    store <vscale x 8 x i8> [[TMP37]], ptr [[TMP43]], align 1
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP12]]
; DEFAULT-NEXT:    [[TMP44:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP44]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP0]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_COND10_FOR_COND_CLEANUP12_CRIT_EDGE_US:%.*]], label [[VEC_EPILOG_ITER_CHECK:%.*]]
; DEFAULT:       vec.epilog.iter.check:
; DEFAULT-NEXT:    [[N_VEC_REMAINING:%.*]] = sub i64 [[TMP0]], [[N_VEC]]
; DEFAULT-NEXT:    [[TMP45:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP46:%.*]] = mul i64 [[TMP45]], 4
; DEFAULT-NEXT:    [[MIN_EPILOG_ITERS_CHECK:%.*]] = icmp ult i64 [[N_VEC_REMAINING]], [[TMP46]]
; DEFAULT-NEXT:    br i1 [[MIN_EPILOG_ITERS_CHECK]], label [[VEC_EPILOG_SCALAR_PH]], label [[VEC_EPILOG_PH]]
; DEFAULT:       vec.epilog.ph:
; DEFAULT-NEXT:    [[VEC_EPILOG_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MAIN_LOOP_ITER_CHECK]] ]
; DEFAULT-NEXT:    [[TMP47:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP48:%.*]] = mul i64 [[TMP47]], 4
; DEFAULT-NEXT:    [[N_MOD_VF5:%.*]] = urem i64 [[TMP0]], [[TMP48]]
; DEFAULT-NEXT:    [[N_VEC6:%.*]] = sub i64 [[TMP0]], [[N_MOD_VF5]]
; DEFAULT-NEXT:    [[TMP49:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP50:%.*]] = mul i64 [[TMP49]], 4
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT8:%.*]] = insertelement <vscale x 4 x i32> poison, i32 [[MVY]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT9:%.*]] = shufflevector <vscale x 4 x i32> [[BROADCAST_SPLATINSERT8]], <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
; DEFAULT-NEXT:    [[TMP51:%.*]] = trunc <vscale x 4 x i32> [[BROADCAST_SPLAT9]] to <vscale x 4 x i16>
; DEFAULT-NEXT:    br label [[VEC_EPILOG_VECTOR_BODY:%.*]]
; DEFAULT:       vec.epilog.vector.body:
; DEFAULT-NEXT:    [[INDEX10:%.*]] = phi i64 [ [[VEC_EPILOG_RESUME_VAL]], [[VEC_EPILOG_PH]] ], [ [[INDEX_NEXT12:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP52:%.*]] = add i64 [[INDEX10]], 0
; DEFAULT-NEXT:    [[TMP53:%.*]] = getelementptr i8, ptr [[SRC]], i64 [[TMP52]]
; DEFAULT-NEXT:    [[TMP54:%.*]] = getelementptr i8, ptr [[TMP53]], i32 0
; DEFAULT-NEXT:    [[WIDE_LOAD11:%.*]] = load <vscale x 4 x i8>, ptr [[TMP54]], align 1
; DEFAULT-NEXT:    [[TMP55:%.*]] = zext <vscale x 4 x i8> [[WIDE_LOAD11]] to <vscale x 4 x i16>
; DEFAULT-NEXT:    [[TMP56:%.*]] = mul <vscale x 4 x i16> [[TMP55]], [[TMP51]]
; DEFAULT-NEXT:    [[TMP57:%.*]] = zext <vscale x 4 x i8> [[WIDE_LOAD11]] to <vscale x 4 x i16>
; DEFAULT-NEXT:    [[TMP58:%.*]] = or <vscale x 4 x i16> [[TMP56]], [[TMP57]]
; DEFAULT-NEXT:    [[TMP59:%.*]] = lshr <vscale x 4 x i16> [[TMP58]], trunc (<vscale x 4 x i32> shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer) to <vscale x 4 x i16>)
; DEFAULT-NEXT:    [[TMP60:%.*]] = trunc <vscale x 4 x i16> [[TMP59]] to <vscale x 4 x i8>
; DEFAULT-NEXT:    [[TMP61:%.*]] = getelementptr i8, ptr [[DST]], i64 [[TMP52]]
; DEFAULT-NEXT:    [[TMP62:%.*]] = getelementptr i8, ptr [[TMP61]], i32 0
; DEFAULT-NEXT:    store <vscale x 4 x i8> [[TMP60]], ptr [[TMP62]], align 1
; DEFAULT-NEXT:    [[INDEX_NEXT12]] = add nuw i64 [[INDEX10]], [[TMP50]]
; DEFAULT-NEXT:    [[TMP63:%.*]] = icmp eq i64 [[INDEX_NEXT12]], [[N_VEC6]]
; DEFAULT-NEXT:    br i1 [[TMP63]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; DEFAULT:       vec.epilog.middle.block:
; DEFAULT-NEXT:    [[CMP_N7:%.*]] = icmp eq i64 [[TMP0]], [[N_VEC6]]
; DEFAULT-NEXT:    br i1 [[CMP_N7]], label [[FOR_COND10_FOR_COND_CLEANUP12_CRIT_EDGE_US]], label [[VEC_EPILOG_SCALAR_PH]]
; DEFAULT:       vec.epilog.scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC6]], [[VEC_EPILOG_MIDDLE_BLOCK]] ], [ [[N_VEC]], [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MEMCHECK]] ], [ 0, [[ITER_CHECK:%.*]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY13_US:%.*]]
; DEFAULT:       for.body13.us:
; DEFAULT-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[VEC_EPILOG_SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY13_US]] ]
; DEFAULT-NEXT:    [[ARRAYIDX15_US:%.*]] = getelementptr i8, ptr [[SRC]], i64 [[INDVARS_IV]]
; DEFAULT-NEXT:    [[TMP64:%.*]] = load i8, ptr [[ARRAYIDX15_US]], align 1
; DEFAULT-NEXT:    [[CONV_US:%.*]] = zext i8 [[TMP64]] to i32
; DEFAULT-NEXT:    [[MUL16_US:%.*]] = mul i32 [[CONV_US]], [[MVY]]
; DEFAULT-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1
; DEFAULT-NEXT:    [[CONV25_US:%.*]] = zext i8 [[TMP64]] to i32
; DEFAULT-NEXT:    [[ADD34_US:%.*]] = or i32 [[MUL16_US]], [[CONV25_US]]
; DEFAULT-NEXT:    [[SHR35_US:%.*]] = lshr i32 [[ADD34_US]], 1
; DEFAULT-NEXT:    [[CONV36_US:%.*]] = trunc i32 [[SHR35_US]] to i8
; DEFAULT-NEXT:    [[ARRAYIDX38_US:%.*]] = getelementptr i8, ptr [[DST]], i64 [[INDVARS_IV]]
; DEFAULT-NEXT:    store i8 [[CONV36_US]], ptr [[ARRAYIDX38_US]], align 1
; DEFAULT-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], [[WIDE_TRIP_COUNT]]
; DEFAULT-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND10_FOR_COND_CLEANUP12_CRIT_EDGE_US]], label [[FOR_BODY13_US]], !llvm.loop [[LOOP4:![0-9]+]]
; DEFAULT:       for.cond10.for.cond.cleanup12_crit_edge.us:
; DEFAULT-NEXT:    ret void
;
; PRED-LABEL: define void @mc_chroma(
; PRED-SAME: ptr [[DST:%.*]], ptr [[SRC:%.*]], i32 [[MVY:%.*]], i64 [[WIDE_TRIP_COUNT:%.*]]) #[[ATTR0:[0-9]+]] {
; PRED-NEXT:  entry:
; PRED-NEXT:    [[SRC2:%.*]] = ptrtoint ptr [[SRC]] to i64
; PRED-NEXT:    [[DST1:%.*]] = ptrtoint ptr [[DST]] to i64
; PRED-NEXT:    [[TMP0:%.*]] = add i64 [[WIDE_TRIP_COUNT]], 1
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; PRED:       vector.memcheck:
; PRED-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 8
; PRED-NEXT:    [[TMP3:%.*]] = sub i64 [[DST1]], [[SRC2]]
; PRED-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP3]], [[TMP2]]
; PRED-NEXT:    br i1 [[DIFF_CHECK]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 8
; PRED-NEXT:    [[TMP6:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP7:%.*]] = mul i64 [[TMP6]], 8
; PRED-NEXT:    [[TMP8:%.*]] = sub i64 [[TMP7]], 1
; PRED-NEXT:    [[N_RND_UP:%.*]] = add i64 [[TMP0]], [[TMP8]]
; PRED-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_RND_UP]], [[TMP5]]
; PRED-NEXT:    [[N_VEC:%.*]] = sub i64 [[N_RND_UP]], [[N_MOD_VF]]
; PRED-NEXT:    [[TMP9:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP10:%.*]] = mul i64 [[TMP9]], 8
; PRED-NEXT:    [[TMP11:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP12:%.*]] = mul i64 [[TMP11]], 8
; PRED-NEXT:    [[TMP13:%.*]] = sub i64 [[TMP0]], [[TMP12]]
; PRED-NEXT:    [[TMP14:%.*]] = icmp ugt i64 [[TMP0]], [[TMP12]]
; PRED-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i64 [[TMP13]], i64 0
; PRED-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 8 x i1> @llvm.get.active.lane.mask.nxv8i1.i64(i64 0, i64 [[TMP0]])
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 8 x i32> poison, i32 [[MVY]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 8 x i32> [[BROADCAST_SPLATINSERT]], <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer
; PRED-NEXT:    [[TMP16:%.*]] = trunc <vscale x 8 x i32> [[BROADCAST_SPLAT]] to <vscale x 8 x i16>
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 8 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], [[VECTOR_PH]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[TMP17:%.*]] = add i64 [[INDEX]], 0
; PRED-NEXT:    [[TMP18:%.*]] = getelementptr i8, ptr [[SRC]], i64 [[TMP17]]
; PRED-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[TMP18]], i32 0
; PRED-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.masked.load.nxv8i8.p0(ptr [[TMP19]], i32 1, <vscale x 8 x i1> [[ACTIVE_LANE_MASK]], <vscale x 8 x i8> poison)
; PRED-NEXT:    [[TMP20:%.*]] = zext <vscale x 8 x i8> [[WIDE_MASKED_LOAD]] to <vscale x 8 x i16>
; PRED-NEXT:    [[TMP21:%.*]] = mul <vscale x 8 x i16> [[TMP20]], [[TMP16]]
; PRED-NEXT:    [[TMP22:%.*]] = zext <vscale x 8 x i8> [[WIDE_MASKED_LOAD]] to <vscale x 8 x i16>
; PRED-NEXT:    [[TMP23:%.*]] = or <vscale x 8 x i16> [[TMP21]], [[TMP22]]
; PRED-NEXT:    [[TMP24:%.*]] = lshr <vscale x 8 x i16> [[TMP23]], trunc (<vscale x 8 x i32> shufflevector (<vscale x 8 x i32> insertelement (<vscale x 8 x i32> poison, i32 1, i64 0), <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer) to <vscale x 8 x i16>)
; PRED-NEXT:    [[TMP25:%.*]] = trunc <vscale x 8 x i16> [[TMP24]] to <vscale x 8 x i8>
; PRED-NEXT:    [[TMP26:%.*]] = getelementptr i8, ptr [[DST]], i64 [[TMP17]]
; PRED-NEXT:    [[TMP27:%.*]] = getelementptr i8, ptr [[TMP26]], i32 0
; PRED-NEXT:    call void @llvm.masked.store.nxv8i8.p0(<vscale x 8 x i8> [[TMP25]], ptr [[TMP27]], i32 1, <vscale x 8 x i1> [[ACTIVE_LANE_MASK]])
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP10]]
; PRED-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 8 x i1> @llvm.get.active.lane.mask.nxv8i1.i64(i64 [[INDEX]], i64 [[TMP15]])
; PRED-NEXT:    [[TMP28:%.*]] = xor <vscale x 8 x i1> [[ACTIVE_LANE_MASK_NEXT]], shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP29:%.*]] = extractelement <vscale x 8 x i1> [[TMP28]], i32 0
; PRED-NEXT:    br i1 [[TMP29]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[FOR_COND10_FOR_COND_CLEANUP12_CRIT_EDGE_US:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_MEMCHECK]] ]
; PRED-NEXT:    br label [[FOR_BODY13_US:%.*]]
; PRED:       for.body13.us:
; PRED-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY13_US]] ]
; PRED-NEXT:    [[ARRAYIDX15_US:%.*]] = getelementptr i8, ptr [[SRC]], i64 [[INDVARS_IV]]
; PRED-NEXT:    [[TMP30:%.*]] = load i8, ptr [[ARRAYIDX15_US]], align 1
; PRED-NEXT:    [[CONV_US:%.*]] = zext i8 [[TMP30]] to i32
; PRED-NEXT:    [[MUL16_US:%.*]] = mul i32 [[CONV_US]], [[MVY]]
; PRED-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1
; PRED-NEXT:    [[CONV25_US:%.*]] = zext i8 [[TMP30]] to i32
; PRED-NEXT:    [[ADD34_US:%.*]] = or i32 [[MUL16_US]], [[CONV25_US]]
; PRED-NEXT:    [[SHR35_US:%.*]] = lshr i32 [[ADD34_US]], 1
; PRED-NEXT:    [[CONV36_US:%.*]] = trunc i32 [[SHR35_US]] to i8
; PRED-NEXT:    [[ARRAYIDX38_US:%.*]] = getelementptr i8, ptr [[DST]], i64 [[INDVARS_IV]]
; PRED-NEXT:    store i8 [[CONV36_US]], ptr [[ARRAYIDX38_US]], align 1
; PRED-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], [[WIDE_TRIP_COUNT]]
; PRED-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND10_FOR_COND_CLEANUP12_CRIT_EDGE_US]], label [[FOR_BODY13_US]], !llvm.loop [[LOOP3:![0-9]+]]
; PRED:       for.cond10.for.cond.cleanup12_crit_edge.us:
; PRED-NEXT:    ret void
;
entry:
  br label %for.body13.us

for.body13.us:                                    ; preds = %for.body13.us, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body13.us ]
  %arrayidx15.us = getelementptr i8, ptr %src, i64 %indvars.iv
  %0 = load i8, ptr %arrayidx15.us, align 1
  %conv.us = zext i8 %0 to i32
  %mul16.us = mul i32 %conv.us, %mvy
  %indvars.iv.next = add i64 %indvars.iv, 1
  %conv25.us = zext i8 %0 to i32
  %add34.us = or i32 %mul16.us, %conv25.us
  %shr35.us = lshr i32 %add34.us, 1
  %conv36.us = trunc i32 %shr35.us to i8
  %arrayidx38.us = getelementptr i8, ptr %dst, i64 %indvars.iv
  store i8 %conv36.us, ptr %arrayidx38.us, align 1
  %exitcond.not = icmp eq i64 %indvars.iv, %wide.trip.count
  br i1 %exitcond.not, label %for.cond10.for.cond.cleanup12_crit_edge.us, label %for.body13.us

for.cond10.for.cond.cleanup12_crit_edge.us:       ; preds = %for.body13.us
  ret void
}


define void @_ZN7FETools35get_interpolation_difference_matrixILi3EfEEvRK13FiniteElementIXT_EES4_R10FullMatrixIT0_E(i32 %0, i64 %wide.trip.count) #0 personality ptr null {
; DEFAULT-LABEL: define void @_ZN7FETools35get_interpolation_difference_matrixILi3EfEEvRK13FiniteElementIXT_EES4_R10FullMatrixIT0_E(
; DEFAULT-SAME: i32 [[TMP0:%.*]], i64 [[WIDE_TRIP_COUNT:%.*]]) #[[ATTR0]] personality ptr null {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    [[MUL_I19:%.*]] = add i32 [[TMP0]], 1
; DEFAULT-NEXT:    [[TMP1:%.*]] = add i64 [[WIDE_TRIP_COUNT]], 1
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP1]], 2
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_SCEVCHECK:%.*]]
; DEFAULT:       vector.scevcheck:
; DEFAULT-NEXT:    [[TMP2:%.*]] = sub i32 -1, [[TMP0]]
; DEFAULT-NEXT:    [[TMP3:%.*]] = icmp slt i32 [[MUL_I19]], 0
; DEFAULT-NEXT:    [[TMP4:%.*]] = select i1 [[TMP3]], i32 [[TMP2]], i32 [[MUL_I19]]
; DEFAULT-NEXT:    [[TMP5:%.*]] = trunc i64 [[WIDE_TRIP_COUNT]] to i32
; DEFAULT-NEXT:    [[MUL:%.*]] = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 [[TMP4]], i32 [[TMP5]])
; DEFAULT-NEXT:    [[MUL_RESULT:%.*]] = extractvalue { i32, i1 } [[MUL]], 0
; DEFAULT-NEXT:    [[MUL_OVERFLOW:%.*]] = extractvalue { i32, i1 } [[MUL]], 1
; DEFAULT-NEXT:    [[TMP6:%.*]] = sub i32 0, [[MUL_RESULT]]
; DEFAULT-NEXT:    [[TMP7:%.*]] = icmp ugt i32 [[TMP6]], 0
; DEFAULT-NEXT:    [[TMP8:%.*]] = select i1 [[TMP3]], i1 [[TMP7]], i1 false
; DEFAULT-NEXT:    [[TMP9:%.*]] = or i1 [[TMP8]], [[MUL_OVERFLOW]]
; DEFAULT-NEXT:    [[TMP10:%.*]] = icmp ugt i64 [[WIDE_TRIP_COUNT]], 4294967295
; DEFAULT-NEXT:    [[TMP11:%.*]] = icmp ne i32 [[MUL_I19]], 0
; DEFAULT-NEXT:    [[TMP12:%.*]] = and i1 [[TMP10]], [[TMP11]]
; DEFAULT-NEXT:    [[TMP13:%.*]] = or i1 [[TMP9]], [[TMP12]]
; DEFAULT-NEXT:    br i1 [[TMP13]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP1]], 2
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP1]], [[N_MOD_VF]]
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP14:%.*]] = trunc i64 [[INDEX]] to i32
; DEFAULT-NEXT:    [[TMP15:%.*]] = add i32 [[TMP14]], 0
; DEFAULT-NEXT:    [[TMP16:%.*]] = add i32 [[TMP14]], 1
; DEFAULT-NEXT:    [[TMP17:%.*]] = mul i32 [[MUL_I19]], [[TMP15]]
; DEFAULT-NEXT:    [[TMP18:%.*]] = mul i32 [[MUL_I19]], [[TMP16]]
; DEFAULT-NEXT:    [[TMP19:%.*]] = zext i32 [[TMP17]] to i64
; DEFAULT-NEXT:    [[TMP20:%.*]] = zext i32 [[TMP18]] to i64
; DEFAULT-NEXT:    [[TMP21:%.*]] = getelementptr float, ptr null, i64 [[TMP19]]
; DEFAULT-NEXT:    [[TMP22:%.*]] = getelementptr float, ptr null, i64 [[TMP20]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[TMP21]], align 4
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[TMP22]], align 4
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2
; DEFAULT-NEXT:    [[TMP23:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP23]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP1]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY:%.*]]
; DEFAULT:       for.cond.cleanup.loopexit:
; DEFAULT-NEXT:    ret void
; DEFAULT:       for.body:
; DEFAULT-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP24:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; DEFAULT-NEXT:    [[ADD_I:%.*]] = mul i32 [[MUL_I19]], [[TMP24]]
; DEFAULT-NEXT:    [[IDXPROM_I:%.*]] = zext i32 [[ADD_I]] to i64
; DEFAULT-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr float, ptr null, i64 [[IDXPROM_I]]
; DEFAULT-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX_I]], align 4
; DEFAULT-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1
; DEFAULT-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], [[WIDE_TRIP_COUNT]]
; DEFAULT-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
;
; PRED-LABEL: define void @_ZN7FETools35get_interpolation_difference_matrixILi3EfEEvRK13FiniteElementIXT_EES4_R10FullMatrixIT0_E(
; PRED-SAME: i32 [[TMP0:%.*]], i64 [[WIDE_TRIP_COUNT:%.*]]) #[[ATTR0]] personality ptr null {
; PRED-NEXT:  entry:
; PRED-NEXT:    [[MUL_I19:%.*]] = add i32 [[TMP0]], 1
; PRED-NEXT:    [[TMP1:%.*]] = add i64 [[WIDE_TRIP_COUNT]], 1
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_SCEVCHECK:%.*]]
; PRED:       vector.scevcheck:
; PRED-NEXT:    [[TMP2:%.*]] = sub i32 -1, [[TMP0]]
; PRED-NEXT:    [[TMP3:%.*]] = icmp slt i32 [[MUL_I19]], 0
; PRED-NEXT:    [[TMP4:%.*]] = select i1 [[TMP3]], i32 [[TMP2]], i32 [[MUL_I19]]
; PRED-NEXT:    [[TMP5:%.*]] = trunc i64 [[WIDE_TRIP_COUNT]] to i32
; PRED-NEXT:    [[MUL:%.*]] = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 [[TMP4]], i32 [[TMP5]])
; PRED-NEXT:    [[MUL_RESULT:%.*]] = extractvalue { i32, i1 } [[MUL]], 0
; PRED-NEXT:    [[MUL_OVERFLOW:%.*]] = extractvalue { i32, i1 } [[MUL]], 1
; PRED-NEXT:    [[TMP6:%.*]] = sub i32 0, [[MUL_RESULT]]
; PRED-NEXT:    [[TMP7:%.*]] = icmp ugt i32 [[TMP6]], 0
; PRED-NEXT:    [[TMP8:%.*]] = select i1 [[TMP3]], i1 [[TMP7]], i1 false
; PRED-NEXT:    [[TMP9:%.*]] = or i1 [[TMP8]], [[MUL_OVERFLOW]]
; PRED-NEXT:    [[TMP10:%.*]] = icmp ugt i64 [[WIDE_TRIP_COUNT]], 4294967295
; PRED-NEXT:    [[TMP11:%.*]] = icmp ne i32 [[MUL_I19]], 0
; PRED-NEXT:    [[TMP12:%.*]] = and i1 [[TMP10]], [[TMP11]]
; PRED-NEXT:    [[TMP13:%.*]] = or i1 [[TMP9]], [[TMP12]]
; PRED-NEXT:    br i1 [[TMP13]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[N_RND_UP:%.*]] = add i64 [[TMP1]], 1
; PRED-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_RND_UP]], 2
; PRED-NEXT:    [[N_VEC:%.*]] = sub i64 [[N_RND_UP]], [[N_MOD_VF]]
; PRED-NEXT:    [[TMP14:%.*]] = sub i64 [[TMP1]], 2
; PRED-NEXT:    [[TMP15:%.*]] = icmp ugt i64 [[TMP1]], 2
; PRED-NEXT:    [[TMP16:%.*]] = select i1 [[TMP15]], i64 [[TMP14]], i64 0
; PRED-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <2 x i1> @llvm.get.active.lane.mask.v2i1.i64(i64 0, i64 [[TMP1]])
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <2 x i32> poison, i32 [[MUL_I19]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <2 x i32> [[BROADCAST_SPLATINSERT]], <2 x i32> poison, <2 x i32> zeroinitializer
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE2:%.*]] ]
; PRED-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <2 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], [[VECTOR_PH]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], [[PRED_STORE_CONTINUE2]] ]
; PRED-NEXT:    [[VEC_IND:%.*]] = phi <2 x i32> [ <i32 0, i32 1>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[PRED_STORE_CONTINUE2]] ]
; PRED-NEXT:    [[TMP17:%.*]] = mul <2 x i32> [[BROADCAST_SPLAT]], [[VEC_IND]]
; PRED-NEXT:    [[TMP18:%.*]] = zext <2 x i32> [[TMP17]] to <2 x i64>
; PRED-NEXT:    [[TMP19:%.*]] = extractelement <2 x i1> [[ACTIVE_LANE_MASK]], i32 0
; PRED-NEXT:    br i1 [[TMP19]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; PRED:       pred.store.if:
; PRED-NEXT:    [[TMP20:%.*]] = extractelement <2 x i64> [[TMP18]], i32 0
; PRED-NEXT:    [[TMP21:%.*]] = getelementptr float, ptr null, i64 [[TMP20]]
; PRED-NEXT:    store float 0.000000e+00, ptr [[TMP21]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE]]
; PRED:       pred.store.continue:
; PRED-NEXT:    [[TMP22:%.*]] = extractelement <2 x i1> [[ACTIVE_LANE_MASK]], i32 1
; PRED-NEXT:    br i1 [[TMP22]], label [[PRED_STORE_IF1:%.*]], label [[PRED_STORE_CONTINUE2]]
; PRED:       pred.store.if1:
; PRED-NEXT:    [[TMP23:%.*]] = extractelement <2 x i64> [[TMP18]], i32 1
; PRED-NEXT:    [[TMP24:%.*]] = getelementptr float, ptr null, i64 [[TMP23]]
; PRED-NEXT:    store float 0.000000e+00, ptr [[TMP24]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE2]]
; PRED:       pred.store.continue2:
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 2
; PRED-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <2 x i1> @llvm.get.active.lane.mask.v2i1.i64(i64 [[INDEX]], i64 [[TMP16]])
; PRED-NEXT:    [[TMP25:%.*]] = xor <2 x i1> [[ACTIVE_LANE_MASK_NEXT]], <i1 true, i1 true>
; PRED-NEXT:    [[VEC_IND_NEXT]] = add <2 x i32> [[VEC_IND]], <i32 2, i32 2>
; PRED-NEXT:    [[TMP26:%.*]] = extractelement <2 x i1> [[TMP25]], i32 0
; PRED-NEXT:    br i1 [[TMP26]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; PRED-NEXT:    br label [[FOR_BODY:%.*]]
; PRED:       for.cond.cleanup.loopexit:
; PRED-NEXT:    ret void
; PRED:       for.body:
; PRED-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; PRED-NEXT:    [[TMP27:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; PRED-NEXT:    [[ADD_I:%.*]] = mul i32 [[MUL_I19]], [[TMP27]]
; PRED-NEXT:    [[IDXPROM_I:%.*]] = zext i32 [[ADD_I]] to i64
; PRED-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr float, ptr null, i64 [[IDXPROM_I]]
; PRED-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX_I]], align 4
; PRED-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1
; PRED-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], [[WIDE_TRIP_COUNT]]
; PRED-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]
;
entry:
  %mul.i19 = add i32 %0, 1
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  ret void

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %1 = trunc i64 %indvars.iv to i32
  %add.i = mul i32 %mul.i19, %1
  %idxprom.i = zext i32 %add.i to i64
  %arrayidx.i = getelementptr float, ptr null, i64 %idxprom.i
  store float 0.000000e+00, ptr %arrayidx.i, align 4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}


define fastcc i32 @tr_non_safe_moves_a_little_touchy(i32 %0, i64 %indvars.iv, ptr %g_board, i32 %1, ptr %countbits16) #0 {
; DEFAULT-LABEL: define fastcc i32 @tr_non_safe_moves_a_little_touchy(
; DEFAULT-SAME: i32 [[TMP0:%.*]], i64 [[INDVARS_IV:%.*]], ptr [[G_BOARD:%.*]], i32 [[TMP1:%.*]], ptr [[COUNTBITS16:%.*]]) #[[ATTR0]] {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    [[TMP2:%.*]] = add i64 [[INDVARS_IV]], 1
; DEFAULT-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP4:%.*]] = mul i64 [[TMP3]], 8
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP2]], [[TMP4]]
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 8
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP2]], [[TMP6]]
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP2]], [[N_MOD_VF]]
; DEFAULT-NEXT:    [[TMP7:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP8:%.*]] = mul i64 [[TMP7]], 8
; DEFAULT-NEXT:    [[TMP9:%.*]] = call i32 @llvm.vscale.i32()
; DEFAULT-NEXT:    [[TMP10:%.*]] = mul i32 [[TMP9]], 4
; DEFAULT-NEXT:    [[TMP11:%.*]] = sub i32 [[TMP10]], 1
; DEFAULT-NEXT:    [[VECTOR_RECUR_INIT:%.*]] = insertelement <vscale x 4 x i32> poison, i32 0, i32 [[TMP11]]
; DEFAULT-NEXT:    [[TMP12:%.*]] = call i32 @llvm.vscale.i32()
; DEFAULT-NEXT:    [[TMP13:%.*]] = mul i32 [[TMP12]], 4
; DEFAULT-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP13]], 1
; DEFAULT-NEXT:    [[VECTOR_RECUR_INIT1:%.*]] = insertelement <vscale x 4 x i32> poison, i32 0, i32 [[TMP14]]
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT6:%.*]] = insertelement <vscale x 4 x i32> poison, i32 [[TMP0]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT7:%.*]] = shufflevector <vscale x 4 x i32> [[BROADCAST_SPLATINSERT6]], <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT8:%.*]] = insertelement <vscale x 4 x i32> poison, i32 [[TMP1]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT9:%.*]] = shufflevector <vscale x 4 x i32> [[BROADCAST_SPLATINSERT8]], <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[VECTOR_RECUR:%.*]] = phi <vscale x 4 x i32> [ [[VECTOR_RECUR_INIT]], [[VECTOR_PH]] ], [ [[BROADCAST_SPLAT5:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[VECTOR_RECUR2:%.*]] = phi <vscale x 4 x i32> [ [[VECTOR_RECUR_INIT1]], [[VECTOR_PH]] ], [ [[TMP22:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 4 x i32> [ zeroinitializer, [[VECTOR_PH]] ], [ [[TMP59:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[VEC_PHI3:%.*]] = phi <vscale x 4 x i32> [ zeroinitializer, [[VECTOR_PH]] ], [ [[TMP60:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP15:%.*]] = add i64 [[INDVARS_IV]], 1
; DEFAULT-NEXT:    [[TMP16:%.*]] = add i64 [[INDVARS_IV]], 1
; DEFAULT-NEXT:    [[TMP17:%.*]] = getelementptr [2 x [32 x i32]], ptr [[G_BOARD]], i64 0, i64 0, i64 [[TMP15]]
; DEFAULT-NEXT:    [[TMP18:%.*]] = getelementptr [2 x [32 x i32]], ptr [[G_BOARD]], i64 0, i64 0, i64 [[TMP16]]
; DEFAULT-NEXT:    [[TMP19:%.*]] = load i32, ptr [[TMP17]], align 4
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 4 x i32> poison, i32 [[TMP19]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 4 x i32> [[BROADCAST_SPLATINSERT]], <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
; DEFAULT-NEXT:    [[TMP20:%.*]] = load i32, ptr [[TMP18]], align 4
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT4:%.*]] = insertelement <vscale x 4 x i32> poison, i32 [[TMP20]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT5]] = shufflevector <vscale x 4 x i32> [[BROADCAST_SPLATINSERT4]], <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
; DEFAULT-NEXT:    [[TMP21:%.*]] = call <vscale x 4 x i32> @llvm.experimental.vector.splice.nxv4i32(<vscale x 4 x i32> [[VECTOR_RECUR]], <vscale x 4 x i32> [[BROADCAST_SPLAT]], i32 -1)
; DEFAULT-NEXT:    [[TMP22]] = call <vscale x 4 x i32> @llvm.experimental.vector.splice.nxv4i32(<vscale x 4 x i32> [[BROADCAST_SPLAT]], <vscale x 4 x i32> [[BROADCAST_SPLAT5]], i32 -1)
; DEFAULT-NEXT:    [[TMP23:%.*]] = call <vscale x 4 x i32> @llvm.experimental.vector.splice.nxv4i32(<vscale x 4 x i32> [[VECTOR_RECUR2]], <vscale x 4 x i32> [[TMP21]], i32 -1)
; DEFAULT-NEXT:    [[TMP24:%.*]] = call <vscale x 4 x i32> @llvm.experimental.vector.splice.nxv4i32(<vscale x 4 x i32> [[TMP21]], <vscale x 4 x i32> [[TMP22]], i32 -1)
; DEFAULT-NEXT:    [[TMP25:%.*]] = or <vscale x 4 x i32> [[TMP23]], [[BROADCAST_SPLAT7]]
; DEFAULT-NEXT:    [[TMP26:%.*]] = or <vscale x 4 x i32> [[TMP24]], [[BROADCAST_SPLAT7]]
; DEFAULT-NEXT:    [[TMP27:%.*]] = lshr <vscale x 4 x i32> [[BROADCAST_SPLAT7]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP28:%.*]] = lshr <vscale x 4 x i32> [[BROADCAST_SPLAT7]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP29:%.*]] = shl <vscale x 4 x i32> [[TMP25]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP30:%.*]] = shl <vscale x 4 x i32> [[TMP26]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP31:%.*]] = or <vscale x 4 x i32> [[TMP29]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 2, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP32:%.*]] = or <vscale x 4 x i32> [[TMP30]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 2, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP33:%.*]] = shl <vscale x 4 x i32> [[BROADCAST_SPLAT7]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP34:%.*]] = shl <vscale x 4 x i32> [[BROADCAST_SPLAT7]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP35:%.*]] = or <vscale x 4 x i32> [[TMP27]], [[TMP33]]
; DEFAULT-NEXT:    [[TMP36:%.*]] = or <vscale x 4 x i32> [[TMP28]], [[TMP34]]
; DEFAULT-NEXT:    [[TMP37:%.*]] = or <vscale x 4 x i32> [[TMP35]], [[TMP31]]
; DEFAULT-NEXT:    [[TMP38:%.*]] = or <vscale x 4 x i32> [[TMP36]], [[TMP32]]
; DEFAULT-NEXT:    [[TMP39:%.*]] = or <vscale x 4 x i32> [[TMP37]], [[BROADCAST_SPLAT7]]
; DEFAULT-NEXT:    [[TMP40:%.*]] = or <vscale x 4 x i32> [[TMP38]], [[BROADCAST_SPLAT7]]
; DEFAULT-NEXT:    [[TMP41:%.*]] = or <vscale x 4 x i32> [[BROADCAST_SPLAT9]], [[BROADCAST_SPLAT7]]
; DEFAULT-NEXT:    [[TMP42:%.*]] = or <vscale x 4 x i32> [[BROADCAST_SPLAT9]], [[BROADCAST_SPLAT7]]
; DEFAULT-NEXT:    [[TMP43:%.*]] = and <vscale x 4 x i32> [[TMP41]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP44:%.*]] = and <vscale x 4 x i32> [[TMP42]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP45:%.*]] = xor <vscale x 4 x i32> [[TMP43]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP46:%.*]] = xor <vscale x 4 x i32> [[TMP44]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP47:%.*]] = zext <vscale x 4 x i32> [[TMP45]] to <vscale x 4 x i64>
; DEFAULT-NEXT:    [[TMP48:%.*]] = zext <vscale x 4 x i32> [[TMP46]] to <vscale x 4 x i64>
; DEFAULT-NEXT:    [[TMP49:%.*]] = getelementptr [65536 x i32], ptr [[COUNTBITS16]], i64 0, <vscale x 4 x i64> [[TMP47]]
; DEFAULT-NEXT:    [[TMP50:%.*]] = getelementptr [65536 x i32], ptr [[COUNTBITS16]], i64 0, <vscale x 4 x i64> [[TMP48]]
; DEFAULT-NEXT:    [[WIDE_MASKED_GATHER:%.*]] = call <vscale x 4 x i32> @llvm.masked.gather.nxv4i32.nxv4p0(<vscale x 4 x ptr> [[TMP49]], i32 4, <vscale x 4 x i1> shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i64 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer), <vscale x 4 x i32> poison)
; DEFAULT-NEXT:    [[WIDE_MASKED_GATHER10:%.*]] = call <vscale x 4 x i32> @llvm.masked.gather.nxv4i32.nxv4p0(<vscale x 4 x ptr> [[TMP50]], i32 4, <vscale x 4 x i1> shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i64 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer), <vscale x 4 x i32> poison)
; DEFAULT-NEXT:    [[TMP51:%.*]] = lshr <vscale x 4 x i32> [[TMP39]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP52:%.*]] = lshr <vscale x 4 x i32> [[TMP40]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; DEFAULT-NEXT:    [[TMP53:%.*]] = zext <vscale x 4 x i32> [[TMP51]] to <vscale x 4 x i64>
; DEFAULT-NEXT:    [[TMP54:%.*]] = zext <vscale x 4 x i32> [[TMP52]] to <vscale x 4 x i64>
; DEFAULT-NEXT:    [[TMP55:%.*]] = getelementptr [65536 x i32], ptr [[COUNTBITS16]], i64 0, <vscale x 4 x i64> [[TMP53]]
; DEFAULT-NEXT:    [[TMP56:%.*]] = getelementptr [65536 x i32], ptr [[COUNTBITS16]], i64 0, <vscale x 4 x i64> [[TMP54]]
; DEFAULT-NEXT:    [[WIDE_MASKED_GATHER11:%.*]] = call <vscale x 4 x i32> @llvm.masked.gather.nxv4i32.nxv4p0(<vscale x 4 x ptr> [[TMP55]], i32 4, <vscale x 4 x i1> shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i64 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer), <vscale x 4 x i32> poison)
; DEFAULT-NEXT:    [[WIDE_MASKED_GATHER12:%.*]] = call <vscale x 4 x i32> @llvm.masked.gather.nxv4i32.nxv4p0(<vscale x 4 x ptr> [[TMP56]], i32 4, <vscale x 4 x i1> shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i64 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer), <vscale x 4 x i32> poison)
; DEFAULT-NEXT:    [[TMP57:%.*]] = or <vscale x 4 x i32> [[WIDE_MASKED_GATHER]], [[VEC_PHI]]
; DEFAULT-NEXT:    [[TMP58:%.*]] = or <vscale x 4 x i32> [[WIDE_MASKED_GATHER10]], [[VEC_PHI3]]
; DEFAULT-NEXT:    [[TMP59]] = or <vscale x 4 x i32> [[TMP57]], [[WIDE_MASKED_GATHER11]]
; DEFAULT-NEXT:    [[TMP60]] = or <vscale x 4 x i32> [[TMP58]], [[WIDE_MASKED_GATHER12]]
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP8]]
; DEFAULT-NEXT:    [[TMP61:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP61]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[BIN_RDX:%.*]] = or <vscale x 4 x i32> [[TMP60]], [[TMP59]]
; DEFAULT-NEXT:    [[TMP62:%.*]] = call i32 @llvm.vector.reduce.or.nxv4i32(<vscale x 4 x i32> [[BIN_RDX]])
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP2]], [[N_VEC]]
; DEFAULT-NEXT:    [[TMP63:%.*]] = call i32 @llvm.vscale.i32()
; DEFAULT-NEXT:    [[TMP64:%.*]] = mul i32 [[TMP63]], 4
; DEFAULT-NEXT:    [[TMP65:%.*]] = sub i32 [[TMP64]], 1
; DEFAULT-NEXT:    [[VECTOR_RECUR_EXTRACT:%.*]] = extractelement <vscale x 4 x i32> [[BROADCAST_SPLAT5]], i32 [[TMP65]]
; DEFAULT-NEXT:    [[TMP66:%.*]] = call i32 @llvm.vscale.i32()
; DEFAULT-NEXT:    [[TMP67:%.*]] = mul i32 [[TMP66]], 4
; DEFAULT-NEXT:    [[TMP68:%.*]] = sub i32 [[TMP67]], 1
; DEFAULT-NEXT:    [[VECTOR_RECUR_EXTRACT13:%.*]] = extractelement <vscale x 4 x i32> [[TMP22]], i32 [[TMP68]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_END:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[SCALAR_RECUR_INIT14:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[VECTOR_RECUR_EXTRACT13]], [[MIDDLE_BLOCK]] ]
; DEFAULT-NEXT:    [[SCALAR_RECUR_INIT:%.*]] = phi i32 [ 0, [[ENTRY]] ], [ [[VECTOR_RECUR_EXTRACT]], [[MIDDLE_BLOCK]] ]
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ]
; DEFAULT-NEXT:    [[BC_MERGE_RDX:%.*]] = phi i32 [ 0, [[ENTRY]] ], [ [[TMP62]], [[MIDDLE_BLOCK]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY:%.*]]
; DEFAULT:       for.body:
; DEFAULT-NEXT:    [[SCALAR_RECUR:%.*]] = phi i32 [ [[SCALAR_RECUR_INIT]], [[SCALAR_PH]] ], [ [[TMP70:%.*]], [[FOR_BODY]] ]
; DEFAULT-NEXT:    [[SCALAR_RECUR15:%.*]] = phi i32 [ [[SCALAR_RECUR_INIT14]], [[SCALAR_PH]] ], [ [[SCALAR_RECUR]], [[FOR_BODY]] ]
; DEFAULT-NEXT:    [[INDVARS_IV2:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DEFAULT-NEXT:    [[COUNT_050:%.*]] = phi i32 [ [[BC_MERGE_RDX]], [[SCALAR_PH]] ], [ [[ADD29:%.*]], [[FOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP69:%.*]] = add i64 [[INDVARS_IV]], 1
; DEFAULT-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr [2 x [32 x i32]], ptr [[G_BOARD]], i64 0, i64 0, i64 [[TMP69]]
; DEFAULT-NEXT:    [[TMP70]] = load i32, ptr [[ARRAYIDX8]], align 4
; DEFAULT-NEXT:    [[OR3:%.*]] = or i32 [[SCALAR_RECUR15]], [[TMP0]]
; DEFAULT-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV2]], 1
; DEFAULT-NEXT:    [[SHR:%.*]] = lshr i32 [[TMP0]], 1
; DEFAULT-NEXT:    [[TMP71:%.*]] = shl i32 [[OR3]], 1
; DEFAULT-NEXT:    [[TMP72:%.*]] = or i32 [[TMP71]], 2
; DEFAULT-NEXT:    [[SHL19:%.*]] = shl i32 [[TMP0]], 1
; DEFAULT-NEXT:    [[TMP73:%.*]] = or i32 [[SHR]], [[SHL19]]
; DEFAULT-NEXT:    [[TMP74:%.*]] = or i32 [[TMP73]], [[TMP72]]
; DEFAULT-NEXT:    [[TMP75:%.*]] = or i32 [[TMP74]], [[TMP0]]
; DEFAULT-NEXT:    [[OR20:%.*]] = or i32 [[TMP1]], [[TMP0]]
; DEFAULT-NEXT:    [[NOT:%.*]] = and i32 [[OR20]], 1
; DEFAULT-NEXT:    [[AND:%.*]] = xor i32 [[NOT]], 1
; DEFAULT-NEXT:    [[IDXPROM21:%.*]] = zext i32 [[AND]] to i64
; DEFAULT-NEXT:    [[ARRAYIDX22:%.*]] = getelementptr [65536 x i32], ptr [[COUNTBITS16]], i64 0, i64 [[IDXPROM21]]
; DEFAULT-NEXT:    [[TMP76:%.*]] = load i32, ptr [[ARRAYIDX22]], align 4
; DEFAULT-NEXT:    [[SHR24:%.*]] = lshr i32 [[TMP75]], 1
; DEFAULT-NEXT:    [[IDXPROM26:%.*]] = zext i32 [[SHR24]] to i64
; DEFAULT-NEXT:    [[ARRAYIDX27:%.*]] = getelementptr [65536 x i32], ptr [[COUNTBITS16]], i64 0, i64 [[IDXPROM26]]
; DEFAULT-NEXT:    [[TMP77:%.*]] = load i32, ptr [[ARRAYIDX27]], align 4
; DEFAULT-NEXT:    [[ADD28:%.*]] = or i32 [[TMP76]], [[COUNT_050]]
; DEFAULT-NEXT:    [[ADD29]] = or i32 [[ADD28]], [[TMP77]]
; DEFAULT-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV2]], [[INDVARS_IV]]
; DEFAULT-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]
; DEFAULT:       for.end:
; DEFAULT-NEXT:    [[ADD29_LCSSA:%.*]] = phi i32 [ [[ADD29]], [[FOR_BODY]] ], [ [[TMP62]], [[MIDDLE_BLOCK]] ]
; DEFAULT-NEXT:    ret i32 [[ADD29_LCSSA]]
;
; PRED-LABEL: define fastcc i32 @tr_non_safe_moves_a_little_touchy(
; PRED-SAME: i32 [[TMP0:%.*]], i64 [[INDVARS_IV:%.*]], ptr [[G_BOARD:%.*]], i32 [[TMP1:%.*]], ptr [[COUNTBITS16:%.*]]) #[[ATTR0]] {
; PRED-NEXT:  entry:
; PRED-NEXT:    [[TMP2:%.*]] = add i64 [[INDVARS_IV]], 1
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP4:%.*]] = mul i64 [[TMP3]], 4
; PRED-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 4
; PRED-NEXT:    [[TMP7:%.*]] = sub i64 [[TMP6]], 1
; PRED-NEXT:    [[N_RND_UP:%.*]] = add i64 [[TMP2]], [[TMP7]]
; PRED-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_RND_UP]], [[TMP4]]
; PRED-NEXT:    [[N_VEC:%.*]] = sub i64 [[N_RND_UP]], [[N_MOD_VF]]
; PRED-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP8]], 4
; PRED-NEXT:    [[TMP10:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP11:%.*]] = mul i64 [[TMP10]], 4
; PRED-NEXT:    [[TMP12:%.*]] = sub i64 [[TMP2]], [[TMP11]]
; PRED-NEXT:    [[TMP13:%.*]] = icmp ugt i64 [[TMP2]], [[TMP11]]
; PRED-NEXT:    [[TMP14:%.*]] = select i1 [[TMP13]], i64 [[TMP12]], i64 0
; PRED-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 0, i64 [[TMP2]])
; PRED-NEXT:    [[TMP15:%.*]] = call i32 @llvm.vscale.i32()
; PRED-NEXT:    [[TMP16:%.*]] = mul i32 [[TMP15]], 4
; PRED-NEXT:    [[TMP17:%.*]] = sub i32 [[TMP16]], 1
; PRED-NEXT:    [[VECTOR_RECUR_INIT:%.*]] = insertelement <vscale x 4 x i32> poison, i32 0, i32 [[TMP17]]
; PRED-NEXT:    [[TMP18:%.*]] = call i32 @llvm.vscale.i32()
; PRED-NEXT:    [[TMP19:%.*]] = mul i32 [[TMP18]], 4
; PRED-NEXT:    [[TMP20:%.*]] = sub i32 [[TMP19]], 1
; PRED-NEXT:    [[VECTOR_RECUR_INIT1:%.*]] = insertelement <vscale x 4 x i32> poison, i32 0, i32 [[TMP20]]
; PRED-NEXT:    [[BROADCAST_SPLATINSERT3:%.*]] = insertelement <vscale x 4 x i32> poison, i32 [[TMP0]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT4:%.*]] = shufflevector <vscale x 4 x i32> [[BROADCAST_SPLATINSERT3]], <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
; PRED-NEXT:    [[BROADCAST_SPLATINSERT5:%.*]] = insertelement <vscale x 4 x i32> poison, i32 [[TMP1]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT6:%.*]] = shufflevector <vscale x 4 x i32> [[BROADCAST_SPLATINSERT5]], <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], [[VECTOR_PH]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[VECTOR_RECUR:%.*]] = phi <vscale x 4 x i32> [ [[VECTOR_RECUR_INIT]], [[VECTOR_PH]] ], [ [[BROADCAST_SPLAT:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[VECTOR_RECUR2:%.*]] = phi <vscale x 4 x i32> [ [[VECTOR_RECUR_INIT1]], [[VECTOR_PH]] ], [ [[TMP24:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 4 x i32> [ zeroinitializer, [[VECTOR_PH]] ], [ [[TMP44:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[TMP21:%.*]] = add i64 [[INDVARS_IV]], 1
; PRED-NEXT:    [[TMP22:%.*]] = getelementptr [2 x [32 x i32]], ptr [[G_BOARD]], i64 0, i64 0, i64 [[TMP21]]
; PRED-NEXT:    [[TMP23:%.*]] = load i32, ptr [[TMP22]], align 4
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 4 x i32> poison, i32 [[TMP23]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT]] = shufflevector <vscale x 4 x i32> [[BROADCAST_SPLATINSERT]], <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
; PRED-NEXT:    [[TMP24]] = call <vscale x 4 x i32> @llvm.experimental.vector.splice.nxv4i32(<vscale x 4 x i32> [[VECTOR_RECUR]], <vscale x 4 x i32> [[BROADCAST_SPLAT]], i32 -1)
; PRED-NEXT:    [[TMP25:%.*]] = call <vscale x 4 x i32> @llvm.experimental.vector.splice.nxv4i32(<vscale x 4 x i32> [[VECTOR_RECUR2]], <vscale x 4 x i32> [[TMP24]], i32 -1)
; PRED-NEXT:    [[TMP26:%.*]] = or <vscale x 4 x i32> [[TMP25]], [[BROADCAST_SPLAT4]]
; PRED-NEXT:    [[TMP27:%.*]] = lshr <vscale x 4 x i32> [[BROADCAST_SPLAT4]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP28:%.*]] = shl <vscale x 4 x i32> [[TMP26]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP29:%.*]] = or <vscale x 4 x i32> [[TMP28]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 2, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP30:%.*]] = shl <vscale x 4 x i32> [[BROADCAST_SPLAT4]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP31:%.*]] = or <vscale x 4 x i32> [[TMP27]], [[TMP30]]
; PRED-NEXT:    [[TMP32:%.*]] = or <vscale x 4 x i32> [[TMP31]], [[TMP29]]
; PRED-NEXT:    [[TMP33:%.*]] = or <vscale x 4 x i32> [[TMP32]], [[BROADCAST_SPLAT4]]
; PRED-NEXT:    [[TMP34:%.*]] = or <vscale x 4 x i32> [[BROADCAST_SPLAT6]], [[BROADCAST_SPLAT4]]
; PRED-NEXT:    [[TMP35:%.*]] = and <vscale x 4 x i32> [[TMP34]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP36:%.*]] = xor <vscale x 4 x i32> [[TMP35]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP37:%.*]] = zext <vscale x 4 x i32> [[TMP36]] to <vscale x 4 x i64>
; PRED-NEXT:    [[TMP38:%.*]] = getelementptr [65536 x i32], ptr [[COUNTBITS16]], i64 0, <vscale x 4 x i64> [[TMP37]]
; PRED-NEXT:    [[WIDE_MASKED_GATHER:%.*]] = call <vscale x 4 x i32> @llvm.masked.gather.nxv4i32.nxv4p0(<vscale x 4 x ptr> [[TMP38]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK]], <vscale x 4 x i32> poison)
; PRED-NEXT:    [[TMP39:%.*]] = lshr <vscale x 4 x i32> [[TMP33]], shufflevector (<vscale x 4 x i32> insertelement (<vscale x 4 x i32> poison, i32 1, i64 0), <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP40:%.*]] = zext <vscale x 4 x i32> [[TMP39]] to <vscale x 4 x i64>
; PRED-NEXT:    [[TMP41:%.*]] = getelementptr [65536 x i32], ptr [[COUNTBITS16]], i64 0, <vscale x 4 x i64> [[TMP40]]
; PRED-NEXT:    [[WIDE_MASKED_GATHER7:%.*]] = call <vscale x 4 x i32> @llvm.masked.gather.nxv4i32.nxv4p0(<vscale x 4 x ptr> [[TMP41]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK]], <vscale x 4 x i32> poison)
; PRED-NEXT:    [[TMP42:%.*]] = or <vscale x 4 x i32> [[WIDE_MASKED_GATHER]], [[VEC_PHI]]
; PRED-NEXT:    [[TMP43:%.*]] = or <vscale x 4 x i32> [[TMP42]], [[WIDE_MASKED_GATHER7]]
; PRED-NEXT:    [[TMP44]] = select <vscale x 4 x i1> [[ACTIVE_LANE_MASK]], <vscale x 4 x i32> [[TMP43]], <vscale x 4 x i32> [[VEC_PHI]]
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP9]]
; PRED-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[INDEX]], i64 [[TMP14]])
; PRED-NEXT:    [[TMP45:%.*]] = xor <vscale x 4 x i1> [[ACTIVE_LANE_MASK_NEXT]], shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i64 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP46:%.*]] = extractelement <vscale x 4 x i1> [[TMP45]], i32 0
; PRED-NEXT:    br i1 [[TMP46]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    [[TMP47:%.*]] = call i32 @llvm.vector.reduce.or.nxv4i32(<vscale x 4 x i32> [[TMP44]])
; PRED-NEXT:    [[TMP48:%.*]] = call i32 @llvm.vscale.i32()
; PRED-NEXT:    [[TMP49:%.*]] = mul i32 [[TMP48]], 4
; PRED-NEXT:    [[TMP50:%.*]] = sub i32 [[TMP49]], 1
; PRED-NEXT:    [[VECTOR_RECUR_EXTRACT:%.*]] = extractelement <vscale x 4 x i32> [[BROADCAST_SPLAT]], i32 [[TMP50]]
; PRED-NEXT:    [[TMP51:%.*]] = call i32 @llvm.vscale.i32()
; PRED-NEXT:    [[TMP52:%.*]] = mul i32 [[TMP51]], 4
; PRED-NEXT:    [[TMP53:%.*]] = sub i32 [[TMP52]], 1
; PRED-NEXT:    [[VECTOR_RECUR_EXTRACT8:%.*]] = extractelement <vscale x 4 x i32> [[TMP24]], i32 [[TMP53]]
; PRED-NEXT:    br i1 true, label [[FOR_END:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[SCALAR_RECUR_INIT9:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[VECTOR_RECUR_EXTRACT8]], [[MIDDLE_BLOCK]] ]
; PRED-NEXT:    [[SCALAR_RECUR_INIT:%.*]] = phi i32 [ 0, [[ENTRY]] ], [ [[VECTOR_RECUR_EXTRACT]], [[MIDDLE_BLOCK]] ]
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ]
; PRED-NEXT:    [[BC_MERGE_RDX:%.*]] = phi i32 [ 0, [[ENTRY]] ], [ [[TMP47]], [[MIDDLE_BLOCK]] ]
; PRED-NEXT:    br label [[FOR_BODY:%.*]]
; PRED:       for.body:
; PRED-NEXT:    [[SCALAR_RECUR:%.*]] = phi i32 [ [[SCALAR_RECUR_INIT]], [[SCALAR_PH]] ], [ [[TMP55:%.*]], [[FOR_BODY]] ]
; PRED-NEXT:    [[SCALAR_RECUR10:%.*]] = phi i32 [ [[SCALAR_RECUR_INIT9]], [[SCALAR_PH]] ], [ [[SCALAR_RECUR]], [[FOR_BODY]] ]
; PRED-NEXT:    [[INDVARS_IV2:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; PRED-NEXT:    [[COUNT_050:%.*]] = phi i32 [ [[BC_MERGE_RDX]], [[SCALAR_PH]] ], [ [[ADD29:%.*]], [[FOR_BODY]] ]
; PRED-NEXT:    [[TMP54:%.*]] = add i64 [[INDVARS_IV]], 1
; PRED-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr [2 x [32 x i32]], ptr [[G_BOARD]], i64 0, i64 0, i64 [[TMP54]]
; PRED-NEXT:    [[TMP55]] = load i32, ptr [[ARRAYIDX8]], align 4
; PRED-NEXT:    [[OR3:%.*]] = or i32 [[SCALAR_RECUR10]], [[TMP0]]
; PRED-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV2]], 1
; PRED-NEXT:    [[SHR:%.*]] = lshr i32 [[TMP0]], 1
; PRED-NEXT:    [[TMP56:%.*]] = shl i32 [[OR3]], 1
; PRED-NEXT:    [[TMP57:%.*]] = or i32 [[TMP56]], 2
; PRED-NEXT:    [[SHL19:%.*]] = shl i32 [[TMP0]], 1
; PRED-NEXT:    [[TMP58:%.*]] = or i32 [[SHR]], [[SHL19]]
; PRED-NEXT:    [[TMP59:%.*]] = or i32 [[TMP58]], [[TMP57]]
; PRED-NEXT:    [[TMP60:%.*]] = or i32 [[TMP59]], [[TMP0]]
; PRED-NEXT:    [[OR20:%.*]] = or i32 [[TMP1]], [[TMP0]]
; PRED-NEXT:    [[NOT:%.*]] = and i32 [[OR20]], 1
; PRED-NEXT:    [[AND:%.*]] = xor i32 [[NOT]], 1
; PRED-NEXT:    [[IDXPROM21:%.*]] = zext i32 [[AND]] to i64
; PRED-NEXT:    [[ARRAYIDX22:%.*]] = getelementptr [65536 x i32], ptr [[COUNTBITS16]], i64 0, i64 [[IDXPROM21]]
; PRED-NEXT:    [[TMP61:%.*]] = load i32, ptr [[ARRAYIDX22]], align 4
; PRED-NEXT:    [[SHR24:%.*]] = lshr i32 [[TMP60]], 1
; PRED-NEXT:    [[IDXPROM26:%.*]] = zext i32 [[SHR24]] to i64
; PRED-NEXT:    [[ARRAYIDX27:%.*]] = getelementptr [65536 x i32], ptr [[COUNTBITS16]], i64 0, i64 [[IDXPROM26]]
; PRED-NEXT:    [[TMP62:%.*]] = load i32, ptr [[ARRAYIDX27]], align 4
; PRED-NEXT:    [[ADD28:%.*]] = or i32 [[TMP61]], [[COUNT_050]]
; PRED-NEXT:    [[ADD29]] = or i32 [[ADD28]], [[TMP62]]
; PRED-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV2]], [[INDVARS_IV]]
; PRED-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]
; PRED:       for.end:
; PRED-NEXT:    [[ADD29_LCSSA:%.*]] = phi i32 [ [[ADD29]], [[FOR_BODY]] ], [ [[TMP47]], [[MIDDLE_BLOCK]] ]
; PRED-NEXT:    ret i32 [[ADD29_LCSSA]]
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %2 = phi i32 [ 0, %entry ], [ %5, %for.body ]
  %3 = phi i32 [ 0, %entry ], [ %2, %for.body ]
  %indvars.iv2 = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %count.050 = phi i32 [ 0, %entry ], [ %add29, %for.body ]
  %4 = add i64 %indvars.iv, 1
  %arrayidx8 = getelementptr [2 x [32 x i32]], ptr %g_board, i64 0, i64 0, i64 %4
  %5 = load i32, ptr %arrayidx8, align 4
  %or3 = or i32 %3, %0
  %indvars.iv.next = add i64 %indvars.iv2, 1
  %shr = lshr i32 %0, 1
  %6 = shl i32 %or3, 1
  %7 = or i32 %6, 2
  %shl19 = shl i32 %0, 1
  %8 = or i32 %shr, %shl19
  %9 = or i32 %8, %7
  %10 = or i32 %9, %0
  %or20 = or i32 %1, %0
  %not = and i32 %or20, 1
  %and = xor i32 %not, 1
  %idxprom21 = zext i32 %and to i64
  %arrayidx22 = getelementptr [65536 x i32], ptr %countbits16, i64 0, i64 %idxprom21
  %11 = load i32, ptr %arrayidx22, align 4
  %shr24 = lshr i32 %10, 1
  %idxprom26 = zext i32 %shr24 to i64
  %arrayidx27 = getelementptr [65536 x i32], ptr %countbits16, i64 0, i64 %idxprom26
  %12 = load i32, ptr %arrayidx27, align 4
  %add28 = or i32 %11, %count.050
  %add29 = or i32 %add28, %12
  %exitcond.not = icmp eq i64 %indvars.iv2, %indvars.iv
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret i32 %add29
}

define void @_ZN7FETools37lexicographic_to_hierarchic_numberingILi3EEEvRK4FE_QIXT_EERNSt3__16vectorIjNS5_9allocatorIjEEEE(i32 %0, ptr %1, i64 %conv.1) #0 {
; DEFAULT-LABEL: define void @_ZN7FETools37lexicographic_to_hierarchic_numberingILi3EEEvRK4FE_QIXT_EERNSt3__16vectorIjNS5_9allocatorIjEEEE(
; DEFAULT-SAME: i32 [[TMP0:%.*]], ptr [[TMP1:%.*]], i64 [[CONV_1:%.*]]) #[[ATTR0]] {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    [[MUL:%.*]] = mul i32 [[TMP0]], [[TMP0]]
; DEFAULT-NEXT:    [[TMP2:%.*]] = add i64 [[CONV_1]], 1
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP2]], 2
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_SCEVCHECK:%.*]]
; DEFAULT:       vector.scevcheck:
; DEFAULT-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP0]], [[TMP0]]
; DEFAULT-NEXT:    [[TMP4:%.*]] = sub i32 0, [[TMP3]]
; DEFAULT-NEXT:    [[TMP5:%.*]] = icmp slt i32 [[MUL]], 0
; DEFAULT-NEXT:    [[TMP6:%.*]] = select i1 [[TMP5]], i32 [[TMP4]], i32 [[MUL]]
; DEFAULT-NEXT:    [[TMP7:%.*]] = trunc i64 [[CONV_1]] to i32
; DEFAULT-NEXT:    [[MUL1:%.*]] = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 [[TMP6]], i32 [[TMP7]])
; DEFAULT-NEXT:    [[MUL_RESULT:%.*]] = extractvalue { i32, i1 } [[MUL1]], 0
; DEFAULT-NEXT:    [[MUL_OVERFLOW:%.*]] = extractvalue { i32, i1 } [[MUL1]], 1
; DEFAULT-NEXT:    [[TMP8:%.*]] = sub i32 0, [[MUL_RESULT]]
; DEFAULT-NEXT:    [[TMP9:%.*]] = icmp ugt i32 [[TMP8]], 0
; DEFAULT-NEXT:    [[TMP10:%.*]] = select i1 [[TMP5]], i1 [[TMP9]], i1 false
; DEFAULT-NEXT:    [[TMP11:%.*]] = or i1 [[TMP10]], [[MUL_OVERFLOW]]
; DEFAULT-NEXT:    [[TMP12:%.*]] = icmp ugt i64 [[CONV_1]], 4294967295
; DEFAULT-NEXT:    [[TMP13:%.*]] = icmp ne i32 [[MUL]], 0
; DEFAULT-NEXT:    [[TMP14:%.*]] = and i1 [[TMP12]], [[TMP13]]
; DEFAULT-NEXT:    [[TMP15:%.*]] = or i1 [[TMP11]], [[TMP14]]
; DEFAULT-NEXT:    br i1 [[TMP15]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP2]], 2
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP2]], [[N_MOD_VF]]
; DEFAULT-NEXT:    [[IND_END:%.*]] = trunc i64 [[N_VEC]] to i32
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[OFFSET_IDX:%.*]] = trunc i64 [[INDEX]] to i32
; DEFAULT-NEXT:    [[TMP16:%.*]] = add i32 [[OFFSET_IDX]], 0
; DEFAULT-NEXT:    [[TMP17:%.*]] = add i32 [[OFFSET_IDX]], 1
; DEFAULT-NEXT:    [[TMP18:%.*]] = trunc i64 [[INDEX]] to i32
; DEFAULT-NEXT:    [[TMP19:%.*]] = add i32 [[TMP18]], 0
; DEFAULT-NEXT:    [[TMP20:%.*]] = add i32 [[TMP18]], 1
; DEFAULT-NEXT:    [[TMP21:%.*]] = mul i32 [[MUL]], [[TMP19]]
; DEFAULT-NEXT:    [[TMP22:%.*]] = mul i32 [[MUL]], [[TMP20]]
; DEFAULT-NEXT:    [[TMP23:%.*]] = zext i32 [[TMP21]] to i64
; DEFAULT-NEXT:    [[TMP24:%.*]] = zext i32 [[TMP22]] to i64
; DEFAULT-NEXT:    [[TMP25:%.*]] = getelementptr i32, ptr [[TMP1]], i64 [[TMP23]]
; DEFAULT-NEXT:    [[TMP26:%.*]] = getelementptr i32, ptr [[TMP1]], i64 [[TMP24]]
; DEFAULT-NEXT:    store i32 [[TMP16]], ptr [[TMP25]], align 4
; DEFAULT-NEXT:    store i32 [[TMP17]], ptr [[TMP26]], align 4
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2
; DEFAULT-NEXT:    [[TMP27:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP27]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP9:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP2]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[SW_EPILOG61_US_4:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; DEFAULT-NEXT:    [[BC_RESUME_VAL2:%.*]] = phi i32 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY65_US_3:%.*]]
; DEFAULT:       for.body65.us.3:
; DEFAULT-NEXT:    [[INDVARS_IV_3:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT_3:%.*]], [[FOR_BODY65_US_3]] ]
; DEFAULT-NEXT:    [[INDEX32_0284_US_3:%.*]] = phi i32 [ [[BC_RESUME_VAL2]], [[SCALAR_PH]] ], [ [[INC68_US_3:%.*]], [[FOR_BODY65_US_3]] ]
; DEFAULT-NEXT:    [[TMP28:%.*]] = trunc i64 [[INDVARS_IV_3]] to i32
; DEFAULT-NEXT:    [[MUL66_US_3:%.*]] = mul i32 [[MUL]], [[TMP28]]
; DEFAULT-NEXT:    [[INC68_US_3]] = add i32 [[INDEX32_0284_US_3]], 1
; DEFAULT-NEXT:    [[CONV69_US_3:%.*]] = zext i32 [[MUL66_US_3]] to i64
; DEFAULT-NEXT:    [[ARRAYIDX_I278_US_3:%.*]] = getelementptr i32, ptr [[TMP1]], i64 [[CONV69_US_3]]
; DEFAULT-NEXT:    store i32 [[INDEX32_0284_US_3]], ptr [[ARRAYIDX_I278_US_3]], align 4
; DEFAULT-NEXT:    [[INDVARS_IV_NEXT_3]] = add i64 [[INDVARS_IV_3]], 1
; DEFAULT-NEXT:    [[EXITCOND_3_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_3]], [[CONV_1]]
; DEFAULT-NEXT:    br i1 [[EXITCOND_3_NOT]], label [[SW_EPILOG61_US_4]], label [[FOR_BODY65_US_3]], !llvm.loop [[LOOP10:![0-9]+]]
; DEFAULT:       sw.epilog61.us.4:
; DEFAULT-NEXT:    ret void
;
; PRED-LABEL: define void @_ZN7FETools37lexicographic_to_hierarchic_numberingILi3EEEvRK4FE_QIXT_EERNSt3__16vectorIjNS5_9allocatorIjEEEE(
; PRED-SAME: i32 [[TMP0:%.*]], ptr [[TMP1:%.*]], i64 [[CONV_1:%.*]]) #[[ATTR0]] {
; PRED-NEXT:  entry:
; PRED-NEXT:    [[MUL:%.*]] = mul i32 [[TMP0]], [[TMP0]]
; PRED-NEXT:    [[TMP2:%.*]] = add i64 [[CONV_1]], 1
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_SCEVCHECK:%.*]]
; PRED:       vector.scevcheck:
; PRED-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP0]], [[TMP0]]
; PRED-NEXT:    [[TMP4:%.*]] = sub i32 0, [[TMP3]]
; PRED-NEXT:    [[TMP5:%.*]] = icmp slt i32 [[MUL]], 0
; PRED-NEXT:    [[TMP6:%.*]] = select i1 [[TMP5]], i32 [[TMP4]], i32 [[MUL]]
; PRED-NEXT:    [[TMP7:%.*]] = trunc i64 [[CONV_1]] to i32
; PRED-NEXT:    [[MUL1:%.*]] = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 [[TMP6]], i32 [[TMP7]])
; PRED-NEXT:    [[MUL_RESULT:%.*]] = extractvalue { i32, i1 } [[MUL1]], 0
; PRED-NEXT:    [[MUL_OVERFLOW:%.*]] = extractvalue { i32, i1 } [[MUL1]], 1
; PRED-NEXT:    [[TMP8:%.*]] = sub i32 0, [[MUL_RESULT]]
; PRED-NEXT:    [[TMP9:%.*]] = icmp ugt i32 [[TMP8]], 0
; PRED-NEXT:    [[TMP10:%.*]] = select i1 [[TMP5]], i1 [[TMP9]], i1 false
; PRED-NEXT:    [[TMP11:%.*]] = or i1 [[TMP10]], [[MUL_OVERFLOW]]
; PRED-NEXT:    [[TMP12:%.*]] = icmp ugt i64 [[CONV_1]], 4294967295
; PRED-NEXT:    [[TMP13:%.*]] = icmp ne i32 [[MUL]], 0
; PRED-NEXT:    [[TMP14:%.*]] = and i1 [[TMP12]], [[TMP13]]
; PRED-NEXT:    [[TMP15:%.*]] = or i1 [[TMP11]], [[TMP14]]
; PRED-NEXT:    br i1 [[TMP15]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[N_RND_UP:%.*]] = add i64 [[TMP2]], 3
; PRED-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_RND_UP]], 4
; PRED-NEXT:    [[N_VEC:%.*]] = sub i64 [[N_RND_UP]], [[N_MOD_VF]]
; PRED-NEXT:    [[IND_END:%.*]] = trunc i64 [[N_VEC]] to i32
; PRED-NEXT:    [[TMP16:%.*]] = sub i64 [[TMP2]], 4
; PRED-NEXT:    [[TMP17:%.*]] = icmp ugt i64 [[TMP2]], 4
; PRED-NEXT:    [[TMP18:%.*]] = select i1 [[TMP17]], i64 [[TMP16]], i64 0
; PRED-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <4 x i1> @llvm.get.active.lane.mask.v4i1.i64(i64 0, i64 [[TMP2]])
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i32> poison, i32 [[MUL]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT]], <4 x i32> poison, <4 x i32> zeroinitializer
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE8:%.*]] ]
; PRED-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], [[VECTOR_PH]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], [[PRED_STORE_CONTINUE8]] ]
; PRED-NEXT:    [[VEC_IND:%.*]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[PRED_STORE_CONTINUE8]] ]
; PRED-NEXT:    [[OFFSET_IDX:%.*]] = trunc i64 [[INDEX]] to i32
; PRED-NEXT:    [[TMP19:%.*]] = mul <4 x i32> [[BROADCAST_SPLAT]], [[VEC_IND]]
; PRED-NEXT:    [[TMP20:%.*]] = zext <4 x i32> [[TMP19]] to <4 x i64>
; PRED-NEXT:    [[TMP21:%.*]] = extractelement <4 x i1> [[ACTIVE_LANE_MASK]], i32 0
; PRED-NEXT:    br i1 [[TMP21]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; PRED:       pred.store.if:
; PRED-NEXT:    [[TMP22:%.*]] = extractelement <4 x i64> [[TMP20]], i32 0
; PRED-NEXT:    [[TMP23:%.*]] = getelementptr i32, ptr [[TMP1]], i64 [[TMP22]]
; PRED-NEXT:    [[TMP24:%.*]] = add i32 [[OFFSET_IDX]], 0
; PRED-NEXT:    store i32 [[TMP24]], ptr [[TMP23]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE]]
; PRED:       pred.store.continue:
; PRED-NEXT:    [[TMP25:%.*]] = extractelement <4 x i1> [[ACTIVE_LANE_MASK]], i32 1
; PRED-NEXT:    br i1 [[TMP25]], label [[PRED_STORE_IF3:%.*]], label [[PRED_STORE_CONTINUE4:%.*]]
; PRED:       pred.store.if3:
; PRED-NEXT:    [[TMP26:%.*]] = extractelement <4 x i64> [[TMP20]], i32 1
; PRED-NEXT:    [[TMP27:%.*]] = getelementptr i32, ptr [[TMP1]], i64 [[TMP26]]
; PRED-NEXT:    [[TMP28:%.*]] = add i32 [[OFFSET_IDX]], 1
; PRED-NEXT:    store i32 [[TMP28]], ptr [[TMP27]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE4]]
; PRED:       pred.store.continue4:
; PRED-NEXT:    [[TMP29:%.*]] = extractelement <4 x i1> [[ACTIVE_LANE_MASK]], i32 2
; PRED-NEXT:    br i1 [[TMP29]], label [[PRED_STORE_IF5:%.*]], label [[PRED_STORE_CONTINUE6:%.*]]
; PRED:       pred.store.if5:
; PRED-NEXT:    [[TMP30:%.*]] = extractelement <4 x i64> [[TMP20]], i32 2
; PRED-NEXT:    [[TMP31:%.*]] = getelementptr i32, ptr [[TMP1]], i64 [[TMP30]]
; PRED-NEXT:    [[TMP32:%.*]] = add i32 [[OFFSET_IDX]], 2
; PRED-NEXT:    store i32 [[TMP32]], ptr [[TMP31]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE6]]
; PRED:       pred.store.continue6:
; PRED-NEXT:    [[TMP33:%.*]] = extractelement <4 x i1> [[ACTIVE_LANE_MASK]], i32 3
; PRED-NEXT:    br i1 [[TMP33]], label [[PRED_STORE_IF7:%.*]], label [[PRED_STORE_CONTINUE8]]
; PRED:       pred.store.if7:
; PRED-NEXT:    [[TMP34:%.*]] = extractelement <4 x i64> [[TMP20]], i32 3
; PRED-NEXT:    [[TMP35:%.*]] = getelementptr i32, ptr [[TMP1]], i64 [[TMP34]]
; PRED-NEXT:    [[TMP36:%.*]] = add i32 [[OFFSET_IDX]], 3
; PRED-NEXT:    store i32 [[TMP36]], ptr [[TMP35]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE8]]
; PRED:       pred.store.continue8:
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 4
; PRED-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <4 x i1> @llvm.get.active.lane.mask.v4i1.i64(i64 [[INDEX]], i64 [[TMP18]])
; PRED-NEXT:    [[TMP37:%.*]] = xor <4 x i1> [[ACTIVE_LANE_MASK_NEXT]], <i1 true, i1 true, i1 true, i1 true>
; PRED-NEXT:    [[VEC_IND_NEXT]] = add <4 x i32> [[VEC_IND]], <i32 4, i32 4, i32 4, i32 4>
; PRED-NEXT:    [[TMP38:%.*]] = extractelement <4 x i1> [[TMP37]], i32 0
; PRED-NEXT:    br i1 [[TMP38]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[SW_EPILOG61_US_4:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; PRED-NEXT:    [[BC_RESUME_VAL2:%.*]] = phi i32 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; PRED-NEXT:    br label [[FOR_BODY65_US_3:%.*]]
; PRED:       for.body65.us.3:
; PRED-NEXT:    [[INDVARS_IV_3:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT_3:%.*]], [[FOR_BODY65_US_3]] ]
; PRED-NEXT:    [[INDEX32_0284_US_3:%.*]] = phi i32 [ [[BC_RESUME_VAL2]], [[SCALAR_PH]] ], [ [[INC68_US_3:%.*]], [[FOR_BODY65_US_3]] ]
; PRED-NEXT:    [[TMP39:%.*]] = trunc i64 [[INDVARS_IV_3]] to i32
; PRED-NEXT:    [[MUL66_US_3:%.*]] = mul i32 [[MUL]], [[TMP39]]
; PRED-NEXT:    [[INC68_US_3]] = add i32 [[INDEX32_0284_US_3]], 1
; PRED-NEXT:    [[CONV69_US_3:%.*]] = zext i32 [[MUL66_US_3]] to i64
; PRED-NEXT:    [[ARRAYIDX_I278_US_3:%.*]] = getelementptr i32, ptr [[TMP1]], i64 [[CONV69_US_3]]
; PRED-NEXT:    store i32 [[INDEX32_0284_US_3]], ptr [[ARRAYIDX_I278_US_3]], align 4
; PRED-NEXT:    [[INDVARS_IV_NEXT_3]] = add i64 [[INDVARS_IV_3]], 1
; PRED-NEXT:    [[EXITCOND_3_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_3]], [[CONV_1]]
; PRED-NEXT:    br i1 [[EXITCOND_3_NOT]], label [[SW_EPILOG61_US_4]], label [[FOR_BODY65_US_3]], !llvm.loop [[LOOP9:![0-9]+]]
; PRED:       sw.epilog61.us.4:
; PRED-NEXT:    ret void
;
entry:
  %mul = mul i32 %0, %0
  br label %for.body65.us.3

for.body65.us.3:                                  ; preds = %for.body65.us.3, %entry
  %indvars.iv.3 = phi i64 [ 0, %entry ], [ %indvars.iv.next.3, %for.body65.us.3 ]
  %index32.0284.us.3 = phi i32 [ 0, %entry ], [ %inc68.us.3, %for.body65.us.3 ]
  %2 = trunc i64 %indvars.iv.3 to i32
  %mul66.us.3 = mul i32 %mul, %2
  %inc68.us.3 = add i32 %index32.0284.us.3, 1
  %conv69.us.3 = zext i32 %mul66.us.3 to i64
  %arrayidx.i278.us.3 = getelementptr i32, ptr %1, i64 %conv69.us.3
  store i32 %index32.0284.us.3, ptr %arrayidx.i278.us.3, align 4
  %indvars.iv.next.3 = add i64 %indvars.iv.3, 1
  %exitcond.3.not = icmp eq i64 %indvars.iv.3, %conv.1
  br i1 %exitcond.3.not, label %sw.epilog61.us.4, label %for.body65.us.3

sw.epilog61.us.4:                                 ; preds = %for.body65.us.3
  ret void
}

define void @makepossibilities() #0 {
; DEFAULT-LABEL: define void @makepossibilities(
; DEFAULT-SAME: ) #[[ATTR0]] {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0
; DEFAULT-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 1
; DEFAULT-NEXT:    [[TMP2:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP0]]
; DEFAULT-NEXT:    [[TMP3:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP1]]
; DEFAULT-NEXT:    store i8 0, ptr [[TMP2]], align 1
; DEFAULT-NEXT:    store i8 0, ptr [[TMP3]], align 1
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2
; DEFAULT-NEXT:    [[TMP4:%.*]] = icmp eq i64 [[INDEX_NEXT]], 100
; DEFAULT-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    br i1 false, label [[FOR_END:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 100, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY:%.*]]
; DEFAULT:       for.body:
; DEFAULT-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DEFAULT-NEXT:    [[ARRAYIDX:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[INDVARS_IV]]
; DEFAULT-NEXT:    store i8 0, ptr [[ARRAYIDX]], align 1
; DEFAULT-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1
; DEFAULT-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], 100
; DEFAULT-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]
; DEFAULT:       for.end:
; DEFAULT-NEXT:    ret void
;
; PRED-LABEL: define void @makepossibilities(
; PRED-SAME: ) #[[ATTR0]] {
; PRED-NEXT:  entry:
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <8 x i1> @llvm.get.active.lane.mask.v8i1.i64(i64 0, i64 101)
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE14:%.*]] ]
; PRED-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <8 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], [[VECTOR_PH]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], [[PRED_STORE_CONTINUE14]] ]
; PRED-NEXT:    [[TMP0:%.*]] = extractelement <8 x i1> [[ACTIVE_LANE_MASK]], i32 0
; PRED-NEXT:    br i1 [[TMP0]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; PRED:       pred.store.if:
; PRED-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 0
; PRED-NEXT:    [[TMP2:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP1]]
; PRED-NEXT:    store i8 0, ptr [[TMP2]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE]]
; PRED:       pred.store.continue:
; PRED-NEXT:    [[TMP3:%.*]] = extractelement <8 x i1> [[ACTIVE_LANE_MASK]], i32 1
; PRED-NEXT:    br i1 [[TMP3]], label [[PRED_STORE_IF1:%.*]], label [[PRED_STORE_CONTINUE2:%.*]]
; PRED:       pred.store.if1:
; PRED-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 1
; PRED-NEXT:    [[TMP5:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP4]]
; PRED-NEXT:    store i8 0, ptr [[TMP5]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE2]]
; PRED:       pred.store.continue2:
; PRED-NEXT:    [[TMP6:%.*]] = extractelement <8 x i1> [[ACTIVE_LANE_MASK]], i32 2
; PRED-NEXT:    br i1 [[TMP6]], label [[PRED_STORE_IF3:%.*]], label [[PRED_STORE_CONTINUE4:%.*]]
; PRED:       pred.store.if3:
; PRED-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 2
; PRED-NEXT:    [[TMP8:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP7]]
; PRED-NEXT:    store i8 0, ptr [[TMP8]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE4]]
; PRED:       pred.store.continue4:
; PRED-NEXT:    [[TMP9:%.*]] = extractelement <8 x i1> [[ACTIVE_LANE_MASK]], i32 3
; PRED-NEXT:    br i1 [[TMP9]], label [[PRED_STORE_IF5:%.*]], label [[PRED_STORE_CONTINUE6:%.*]]
; PRED:       pred.store.if5:
; PRED-NEXT:    [[TMP10:%.*]] = add i64 [[INDEX]], 3
; PRED-NEXT:    [[TMP11:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP10]]
; PRED-NEXT:    store i8 0, ptr [[TMP11]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE6]]
; PRED:       pred.store.continue6:
; PRED-NEXT:    [[TMP12:%.*]] = extractelement <8 x i1> [[ACTIVE_LANE_MASK]], i32 4
; PRED-NEXT:    br i1 [[TMP12]], label [[PRED_STORE_IF7:%.*]], label [[PRED_STORE_CONTINUE8:%.*]]
; PRED:       pred.store.if7:
; PRED-NEXT:    [[TMP13:%.*]] = add i64 [[INDEX]], 4
; PRED-NEXT:    [[TMP14:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP13]]
; PRED-NEXT:    store i8 0, ptr [[TMP14]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE8]]
; PRED:       pred.store.continue8:
; PRED-NEXT:    [[TMP15:%.*]] = extractelement <8 x i1> [[ACTIVE_LANE_MASK]], i32 5
; PRED-NEXT:    br i1 [[TMP15]], label [[PRED_STORE_IF9:%.*]], label [[PRED_STORE_CONTINUE10:%.*]]
; PRED:       pred.store.if9:
; PRED-NEXT:    [[TMP16:%.*]] = add i64 [[INDEX]], 5
; PRED-NEXT:    [[TMP17:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP16]]
; PRED-NEXT:    store i8 0, ptr [[TMP17]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE10]]
; PRED:       pred.store.continue10:
; PRED-NEXT:    [[TMP18:%.*]] = extractelement <8 x i1> [[ACTIVE_LANE_MASK]], i32 6
; PRED-NEXT:    br i1 [[TMP18]], label [[PRED_STORE_IF11:%.*]], label [[PRED_STORE_CONTINUE12:%.*]]
; PRED:       pred.store.if11:
; PRED-NEXT:    [[TMP19:%.*]] = add i64 [[INDEX]], 6
; PRED-NEXT:    [[TMP20:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP19]]
; PRED-NEXT:    store i8 0, ptr [[TMP20]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE12]]
; PRED:       pred.store.continue12:
; PRED-NEXT:    [[TMP21:%.*]] = extractelement <8 x i1> [[ACTIVE_LANE_MASK]], i32 7
; PRED-NEXT:    br i1 [[TMP21]], label [[PRED_STORE_IF13:%.*]], label [[PRED_STORE_CONTINUE14]]
; PRED:       pred.store.if13:
; PRED-NEXT:    [[TMP22:%.*]] = add i64 [[INDEX]], 7
; PRED-NEXT:    [[TMP23:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[TMP22]]
; PRED-NEXT:    store i8 0, ptr [[TMP23]], align 1
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE14]]
; PRED:       pred.store.continue14:
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 8
; PRED-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <8 x i1> @llvm.get.active.lane.mask.v8i1.i64(i64 [[INDEX_NEXT]], i64 101)
; PRED-NEXT:    [[TMP24:%.*]] = xor <8 x i1> [[ACTIVE_LANE_MASK_NEXT]], <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
; PRED-NEXT:    [[TMP25:%.*]] = extractelement <8 x i1> [[TMP24]], i32 0
; PRED-NEXT:    br i1 [[TMP25]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP10:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[FOR_END:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 104, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; PRED-NEXT:    br label [[FOR_BODY:%.*]]
; PRED:       for.body:
; PRED-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; PRED-NEXT:    [[ARRAYIDX:%.*]] = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 [[INDVARS_IV]]
; PRED-NEXT:    store i8 0, ptr [[ARRAYIDX]], align 1
; PRED-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1
; PRED-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], 100
; PRED-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]
; PRED:       for.end:
; PRED-NEXT:    ret void
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr [100 x [120 x i8]], ptr null, i64 0, i64 %indvars.iv
  store i8 0, ptr %arrayidx, align 1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, 100
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret void
}

define void @_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc(ptr %first, i16 %v1, i64 %wide.trip.count) #0 {
; DEFAULT-LABEL: define void @_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc(
; DEFAULT-SAME: ptr [[FIRST:%.*]], i16 [[V1:%.*]], i64 [[WIDE_TRIP_COUNT:%.*]]) #[[ATTR0]] {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    [[TMP0:%.*]] = add i64 [[WIDE_TRIP_COUNT]], 1
; DEFAULT-NEXT:    br label [[FOR_COND1_PREHEADER_US:%.*]]
; DEFAULT:       for.cond1.preheader.us:
; DEFAULT-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 8
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP0]], [[TMP2]]
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP4:%.*]] = mul i64 [[TMP3]], 8
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP0]], [[TMP4]]
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP0]], [[N_MOD_VF]]
; DEFAULT-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 8
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 4 x i16> poison, i16 [[V1]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 4 x i16> [[BROADCAST_SPLATINSERT]], <vscale x 4 x i16> poison, <vscale x 4 x i32> zeroinitializer
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 4 x i16> [ zeroinitializer, [[VECTOR_PH]] ], [ [[TMP21:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[VEC_PHI1:%.*]] = phi <vscale x 4 x i16> [ zeroinitializer, [[VECTOR_PH]] ], [ [[TMP22:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 0
; DEFAULT-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP8]], 4
; DEFAULT-NEXT:    [[TMP10:%.*]] = add i64 [[TMP9]], 0
; DEFAULT-NEXT:    [[TMP11:%.*]] = mul i64 [[TMP10]], 1
; DEFAULT-NEXT:    [[TMP12:%.*]] = add i64 [[INDEX]], [[TMP11]]
; DEFAULT-NEXT:    [[TMP13:%.*]] = getelementptr i16, ptr [[FIRST]], i64 [[TMP7]]
; DEFAULT-NEXT:    [[TMP14:%.*]] = getelementptr i16, ptr [[FIRST]], i64 [[TMP12]]
; DEFAULT-NEXT:    [[TMP15:%.*]] = getelementptr i16, ptr [[TMP13]], i32 0
; DEFAULT-NEXT:    [[TMP16:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP17:%.*]] = mul i64 [[TMP16]], 4
; DEFAULT-NEXT:    [[TMP18:%.*]] = getelementptr i16, ptr [[TMP13]], i64 [[TMP17]]
; DEFAULT-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 4 x i16>, ptr [[TMP15]], align 2
; DEFAULT-NEXT:    [[WIDE_LOAD2:%.*]] = load <vscale x 4 x i16>, ptr [[TMP18]], align 2
; DEFAULT-NEXT:    [[TMP19:%.*]] = udiv <vscale x 4 x i16> [[WIDE_LOAD]], [[BROADCAST_SPLAT]]
; DEFAULT-NEXT:    [[TMP20:%.*]] = udiv <vscale x 4 x i16> [[WIDE_LOAD2]], [[BROADCAST_SPLAT]]
; DEFAULT-NEXT:    [[TMP21]] = or <vscale x 4 x i16> [[TMP19]], [[VEC_PHI]]
; DEFAULT-NEXT:    [[TMP22]] = or <vscale x 4 x i16> [[TMP20]], [[VEC_PHI1]]
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP6]]
; DEFAULT-NEXT:    [[TMP23:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP23]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP13:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[BIN_RDX:%.*]] = or <vscale x 4 x i16> [[TMP22]], [[TMP21]]
; DEFAULT-NEXT:    [[TMP24:%.*]] = call i16 @llvm.vector.reduce.or.nxv4i16(<vscale x 4 x i16> [[BIN_RDX]])
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP0]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_COND1_FOR_COND_CLEANUP_CRIT_EDGE_US:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_COND1_PREHEADER_US]] ]
; DEFAULT-NEXT:    [[BC_MERGE_RDX:%.*]] = phi i16 [ 0, [[FOR_COND1_PREHEADER_US]] ], [ [[TMP24]], [[MIDDLE_BLOCK]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY3_US:%.*]]
; DEFAULT:       if.then.i.us:
; DEFAULT-NEXT:    br label [[FOR_COND1_PREHEADER_US_BACKEDGE:%.*]]
; DEFAULT:       for.cond1.preheader.us.backedge:
; DEFAULT-NEXT:    br label [[FOR_COND1_PREHEADER_US]]
; DEFAULT:       for.body3.us:
; DEFAULT-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY3_US]] ]
; DEFAULT-NEXT:    [[RESULT_023_US:%.*]] = phi i16 [ [[BC_MERGE_RDX]], [[SCALAR_PH]] ], [ [[ADD_US:%.*]], [[FOR_BODY3_US]] ]
; DEFAULT-NEXT:    [[ARRAYIDX_US:%.*]] = getelementptr i16, ptr [[FIRST]], i64 [[INDVARS_IV]]
; DEFAULT-NEXT:    [[TMP25:%.*]] = load i16, ptr [[ARRAYIDX_US]], align 2
; DEFAULT-NEXT:    [[TMP26:%.*]] = udiv i16 [[TMP25]], [[V1]]
; DEFAULT-NEXT:    [[ADD_US]] = or i16 [[TMP26]], [[RESULT_023_US]]
; DEFAULT-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1
; DEFAULT-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], [[WIDE_TRIP_COUNT]]
; DEFAULT-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND1_FOR_COND_CLEANUP_CRIT_EDGE_US]], label [[FOR_BODY3_US]], !llvm.loop [[LOOP14:![0-9]+]]
; DEFAULT:       for.cond1.for.cond.cleanup_crit_edge.us:
; DEFAULT-NEXT:    [[ADD_US_LCSSA:%.*]] = phi i16 [ [[ADD_US]], [[FOR_BODY3_US]] ], [ [[TMP24]], [[MIDDLE_BLOCK]] ]
; DEFAULT-NEXT:    [[CMP_I_I_US:%.*]] = icmp eq i16 [[ADD_US_LCSSA]], 0
; DEFAULT-NEXT:    br i1 [[CMP_I_I_US]], label [[FOR_COND1_PREHEADER_US_BACKEDGE]], label [[IF_THEN_I_US:%.*]]
;
; PRED-LABEL: define void @_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc(
; PRED-SAME: ptr [[FIRST:%.*]], i16 [[V1:%.*]], i64 [[WIDE_TRIP_COUNT:%.*]]) #[[ATTR0]] {
; PRED-NEXT:  entry:
; PRED-NEXT:    [[TMP0:%.*]] = add i64 [[WIDE_TRIP_COUNT]], 1
; PRED-NEXT:    br label [[FOR_COND1_PREHEADER_US:%.*]]
; PRED:       for.cond1.preheader.us:
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 8
; PRED-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP4:%.*]] = mul i64 [[TMP3]], 8
; PRED-NEXT:    [[TMP5:%.*]] = sub i64 [[TMP4]], 1
; PRED-NEXT:    [[N_RND_UP:%.*]] = add i64 [[TMP0]], [[TMP5]]
; PRED-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_RND_UP]], [[TMP2]]
; PRED-NEXT:    [[N_VEC:%.*]] = sub i64 [[N_RND_UP]], [[N_MOD_VF]]
; PRED-NEXT:    [[TMP6:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP7:%.*]] = mul i64 [[TMP6]], 8
; PRED-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; PRED-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP8]], 8
; PRED-NEXT:    [[TMP10:%.*]] = sub i64 [[TMP0]], [[TMP9]]
; PRED-NEXT:    [[TMP11:%.*]] = icmp ugt i64 [[TMP0]], [[TMP9]]
; PRED-NEXT:    [[TMP12:%.*]] = select i1 [[TMP11]], i64 [[TMP10]], i64 0
; PRED-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 8 x i1> @llvm.get.active.lane.mask.nxv8i1.i64(i64 0, i64 [[TMP0]])
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 8 x i16> poison, i16 [[V1]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 8 x i16> [[BROADCAST_SPLATINSERT]], <vscale x 8 x i16> poison, <vscale x 8 x i32> zeroinitializer
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 8 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], [[VECTOR_PH]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 8 x i16> [ zeroinitializer, [[VECTOR_PH]] ], [ [[TMP19:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[TMP13:%.*]] = add i64 [[INDEX]], 0
; PRED-NEXT:    [[TMP14:%.*]] = getelementptr i16, ptr [[FIRST]], i64 [[TMP13]]
; PRED-NEXT:    [[TMP15:%.*]] = getelementptr i16, ptr [[TMP14]], i32 0
; PRED-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <vscale x 8 x i16> @llvm.masked.load.nxv8i16.p0(ptr [[TMP15]], i32 2, <vscale x 8 x i1> [[ACTIVE_LANE_MASK]], <vscale x 8 x i16> poison)
; PRED-NEXT:    [[TMP16:%.*]] = select <vscale x 8 x i1> [[ACTIVE_LANE_MASK]], <vscale x 8 x i16> [[BROADCAST_SPLAT]], <vscale x 8 x i16> shufflevector (<vscale x 8 x i16> insertelement (<vscale x 8 x i16> poison, i16 1, i64 0), <vscale x 8 x i16> poison, <vscale x 8 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP17:%.*]] = udiv <vscale x 8 x i16> [[WIDE_MASKED_LOAD]], [[TMP16]]
; PRED-NEXT:    [[TMP18:%.*]] = or <vscale x 8 x i16> [[TMP17]], [[VEC_PHI]]
; PRED-NEXT:    [[TMP19]] = select <vscale x 8 x i1> [[ACTIVE_LANE_MASK]], <vscale x 8 x i16> [[TMP18]], <vscale x 8 x i16> [[VEC_PHI]]
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP7]]
; PRED-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 8 x i1> @llvm.get.active.lane.mask.nxv8i1.i64(i64 [[INDEX]], i64 [[TMP12]])
; PRED-NEXT:    [[TMP20:%.*]] = xor <vscale x 8 x i1> [[ACTIVE_LANE_MASK_NEXT]], shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer)
; PRED-NEXT:    [[TMP21:%.*]] = extractelement <vscale x 8 x i1> [[TMP20]], i32 0
; PRED-NEXT:    br i1 [[TMP21]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    [[TMP22:%.*]] = call i16 @llvm.vector.reduce.or.nxv8i16(<vscale x 8 x i16> [[TMP19]])
; PRED-NEXT:    br i1 true, label [[FOR_COND1_FOR_COND_CLEANUP_CRIT_EDGE_US:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_COND1_PREHEADER_US]] ]
; PRED-NEXT:    [[BC_MERGE_RDX:%.*]] = phi i16 [ 0, [[FOR_COND1_PREHEADER_US]] ], [ [[TMP22]], [[MIDDLE_BLOCK]] ]
; PRED-NEXT:    br label [[FOR_BODY3_US:%.*]]
; PRED:       if.then.i.us:
; PRED-NEXT:    br label [[FOR_COND1_PREHEADER_US_BACKEDGE:%.*]]
; PRED:       for.cond1.preheader.us.backedge:
; PRED-NEXT:    br label [[FOR_COND1_PREHEADER_US]]
; PRED:       for.body3.us:
; PRED-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY3_US]] ]
; PRED-NEXT:    [[RESULT_023_US:%.*]] = phi i16 [ [[BC_MERGE_RDX]], [[SCALAR_PH]] ], [ [[ADD_US:%.*]], [[FOR_BODY3_US]] ]
; PRED-NEXT:    [[ARRAYIDX_US:%.*]] = getelementptr i16, ptr [[FIRST]], i64 [[INDVARS_IV]]
; PRED-NEXT:    [[TMP23:%.*]] = load i16, ptr [[ARRAYIDX_US]], align 2
; PRED-NEXT:    [[TMP24:%.*]] = udiv i16 [[TMP23]], [[V1]]
; PRED-NEXT:    [[ADD_US]] = or i16 [[TMP24]], [[RESULT_023_US]]
; PRED-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV]], 1
; PRED-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], [[WIDE_TRIP_COUNT]]
; PRED-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND1_FOR_COND_CLEANUP_CRIT_EDGE_US]], label [[FOR_BODY3_US]], !llvm.loop [[LOOP13:![0-9]+]]
; PRED:       for.cond1.for.cond.cleanup_crit_edge.us:
; PRED-NEXT:    [[ADD_US_LCSSA:%.*]] = phi i16 [ [[ADD_US]], [[FOR_BODY3_US]] ], [ [[TMP22]], [[MIDDLE_BLOCK]] ]
; PRED-NEXT:    [[CMP_I_I_US:%.*]] = icmp eq i16 [[ADD_US_LCSSA]], 0
; PRED-NEXT:    br i1 [[CMP_I_I_US]], label [[FOR_COND1_PREHEADER_US_BACKEDGE]], label [[IF_THEN_I_US:%.*]]
;
entry:
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.for.cond.cleanup_crit_edge.us, %if.then.i.us, %entry
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  br label %for.cond1.preheader.us

for.body3.us:                                     ; preds = %for.body3.us, %for.cond1.preheader.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.body3.us ]
  %result.023.us = phi i16 [ 0, %for.cond1.preheader.us ], [ %add.us, %for.body3.us ]
  %arrayidx.us = getelementptr i16, ptr %first, i64 %indvars.iv
  %0 = load i16, ptr %arrayidx.us, align 2
  %1 = udiv i16 %0, %v1
  %add.us = or i16 %1, %result.023.us
  %indvars.iv.next = add i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us
  %cmp.i.i.us = icmp eq i16 %add.us, 0
  br i1 %cmp.i.i.us, label %for.cond1.preheader.us, label %if.then.i.us
}


define void @_ZN4FE_QILi2EE37lexicographic_to_hierarchic_numberingERK17FiniteElementDataILi2EEj(i32 %degree, ptr %call.i.i.i.i.i11.i.i, i64 %conv9.1) #0 personality ptr null {
; DEFAULT-LABEL: define void @_ZN4FE_QILi2EE37lexicographic_to_hierarchic_numberingERK17FiniteElementDataILi2EEj(
; DEFAULT-SAME: i32 [[DEGREE:%.*]], ptr [[CALL_I_I_I_I_I11_I_I:%.*]], i64 [[CONV9_1:%.*]]) #[[ATTR0]] personality ptr null {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    [[ADD:%.*]] = add i32 [[DEGREE]], 1
; DEFAULT-NEXT:    [[TMP0:%.*]] = add i64 [[CONV9_1]], 1
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP0]], 2
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_SCEVCHECK:%.*]]
; DEFAULT:       vector.scevcheck:
; DEFAULT-NEXT:    [[TMP1:%.*]] = sub i32 -1, [[DEGREE]]
; DEFAULT-NEXT:    [[TMP2:%.*]] = icmp slt i32 [[ADD]], 0
; DEFAULT-NEXT:    [[TMP3:%.*]] = select i1 [[TMP2]], i32 [[TMP1]], i32 [[ADD]]
; DEFAULT-NEXT:    [[TMP4:%.*]] = trunc i64 [[CONV9_1]] to i32
; DEFAULT-NEXT:    [[MUL:%.*]] = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 [[TMP3]], i32 [[TMP4]])
; DEFAULT-NEXT:    [[MUL_RESULT:%.*]] = extractvalue { i32, i1 } [[MUL]], 0
; DEFAULT-NEXT:    [[MUL_OVERFLOW:%.*]] = extractvalue { i32, i1 } [[MUL]], 1
; DEFAULT-NEXT:    [[TMP5:%.*]] = sub i32 0, [[MUL_RESULT]]
; DEFAULT-NEXT:    [[TMP6:%.*]] = icmp ugt i32 [[TMP5]], 0
; DEFAULT-NEXT:    [[TMP7:%.*]] = select i1 [[TMP2]], i1 [[TMP6]], i1 false
; DEFAULT-NEXT:    [[TMP8:%.*]] = or i1 [[TMP7]], [[MUL_OVERFLOW]]
; DEFAULT-NEXT:    [[TMP9:%.*]] = icmp ugt i64 [[CONV9_1]], 4294967295
; DEFAULT-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[ADD]], 0
; DEFAULT-NEXT:    [[TMP11:%.*]] = and i1 [[TMP9]], [[TMP10]]
; DEFAULT-NEXT:    [[TMP12:%.*]] = or i1 [[TMP8]], [[TMP11]]
; DEFAULT-NEXT:    br i1 [[TMP12]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP0]], 2
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP0]], [[N_MOD_VF]]
; DEFAULT-NEXT:    [[IND_END:%.*]] = trunc i64 [[N_VEC]] to i32
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[OFFSET_IDX:%.*]] = trunc i64 [[INDEX]] to i32
; DEFAULT-NEXT:    [[TMP13:%.*]] = add i32 [[OFFSET_IDX]], 0
; DEFAULT-NEXT:    [[TMP14:%.*]] = add i32 [[OFFSET_IDX]], 1
; DEFAULT-NEXT:    [[TMP15:%.*]] = trunc i64 [[INDEX]] to i32
; DEFAULT-NEXT:    [[TMP16:%.*]] = add i32 [[TMP15]], 0
; DEFAULT-NEXT:    [[TMP17:%.*]] = add i32 [[TMP15]], 1
; DEFAULT-NEXT:    [[TMP18:%.*]] = mul i32 [[ADD]], [[TMP16]]
; DEFAULT-NEXT:    [[TMP19:%.*]] = mul i32 [[ADD]], [[TMP17]]
; DEFAULT-NEXT:    [[TMP20:%.*]] = zext i32 [[TMP18]] to i64
; DEFAULT-NEXT:    [[TMP21:%.*]] = zext i32 [[TMP19]] to i64
; DEFAULT-NEXT:    [[TMP22:%.*]] = getelementptr i32, ptr [[CALL_I_I_I_I_I11_I_I]], i64 [[TMP20]]
; DEFAULT-NEXT:    [[TMP23:%.*]] = getelementptr i32, ptr [[CALL_I_I_I_I_I11_I_I]], i64 [[TMP21]]
; DEFAULT-NEXT:    store i32 [[TMP13]], ptr [[TMP22]], align 4
; DEFAULT-NEXT:    store i32 [[TMP14]], ptr [[TMP23]], align 4
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2
; DEFAULT-NEXT:    [[TMP24:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP24]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP15:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP0]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_COND89_PREHEADER_LR_PH:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; DEFAULT-NEXT:    [[BC_RESUME_VAL1:%.*]] = phi i32 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY49_US_3:%.*]]
; DEFAULT:       for.body49.us.3:
; DEFAULT-NEXT:    [[INDVARS_IV_3:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT_3:%.*]], [[FOR_BODY49_US_3]] ]
; DEFAULT-NEXT:    [[INDEX19_0186_US_3:%.*]] = phi i32 [ [[BC_RESUME_VAL1]], [[SCALAR_PH]] ], [ [[INC52_US_3:%.*]], [[FOR_BODY49_US_3]] ]
; DEFAULT-NEXT:    [[TMP25:%.*]] = trunc i64 [[INDVARS_IV_3]] to i32
; DEFAULT-NEXT:    [[MUL50_US_3:%.*]] = mul i32 [[ADD]], [[TMP25]]
; DEFAULT-NEXT:    [[INC52_US_3]] = add i32 [[INDEX19_0186_US_3]], 1
; DEFAULT-NEXT:    [[CONV53_US_3:%.*]] = zext i32 [[MUL50_US_3]] to i64
; DEFAULT-NEXT:    [[ARRAYIDX_I180_US_3:%.*]] = getelementptr i32, ptr [[CALL_I_I_I_I_I11_I_I]], i64 [[CONV53_US_3]]
; DEFAULT-NEXT:    store i32 [[INDEX19_0186_US_3]], ptr [[ARRAYIDX_I180_US_3]], align 4
; DEFAULT-NEXT:    [[INDVARS_IV_NEXT_3]] = add i64 [[INDVARS_IV_3]], 1
; DEFAULT-NEXT:    [[EXITCOND_3_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_3]], [[CONV9_1]]
; DEFAULT-NEXT:    br i1 [[EXITCOND_3_NOT]], label [[FOR_COND89_PREHEADER_LR_PH]], label [[FOR_BODY49_US_3]], !llvm.loop [[LOOP16:![0-9]+]]
; DEFAULT:       for.cond89.preheader.lr.ph:
; DEFAULT-NEXT:    ret void
;
; PRED-LABEL: define void @_ZN4FE_QILi2EE37lexicographic_to_hierarchic_numberingERK17FiniteElementDataILi2EEj(
; PRED-SAME: i32 [[DEGREE:%.*]], ptr [[CALL_I_I_I_I_I11_I_I:%.*]], i64 [[CONV9_1:%.*]]) #[[ATTR0]] personality ptr null {
; PRED-NEXT:  entry:
; PRED-NEXT:    [[ADD:%.*]] = add i32 [[DEGREE]], 1
; PRED-NEXT:    [[TMP0:%.*]] = add i64 [[CONV9_1]], 1
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_SCEVCHECK:%.*]]
; PRED:       vector.scevcheck:
; PRED-NEXT:    [[TMP1:%.*]] = sub i32 -1, [[DEGREE]]
; PRED-NEXT:    [[TMP2:%.*]] = icmp slt i32 [[ADD]], 0
; PRED-NEXT:    [[TMP3:%.*]] = select i1 [[TMP2]], i32 [[TMP1]], i32 [[ADD]]
; PRED-NEXT:    [[TMP4:%.*]] = trunc i64 [[CONV9_1]] to i32
; PRED-NEXT:    [[MUL:%.*]] = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 [[TMP3]], i32 [[TMP4]])
; PRED-NEXT:    [[MUL_RESULT:%.*]] = extractvalue { i32, i1 } [[MUL]], 0
; PRED-NEXT:    [[MUL_OVERFLOW:%.*]] = extractvalue { i32, i1 } [[MUL]], 1
; PRED-NEXT:    [[TMP5:%.*]] = sub i32 0, [[MUL_RESULT]]
; PRED-NEXT:    [[TMP6:%.*]] = icmp ugt i32 [[TMP5]], 0
; PRED-NEXT:    [[TMP7:%.*]] = select i1 [[TMP2]], i1 [[TMP6]], i1 false
; PRED-NEXT:    [[TMP8:%.*]] = or i1 [[TMP7]], [[MUL_OVERFLOW]]
; PRED-NEXT:    [[TMP9:%.*]] = icmp ugt i64 [[CONV9_1]], 4294967295
; PRED-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[ADD]], 0
; PRED-NEXT:    [[TMP11:%.*]] = and i1 [[TMP9]], [[TMP10]]
; PRED-NEXT:    [[TMP12:%.*]] = or i1 [[TMP8]], [[TMP11]]
; PRED-NEXT:    br i1 [[TMP12]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[N_RND_UP:%.*]] = add i64 [[TMP0]], 3
; PRED-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_RND_UP]], 4
; PRED-NEXT:    [[N_VEC:%.*]] = sub i64 [[N_RND_UP]], [[N_MOD_VF]]
; PRED-NEXT:    [[IND_END:%.*]] = trunc i64 [[N_VEC]] to i32
; PRED-NEXT:    [[TMP13:%.*]] = sub i64 [[TMP0]], 4
; PRED-NEXT:    [[TMP14:%.*]] = icmp ugt i64 [[TMP0]], 4
; PRED-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i64 [[TMP13]], i64 0
; PRED-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <4 x i1> @llvm.get.active.lane.mask.v4i1.i64(i64 0, i64 [[TMP0]])
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i32> poison, i32 [[ADD]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT]], <4 x i32> poison, <4 x i32> zeroinitializer
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE7:%.*]] ]
; PRED-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], [[VECTOR_PH]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], [[PRED_STORE_CONTINUE7]] ]
; PRED-NEXT:    [[VEC_IND:%.*]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[PRED_STORE_CONTINUE7]] ]
; PRED-NEXT:    [[OFFSET_IDX:%.*]] = trunc i64 [[INDEX]] to i32
; PRED-NEXT:    [[TMP16:%.*]] = mul <4 x i32> [[BROADCAST_SPLAT]], [[VEC_IND]]
; PRED-NEXT:    [[TMP17:%.*]] = zext <4 x i32> [[TMP16]] to <4 x i64>
; PRED-NEXT:    [[TMP18:%.*]] = extractelement <4 x i1> [[ACTIVE_LANE_MASK]], i32 0
; PRED-NEXT:    br i1 [[TMP18]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; PRED:       pred.store.if:
; PRED-NEXT:    [[TMP19:%.*]] = extractelement <4 x i64> [[TMP17]], i32 0
; PRED-NEXT:    [[TMP20:%.*]] = getelementptr i32, ptr [[CALL_I_I_I_I_I11_I_I]], i64 [[TMP19]]
; PRED-NEXT:    [[TMP21:%.*]] = add i32 [[OFFSET_IDX]], 0
; PRED-NEXT:    store i32 [[TMP21]], ptr [[TMP20]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE]]
; PRED:       pred.store.continue:
; PRED-NEXT:    [[TMP22:%.*]] = extractelement <4 x i1> [[ACTIVE_LANE_MASK]], i32 1
; PRED-NEXT:    br i1 [[TMP22]], label [[PRED_STORE_IF2:%.*]], label [[PRED_STORE_CONTINUE3:%.*]]
; PRED:       pred.store.if2:
; PRED-NEXT:    [[TMP23:%.*]] = extractelement <4 x i64> [[TMP17]], i32 1
; PRED-NEXT:    [[TMP24:%.*]] = getelementptr i32, ptr [[CALL_I_I_I_I_I11_I_I]], i64 [[TMP23]]
; PRED-NEXT:    [[TMP25:%.*]] = add i32 [[OFFSET_IDX]], 1
; PRED-NEXT:    store i32 [[TMP25]], ptr [[TMP24]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE3]]
; PRED:       pred.store.continue3:
; PRED-NEXT:    [[TMP26:%.*]] = extractelement <4 x i1> [[ACTIVE_LANE_MASK]], i32 2
; PRED-NEXT:    br i1 [[TMP26]], label [[PRED_STORE_IF4:%.*]], label [[PRED_STORE_CONTINUE5:%.*]]
; PRED:       pred.store.if4:
; PRED-NEXT:    [[TMP27:%.*]] = extractelement <4 x i64> [[TMP17]], i32 2
; PRED-NEXT:    [[TMP28:%.*]] = getelementptr i32, ptr [[CALL_I_I_I_I_I11_I_I]], i64 [[TMP27]]
; PRED-NEXT:    [[TMP29:%.*]] = add i32 [[OFFSET_IDX]], 2
; PRED-NEXT:    store i32 [[TMP29]], ptr [[TMP28]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE5]]
; PRED:       pred.store.continue5:
; PRED-NEXT:    [[TMP30:%.*]] = extractelement <4 x i1> [[ACTIVE_LANE_MASK]], i32 3
; PRED-NEXT:    br i1 [[TMP30]], label [[PRED_STORE_IF6:%.*]], label [[PRED_STORE_CONTINUE7]]
; PRED:       pred.store.if6:
; PRED-NEXT:    [[TMP31:%.*]] = extractelement <4 x i64> [[TMP17]], i32 3
; PRED-NEXT:    [[TMP32:%.*]] = getelementptr i32, ptr [[CALL_I_I_I_I_I11_I_I]], i64 [[TMP31]]
; PRED-NEXT:    [[TMP33:%.*]] = add i32 [[OFFSET_IDX]], 3
; PRED-NEXT:    store i32 [[TMP33]], ptr [[TMP32]], align 4
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE7]]
; PRED:       pred.store.continue7:
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 4
; PRED-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <4 x i1> @llvm.get.active.lane.mask.v4i1.i64(i64 [[INDEX]], i64 [[TMP15]])
; PRED-NEXT:    [[TMP34:%.*]] = xor <4 x i1> [[ACTIVE_LANE_MASK_NEXT]], <i1 true, i1 true, i1 true, i1 true>
; PRED-NEXT:    [[VEC_IND_NEXT]] = add <4 x i32> [[VEC_IND]], <i32 4, i32 4, i32 4, i32 4>
; PRED-NEXT:    [[TMP35:%.*]] = extractelement <4 x i1> [[TMP34]], i32 0
; PRED-NEXT:    br i1 [[TMP35]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP14:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[FOR_COND89_PREHEADER_LR_PH:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; PRED-NEXT:    [[BC_RESUME_VAL1:%.*]] = phi i32 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; PRED-NEXT:    br label [[FOR_BODY49_US_3:%.*]]
; PRED:       for.body49.us.3:
; PRED-NEXT:    [[INDVARS_IV_3:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT_3:%.*]], [[FOR_BODY49_US_3]] ]
; PRED-NEXT:    [[INDEX19_0186_US_3:%.*]] = phi i32 [ [[BC_RESUME_VAL1]], [[SCALAR_PH]] ], [ [[INC52_US_3:%.*]], [[FOR_BODY49_US_3]] ]
; PRED-NEXT:    [[TMP36:%.*]] = trunc i64 [[INDVARS_IV_3]] to i32
; PRED-NEXT:    [[MUL50_US_3:%.*]] = mul i32 [[ADD]], [[TMP36]]
; PRED-NEXT:    [[INC52_US_3]] = add i32 [[INDEX19_0186_US_3]], 1
; PRED-NEXT:    [[CONV53_US_3:%.*]] = zext i32 [[MUL50_US_3]] to i64
; PRED-NEXT:    [[ARRAYIDX_I180_US_3:%.*]] = getelementptr i32, ptr [[CALL_I_I_I_I_I11_I_I]], i64 [[CONV53_US_3]]
; PRED-NEXT:    store i32 [[INDEX19_0186_US_3]], ptr [[ARRAYIDX_I180_US_3]], align 4
; PRED-NEXT:    [[INDVARS_IV_NEXT_3]] = add i64 [[INDVARS_IV_3]], 1
; PRED-NEXT:    [[EXITCOND_3_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_3]], [[CONV9_1]]
; PRED-NEXT:    br i1 [[EXITCOND_3_NOT]], label [[FOR_COND89_PREHEADER_LR_PH]], label [[FOR_BODY49_US_3]], !llvm.loop [[LOOP15:![0-9]+]]
; PRED:       for.cond89.preheader.lr.ph:
; PRED-NEXT:    ret void
;
entry:
  %add = add i32 %degree, 1
  br label %for.body49.us.3

for.body49.us.3:                                  ; preds = %for.body49.us.3, %entry
  %indvars.iv.3 = phi i64 [ 0, %entry ], [ %indvars.iv.next.3, %for.body49.us.3 ]
  %index19.0186.us.3 = phi i32 [ 0, %entry ], [ %inc52.us.3, %for.body49.us.3 ]
  %0 = trunc i64 %indvars.iv.3 to i32
  %mul50.us.3 = mul i32 %add, %0
  %inc52.us.3 = add i32 %index19.0186.us.3, 1
  %conv53.us.3 = zext i32 %mul50.us.3 to i64
  %arrayidx.i180.us.3 = getelementptr i32, ptr %call.i.i.i.i.i11.i.i, i64 %conv53.us.3
  store i32 %index19.0186.us.3, ptr %arrayidx.i180.us.3, align 4
  %indvars.iv.next.3 = add i64 %indvars.iv.3, 1
  %exitcond.3.not = icmp eq i64 %indvars.iv.3, %conv9.1
  br i1 %exitcond.3.not, label %for.cond89.preheader.lr.ph, label %for.body49.us.3

for.cond89.preheader.lr.ph:                       ; preds = %for.body49.us.3
  ret void
}

%"struct.DataOutBase::Patch" = type { [16 x %class.Point], [8 x i32], i32, i32, %class.Table.140 }
%class.Point = type { %class.Tensor }
%class.Tensor = type { [3 x double] }
%class.Table.140 = type { %class.TableBase.base.142, [4 x i8] }
%class.TableBase.base.142 = type <{ %class.Subscriptor, ptr, i32, %class.TableIndices }>
%class.Subscriptor = type { ptr, i32, ptr }
%class.TableIndices = type { %class.TableIndicesBase }
%class.TableIndicesBase = type { [2 x i32] }


define void @_ZN7DataOutILi3EE13build_patchesEjj(i64 %sub.ptr.lhs.cast.i394) personality ptr null {
; DEFAULT-LABEL: define void @_ZN7DataOutILi3EE13build_patchesEjj(
; DEFAULT-SAME: i64 [[SUB_PTR_LHS_CAST_I394:%.*]]) personality ptr null {
; DEFAULT-NEXT:  entry:
; DEFAULT-NEXT:    [[UMAX1:%.*]] = call i64 @llvm.umax.i64(i64 [[SUB_PTR_LHS_CAST_I394]], i64 1)
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[UMAX1]], 2
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_SCEVCHECK:%.*]]
; DEFAULT:       vector.scevcheck:
; DEFAULT-NEXT:    [[UMAX:%.*]] = call i64 @llvm.umax.i64(i64 [[SUB_PTR_LHS_CAST_I394]], i64 1)
; DEFAULT-NEXT:    [[TMP0:%.*]] = add i64 [[UMAX]], -1
; DEFAULT-NEXT:    [[TMP1:%.*]] = icmp ugt i64 [[TMP0]], 4294967295
; DEFAULT-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP0]] to i32
; DEFAULT-NEXT:    [[TMP3:%.*]] = add i32 1, [[TMP2]]
; DEFAULT-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP3]], 1
; DEFAULT-NEXT:    [[TMP5:%.*]] = icmp ugt i64 [[TMP0]], 4294967295
; DEFAULT-NEXT:    [[TMP6:%.*]] = or i1 [[TMP4]], [[TMP5]]
; DEFAULT-NEXT:    br i1 [[TMP6]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[UMAX1]], 2
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 [[UMAX1]], [[N_MOD_VF]]
; DEFAULT-NEXT:    [[IND_END:%.*]] = trunc i64 [[N_VEC]] to i32
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 0
; DEFAULT-NEXT:    [[TMP8:%.*]] = add i64 [[INDEX]], 1
; DEFAULT-NEXT:    [[TMP9:%.*]] = getelementptr %"struct.DataOutBase::Patch", ptr null, i64 [[TMP7]], i32 2
; DEFAULT-NEXT:    [[TMP10:%.*]] = getelementptr %"struct.DataOutBase::Patch", ptr null, i64 [[TMP8]], i32 2
; DEFAULT-NEXT:    store i32 0, ptr [[TMP9]], align 8
; DEFAULT-NEXT:    store i32 0, ptr [[TMP10]], align 8
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2
; DEFAULT-NEXT:    [[TMP11:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP11]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP17:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[UMAX1]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP158_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; DEFAULT:       scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; DEFAULT-NEXT:    [[BC_RESUME_VAL2:%.*]] = phi i32 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY159:%.*]]
; DEFAULT:       for.cond.cleanup158.loopexit:
; DEFAULT-NEXT:    ret void
; DEFAULT:       for.body159:
; DEFAULT-NEXT:    [[CONV154478:%.*]] = phi i64 [ [[CONV154:%.*]], [[FOR_BODY159]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; DEFAULT-NEXT:    [[I_0477:%.*]] = phi i32 [ [[INC164:%.*]], [[FOR_BODY159]] ], [ [[BC_RESUME_VAL2]], [[SCALAR_PH]] ]
; DEFAULT-NEXT:    [[PATCH_INDEX:%.*]] = getelementptr %"struct.DataOutBase::Patch", ptr null, i64 [[CONV154478]], i32 2
; DEFAULT-NEXT:    store i32 0, ptr [[PATCH_INDEX]], align 8
; DEFAULT-NEXT:    [[INC164]] = add i32 [[I_0477]], 1
; DEFAULT-NEXT:    [[CONV154]] = zext i32 [[INC164]] to i64
; DEFAULT-NEXT:    [[CMP157:%.*]] = icmp ult i64 [[CONV154]], [[SUB_PTR_LHS_CAST_I394]]
; DEFAULT-NEXT:    br i1 [[CMP157]], label [[FOR_BODY159]], label [[FOR_COND_CLEANUP158_LOOPEXIT]], !llvm.loop [[LOOP18:![0-9]+]]
;
; PRED-LABEL: define void @_ZN7DataOutILi3EE13build_patchesEjj(
; PRED-SAME: i64 [[SUB_PTR_LHS_CAST_I394:%.*]]) personality ptr null {
; PRED-NEXT:  entry:
; PRED-NEXT:    [[UMAX1:%.*]] = call i64 @llvm.umax.i64(i64 [[SUB_PTR_LHS_CAST_I394]], i64 1)
; PRED-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_SCEVCHECK:%.*]]
; PRED:       vector.scevcheck:
; PRED-NEXT:    [[UMAX:%.*]] = call i64 @llvm.umax.i64(i64 [[SUB_PTR_LHS_CAST_I394]], i64 1)
; PRED-NEXT:    [[TMP0:%.*]] = add i64 [[UMAX]], -1
; PRED-NEXT:    [[TMP1:%.*]] = icmp ugt i64 [[TMP0]], 4294967295
; PRED-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP0]] to i32
; PRED-NEXT:    [[TMP3:%.*]] = add i32 1, [[TMP2]]
; PRED-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP3]], 1
; PRED-NEXT:    [[TMP5:%.*]] = icmp ugt i64 [[TMP0]], 4294967295
; PRED-NEXT:    [[TMP6:%.*]] = or i1 [[TMP4]], [[TMP5]]
; PRED-NEXT:    br i1 [[TMP6]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[N_RND_UP:%.*]] = add i64 [[UMAX1]], 1
; PRED-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_RND_UP]], 2
; PRED-NEXT:    [[N_VEC:%.*]] = sub i64 [[N_RND_UP]], [[N_MOD_VF]]
; PRED-NEXT:    [[IND_END:%.*]] = trunc i64 [[N_VEC]] to i32
; PRED-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[UMAX1]], 1
; PRED-NEXT:    [[BROADCAST_SPLATINSERT3:%.*]] = insertelement <2 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT4:%.*]] = shufflevector <2 x i64> [[BROADCAST_SPLATINSERT3]], <2 x i64> poison, <2 x i32> zeroinitializer
; PRED-NEXT:    br label [[FOR_BODY159:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE6:%.*]] ]
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <2 x i64> poison, i64 [[INDEX]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <2 x i64> [[BROADCAST_SPLATINSERT]], <2 x i64> poison, <2 x i32> zeroinitializer
; PRED-NEXT:    [[VEC_IV:%.*]] = add <2 x i64> [[BROADCAST_SPLAT]], <i64 0, i64 1>
; PRED-NEXT:    [[TMP7:%.*]] = icmp ule <2 x i64> [[VEC_IV]], [[BROADCAST_SPLAT4]]
; PRED-NEXT:    [[TMP8:%.*]] = extractelement <2 x i1> [[TMP7]], i32 0
; PRED-NEXT:    br i1 [[TMP8]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; PRED:       pred.store.if:
; PRED-NEXT:    [[TMP9:%.*]] = add i64 [[INDEX]], 0
; PRED-NEXT:    [[TMP10:%.*]] = getelementptr %"struct.DataOutBase::Patch", ptr null, i64 [[TMP9]], i32 2
; PRED-NEXT:    store i32 0, ptr [[TMP10]], align 8
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE]]
; PRED:       pred.store.continue:
; PRED-NEXT:    [[TMP11:%.*]] = extractelement <2 x i1> [[TMP7]], i32 1
; PRED-NEXT:    br i1 [[TMP11]], label [[PRED_STORE_IF5:%.*]], label [[PRED_STORE_CONTINUE6]]
; PRED:       pred.store.if5:
; PRED-NEXT:    [[TMP12:%.*]] = add i64 [[INDEX]], 1
; PRED-NEXT:    [[TMP13:%.*]] = getelementptr %"struct.DataOutBase::Patch", ptr null, i64 [[TMP12]], i32 2
; PRED-NEXT:    store i32 0, ptr [[TMP13]], align 8
; PRED-NEXT:    br label [[PRED_STORE_CONTINUE6]]
; PRED:       pred.store.continue6:
; PRED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 2
; PRED-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; PRED-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[FOR_BODY159]], !llvm.loop [[LOOP16:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[FOR_COND_CLEANUP158_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; PRED-NEXT:    [[BC_RESUME_VAL2:%.*]] = phi i32 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY]] ], [ 0, [[VECTOR_SCEVCHECK]] ]
; PRED-NEXT:    br label [[FOR_BODY160:%.*]]
; PRED:       for.cond.cleanup158.loopexit:
; PRED-NEXT:    ret void
; PRED:       for.body159:
; PRED-NEXT:    [[CONV154478:%.*]] = phi i64 [ [[CONV154:%.*]], [[FOR_BODY160]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; PRED-NEXT:    [[I_0477:%.*]] = phi i32 [ [[INC164:%.*]], [[FOR_BODY160]] ], [ [[BC_RESUME_VAL2]], [[SCALAR_PH]] ]
; PRED-NEXT:    [[PATCH_INDEX:%.*]] = getelementptr %"struct.DataOutBase::Patch", ptr null, i64 [[CONV154478]], i32 2
; PRED-NEXT:    store i32 0, ptr [[PATCH_INDEX]], align 8
; PRED-NEXT:    [[INC164]] = add i32 [[I_0477]], 1
; PRED-NEXT:    [[CONV154]] = zext i32 [[INC164]] to i64
; PRED-NEXT:    [[CMP157:%.*]] = icmp ult i64 [[CONV154]], [[SUB_PTR_LHS_CAST_I394]]
; PRED-NEXT:    br i1 [[CMP157]], label [[FOR_BODY160]], label [[FOR_COND_CLEANUP158_LOOPEXIT]], !llvm.loop [[LOOP17:![0-9]+]]
;
entry:
  br label %for.body159

for.cond.cleanup158.loopexit:                     ; preds = %for.body159
  ret void

for.body159:                                      ; preds = %for.body159, %entry
  %conv154478 = phi i64 [ %conv154, %for.body159 ], [ 0, %entry ]
  %i.0477 = phi i32 [ %inc164, %for.body159 ], [ 0, %entry ]
  %patch_index = getelementptr %"struct.DataOutBase::Patch", ptr null, i64 %conv154478, i32 2
  store i32 0, ptr %patch_index, align 8
  %inc164 = add i32 %i.0477, 1
  %conv154 = zext i32 %inc164 to i64
  %cmp157 = icmp ult i64 %conv154, %sub.ptr.lhs.cast.i394
  br i1 %cmp157, label %for.body159, label %for.cond.cleanup158.loopexit
}


define void @f883b(ptr %result, ptr %arg1, i16 %0) #1 {
; DEFAULT-LABEL: define void @f883b(
; DEFAULT-SAME: ptr [[RESULT:%.*]], ptr [[ARG1:%.*]], i16 [[TMP0:%.*]]) #[[ATTR1:[0-9]+]] {
; DEFAULT-NEXT:  iter.check:
; DEFAULT-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 2
; DEFAULT-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 0, [[TMP2]]
; DEFAULT-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[VEC_EPILOG_SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; DEFAULT:       vector.memcheck:
; DEFAULT-NEXT:    [[SCEVGEP:%.*]] = getelementptr i8, ptr [[ARG1]], i64 8
; DEFAULT-NEXT:    [[BOUND0:%.*]] = icmp ult ptr [[RESULT]], [[SCEVGEP]]
; DEFAULT-NEXT:    [[BOUND1:%.*]] = icmp ult ptr [[ARG1]], [[RESULT]]
; DEFAULT-NEXT:    [[FOUND_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]]
; DEFAULT-NEXT:    br i1 [[FOUND_CONFLICT]], label [[VEC_EPILOG_SCALAR_PH]], label [[VECTOR_MAIN_LOOP_ITER_CHECK:%.*]]
; DEFAULT:       vector.main.loop.iter.check:
; DEFAULT-NEXT:    br i1 true, label [[VEC_EPILOG_PH:%.*]], label [[VECTOR_PH:%.*]]
; DEFAULT:       vector.ph:
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT3:%.*]] = insertelement <16 x i16> poison, i16 [[TMP0]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT4:%.*]] = shufflevector <16 x i16> [[BROADCAST_SPLATINSERT3]], <16 x i16> poison, <16 x i32> zeroinitializer
; DEFAULT-NEXT:    br label [[VECTOR_BODY:%.*]]
; DEFAULT:       vector.body:
; DEFAULT-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP3:%.*]] = add i64 [[INDEX]], 0
; DEFAULT-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 16
; DEFAULT-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ARG1]], align 8, !alias.scope [[META19:![0-9]+]]
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <16 x i64> poison, i64 [[TMP5]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <16 x i64> [[BROADCAST_SPLATINSERT1]], <16 x i64> poison, <16 x i32> zeroinitializer
; DEFAULT-NEXT:    [[TMP6:%.*]] = trunc <16 x i64> [[BROADCAST_SPLAT2]] to <16 x i8>
; DEFAULT-NEXT:    [[TMP7:%.*]] = trunc <16 x i64> [[BROADCAST_SPLAT2]] to <16 x i8>
; DEFAULT-NEXT:    [[TMP8:%.*]] = trunc <16 x i16> [[BROADCAST_SPLAT4]] to <16 x i8>
; DEFAULT-NEXT:    [[TMP9:%.*]] = and <16 x i8> [[TMP6]], [[TMP8]]
; DEFAULT-NEXT:    [[TMP10:%.*]] = and <16 x i8> [[TMP7]], [[TMP8]]
; DEFAULT-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr [[RESULT]], i64 [[TMP3]]
; DEFAULT-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[RESULT]], i64 [[TMP4]]
; DEFAULT-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[TMP11]], i32 0
; DEFAULT-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[TMP11]], i32 16
; DEFAULT-NEXT:    store <16 x i8> [[TMP9]], ptr [[TMP13]], align 1, !alias.scope [[META22:![0-9]+]], !noalias [[META19]]
; DEFAULT-NEXT:    store <16 x i8> [[TMP10]], ptr [[TMP14]], align 1, !alias.scope [[META22]], !noalias [[META19]]
; DEFAULT-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 32
; DEFAULT-NEXT:    [[TMP15:%.*]] = icmp eq i64 [[INDEX_NEXT]], 0
; DEFAULT-NEXT:    br i1 [[TMP15]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP24:![0-9]+]]
; DEFAULT:       middle.block:
; DEFAULT-NEXT:    br i1 true, label [[FOR_END:%.*]], label [[VEC_EPILOG_ITER_CHECK:%.*]]
; DEFAULT:       vec.epilog.iter.check:
; DEFAULT-NEXT:    [[TMP16:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP17:%.*]] = mul i64 [[TMP16]], 2
; DEFAULT-NEXT:    [[MIN_EPILOG_ITERS_CHECK:%.*]] = icmp ult i64 0, [[TMP17]]
; DEFAULT-NEXT:    br i1 [[MIN_EPILOG_ITERS_CHECK]], label [[VEC_EPILOG_SCALAR_PH]], label [[VEC_EPILOG_PH]]
; DEFAULT:       vec.epilog.ph:
; DEFAULT-NEXT:    [[VEC_EPILOG_RESUME_VAL:%.*]] = phi i64 [ 0, [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MAIN_LOOP_ITER_CHECK]] ]
; DEFAULT-NEXT:    [[TMP18:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP19:%.*]] = mul i64 [[TMP18]], 2
; DEFAULT-NEXT:    [[N_MOD_VF:%.*]] = urem i64 0, [[TMP19]]
; DEFAULT-NEXT:    [[N_VEC:%.*]] = sub i64 0, [[N_MOD_VF]]
; DEFAULT-NEXT:    [[TMP20:%.*]] = call i64 @llvm.vscale.i64()
; DEFAULT-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP20]], 2
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT6:%.*]] = insertelement <vscale x 2 x i16> poison, i16 [[TMP0]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT7:%.*]] = shufflevector <vscale x 2 x i16> [[BROADCAST_SPLATINSERT6]], <vscale x 2 x i16> poison, <vscale x 2 x i32> zeroinitializer
; DEFAULT-NEXT:    br label [[VEC_EPILOG_VECTOR_BODY:%.*]]
; DEFAULT:       vec.epilog.vector.body:
; DEFAULT-NEXT:    [[INDEX5:%.*]] = phi i64 [ [[VEC_EPILOG_RESUME_VAL]], [[VEC_EPILOG_PH]] ], [ [[INDEX_NEXT8:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]
; DEFAULT-NEXT:    [[TMP22:%.*]] = add i64 [[INDEX5]], 0
; DEFAULT-NEXT:    [[TMP23:%.*]] = load i64, ptr [[ARG1]], align 8, !alias.scope [[META25:![0-9]+]]
; DEFAULT-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP23]], i64 0
; DEFAULT-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; DEFAULT-NEXT:    [[TMP24:%.*]] = trunc <vscale x 2 x i64> [[BROADCAST_SPLAT]] to <vscale x 2 x i8>
; DEFAULT-NEXT:    [[TMP25:%.*]] = trunc <vscale x 2 x i16> [[BROADCAST_SPLAT7]] to <vscale x 2 x i8>
; DEFAULT-NEXT:    [[TMP26:%.*]] = and <vscale x 2 x i8> [[TMP24]], [[TMP25]]
; DEFAULT-NEXT:    [[TMP27:%.*]] = getelementptr i8, ptr [[RESULT]], i64 [[TMP22]]
; DEFAULT-NEXT:    [[TMP28:%.*]] = getelementptr i8, ptr [[TMP27]], i32 0
; DEFAULT-NEXT:    store <vscale x 2 x i8> [[TMP26]], ptr [[TMP28]], align 1, !alias.scope [[META28:![0-9]+]], !noalias [[META25]]
; DEFAULT-NEXT:    [[INDEX_NEXT8]] = add nuw i64 [[INDEX5]], [[TMP21]]
; DEFAULT-NEXT:    [[TMP29:%.*]] = icmp eq i64 [[INDEX_NEXT8]], [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[TMP29]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP30:![0-9]+]]
; DEFAULT:       vec.epilog.middle.block:
; DEFAULT-NEXT:    [[CMP_N:%.*]] = icmp eq i64 0, [[N_VEC]]
; DEFAULT-NEXT:    br i1 [[CMP_N]], label [[FOR_END]], label [[VEC_EPILOG_SCALAR_PH]]
; DEFAULT:       vec.epilog.scalar.ph:
; DEFAULT-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[VEC_EPILOG_MIDDLE_BLOCK]] ], [ 0, [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MEMCHECK]] ], [ 0, [[ITER_CHECK:%.*]] ]
; DEFAULT-NEXT:    br label [[FOR_BODY:%.*]]
; DEFAULT:       for.body:
; DEFAULT-NEXT:    [[INDVARS_IV1:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[VEC_EPILOG_SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DEFAULT-NEXT:    [[CONV9:%.*]] = zext i16 [[TMP0]] to i64
; DEFAULT-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ARG1]], align 8
; DEFAULT-NEXT:    [[AND12:%.*]] = and i64 [[TMP30]], [[CONV9]]
; DEFAULT-NEXT:    [[CONV13:%.*]] = trunc i64 [[AND12]] to i8
; DEFAULT-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr i8, ptr [[RESULT]], i64 [[INDVARS_IV1]]
; DEFAULT-NEXT:    store i8 [[CONV13]], ptr [[ARRAYIDX15]], align 1
; DEFAULT-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV1]], 1
; DEFAULT-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 0
; DEFAULT-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP31:![0-9]+]]
; DEFAULT:       for.end:
; DEFAULT-NEXT:    ret void
;
; PRED-LABEL: define void @f883b(
; PRED-SAME: ptr [[RESULT:%.*]], ptr [[ARG1:%.*]], i16 [[TMP0:%.*]]) #[[ATTR1:[0-9]+]] {
; PRED-NEXT:  entry:
; PRED-NEXT:    br i1 true, label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; PRED:       vector.memcheck:
; PRED-NEXT:    [[SCEVGEP:%.*]] = getelementptr i8, ptr [[ARG1]], i64 8
; PRED-NEXT:    [[BOUND0:%.*]] = icmp ult ptr [[RESULT]], [[SCEVGEP]]
; PRED-NEXT:    [[BOUND1:%.*]] = icmp ult ptr [[ARG1]], [[RESULT]]
; PRED-NEXT:    [[FOUND_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]]
; PRED-NEXT:    br i1 [[FOUND_CONFLICT]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; PRED:       vector.ph:
; PRED-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <16 x i16> poison, i16 [[TMP0]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <16 x i16> [[BROADCAST_SPLATINSERT1]], <16 x i16> poison, <16 x i32> zeroinitializer
; PRED-NEXT:    br label [[VECTOR_BODY:%.*]]
; PRED:       vector.body:
; PRED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; PRED-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 0
; PRED-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ARG1]], align 8, !alias.scope [[META18:![0-9]+]]
; PRED-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <16 x i64> poison, i64 [[TMP2]], i64 0
; PRED-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <16 x i64> [[BROADCAST_SPLATINSERT]], <16 x i64> poison, <16 x i32> zeroinitializer
; PRED-NEXT:    [[TMP3:%.*]] = trunc <16 x i64> [[BROADCAST_SPLAT]] to <16 x i8>
; PRED-NEXT:    [[TMP4:%.*]] = trunc <16 x i16> [[BROADCAST_SPLAT2]] to <16 x i8>
; PRED-NEXT:    [[TMP5:%.*]] = and <16 x i8> [[TMP3]], [[TMP4]]
; PRED-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[RESULT]], i64 [[TMP1]]
; PRED-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i32 0
; PRED-NEXT:    store <16 x i8> [[TMP5]], ptr [[TMP7]], align 1, !alias.scope [[META21:![0-9]+]], !noalias [[META18]]
; PRED-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16
; PRED-NEXT:    [[TMP8:%.*]] = icmp eq i64 [[INDEX_NEXT]], 0
; PRED-NEXT:    br i1 [[TMP8]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP23:![0-9]+]]
; PRED:       middle.block:
; PRED-NEXT:    br i1 true, label [[FOR_END:%.*]], label [[SCALAR_PH]]
; PRED:       scalar.ph:
; PRED-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 0, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_MEMCHECK]] ]
; PRED-NEXT:    br label [[FOR_BODY:%.*]]
; PRED:       for.body:
; PRED-NEXT:    [[INDVARS_IV1:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; PRED-NEXT:    [[CONV9:%.*]] = zext i16 [[TMP0]] to i64
; PRED-NEXT:    [[TMP9:%.*]] = load i64, ptr [[ARG1]], align 8
; PRED-NEXT:    [[AND12:%.*]] = and i64 [[TMP9]], [[CONV9]]
; PRED-NEXT:    [[CONV13:%.*]] = trunc i64 [[AND12]] to i8
; PRED-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr i8, ptr [[RESULT]], i64 [[INDVARS_IV1]]
; PRED-NEXT:    store i8 [[CONV13]], ptr [[ARRAYIDX15]], align 1
; PRED-NEXT:    [[INDVARS_IV_NEXT]] = add i64 [[INDVARS_IV1]], 1
; PRED-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 0
; PRED-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP24:![0-9]+]]
; PRED:       for.end:
; PRED-NEXT:    ret void
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %conv9 = zext i16 %0 to i64
  %1 = load i64, ptr %arg1, align 8
  %and12 = and i64 %1, %conv9
  %conv13 = trunc i64 %and12 to i8
  %arrayidx15 = getelementptr i8, ptr %result, i64 %indvars.iv1
  store i8 %conv13, ptr %arrayidx15, align 1
  %indvars.iv.next = add i64 %indvars.iv1, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 0
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret void
}

attributes #1 = { vscale_range(1,16) "target-features"="+aes,+complxnum,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+jsconv,+lse,+neon,+pauth,+ras,+rcpc,+rdm,+sha2,+sha3,+sve,+v8a,+zcm,+zcz" }

attributes #0 = { "target-features"="+aes,+complxnum,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+jsconv,+lse,+neon,+pauth,+ras,+rcpc,+rdm,+sha2,+sha3,+sve,+v8a,+zcm,+zcz" }

;.
; DEFAULT: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; DEFAULT: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; DEFAULT: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; DEFAULT: [[LOOP3]] = distinct !{[[LOOP3]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP4]] = distinct !{[[LOOP4]], [[META1]]}
; DEFAULT: [[LOOP5]] = distinct !{[[LOOP5]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP6]] = distinct !{[[LOOP6]], [[META1]]}
; DEFAULT: [[LOOP7]] = distinct !{[[LOOP7]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP8]] = distinct !{[[LOOP8]], [[META2]], [[META1]]}
; DEFAULT: [[LOOP9]] = distinct !{[[LOOP9]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP10]] = distinct !{[[LOOP10]], [[META1]]}
; DEFAULT: [[LOOP11]] = distinct !{[[LOOP11]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP12]] = distinct !{[[LOOP12]], [[META1]]}
; DEFAULT: [[LOOP13]] = distinct !{[[LOOP13]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP14]] = distinct !{[[LOOP14]], [[META2]], [[META1]]}
; DEFAULT: [[LOOP15]] = distinct !{[[LOOP15]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP16]] = distinct !{[[LOOP16]], [[META1]]}
; DEFAULT: [[LOOP17]] = distinct !{[[LOOP17]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP18]] = distinct !{[[LOOP18]], [[META1]]}
; DEFAULT: [[META19]] = !{[[META20:![0-9]+]]}
; DEFAULT: [[META20]] = distinct !{[[META20]], [[META21:![0-9]+]]}
; DEFAULT: [[META21]] = distinct !{[[META21]], !"LVerDomain"}
; DEFAULT: [[META22]] = !{[[META23:![0-9]+]]}
; DEFAULT: [[META23]] = distinct !{[[META23]], [[META21]]}
; DEFAULT: [[LOOP24]] = distinct !{[[LOOP24]], [[META1]], [[META2]]}
; DEFAULT: [[META25]] = !{[[META26:![0-9]+]]}
; DEFAULT: [[META26]] = distinct !{[[META26]], [[META27:![0-9]+]]}
; DEFAULT: [[META27]] = distinct !{[[META27]], !"LVerDomain"}
; DEFAULT: [[META28]] = !{[[META29:![0-9]+]]}
; DEFAULT: [[META29]] = distinct !{[[META29]], [[META27]]}
; DEFAULT: [[LOOP30]] = distinct !{[[LOOP30]], [[META1]], [[META2]]}
; DEFAULT: [[LOOP31]] = distinct !{[[LOOP31]], [[META1]]}
;.
; PRED: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; PRED: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; PRED: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; PRED: [[LOOP3]] = distinct !{[[LOOP3]], [[META1]]}
; PRED: [[LOOP4]] = distinct !{[[LOOP4]], [[META1]], [[META2]]}
; PRED: [[LOOP5]] = distinct !{[[LOOP5]], [[META1]]}
; PRED: [[LOOP6]] = distinct !{[[LOOP6]], [[META1]], [[META2]]}
; PRED: [[LOOP7]] = distinct !{[[LOOP7]], [[META2]], [[META1]]}
; PRED: [[LOOP8]] = distinct !{[[LOOP8]], [[META1]], [[META2]]}
; PRED: [[LOOP9]] = distinct !{[[LOOP9]], [[META1]]}
; PRED: [[LOOP10]] = distinct !{[[LOOP10]], [[META1]], [[META2]]}
; PRED: [[LOOP11]] = distinct !{[[LOOP11]], [[META2]], [[META1]]}
; PRED: [[LOOP12]] = distinct !{[[LOOP12]], [[META1]], [[META2]]}
; PRED: [[LOOP13]] = distinct !{[[LOOP13]], [[META2]], [[META1]]}
; PRED: [[LOOP14]] = distinct !{[[LOOP14]], [[META1]], [[META2]]}
; PRED: [[LOOP15]] = distinct !{[[LOOP15]], [[META1]]}
; PRED: [[LOOP16]] = distinct !{[[LOOP16]], [[META1]], [[META2]]}
; PRED: [[LOOP17]] = distinct !{[[LOOP17]], [[META1]]}
; PRED: [[META18]] = !{[[META19:![0-9]+]]}
; PRED: [[META19]] = distinct !{[[META19]], [[META20:![0-9]+]]}
; PRED: [[META20]] = distinct !{[[META20]], !"LVerDomain"}
; PRED: [[META21]] = !{[[META22:![0-9]+]]}
; PRED: [[META22]] = distinct !{[[META22]], [[META20]]}
; PRED: [[LOOP23]] = distinct !{[[LOOP23]], [[META1]], [[META2]]}
; PRED: [[LOOP24]] = distinct !{[[LOOP24]], [[META1]]}
;.
