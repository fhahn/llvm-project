; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; REQUIRES: aarch64-registered-target
; RUN: opt -passes='lower-matrix-intrinsics' -mtriple=arm64-apple-iphoneos -S < %s | FileCheck %s

define <8 x i64> @transpose_add_i64_v8(<8 x i64> %a, <8 x i64> %b) {
; CHECK-LABEL: @transpose_add_i64_v8(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SPLIT:%.*]] = shufflevector <8 x i64> [[A:%.*]], <8 x i64> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[SPLIT1:%.*]] = shufflevector <8 x i64> [[B:%.*]], <8 x i64> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP0:%.*]] = add <8 x i64> [[SPLIT]], [[SPLIT1]]
; CHECK-NEXT:    ret <8 x i64> [[TMP0]]
;
entry:
  %a.t = call <8 x i64> @llvm.matrix.transpose.v8i64(<8 x i64> %a, i32 8, i32 1)
  %res = add <8 x i64> %a.t, %b
  ret <8 x i64> %res
}

declare <8 x i64> @llvm.matrix.transpose.v8i64(<8 x i64>, i32, i32)

define void @transpose_add_store_i64_v8(<8 x i64> %a, <8 x i64> %b, ptr %dst) {
; CHECK-LABEL: @transpose_add_store_i64_v8(
; CHECK-NEXT:    [[SPLIT:%.*]] = shufflevector <8 x i64> [[A:%.*]], <8 x i64> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[SPLIT1:%.*]] = shufflevector <8 x i64> [[B:%.*]], <8 x i64> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP1:%.*]] = add <8 x i64> [[SPLIT]], [[SPLIT1]]
; CHECK-NEXT:    store <8 x i64> [[TMP1]], ptr [[DST:%.*]], align 64
; CHECK-NEXT:    ret void
;
  %a.t = call <8 x i64> @llvm.matrix.transpose.v8i64(<8 x i64> %a, i32 8, i32 1)
  %res = add <8 x i64> %a.t, %b
  store <8 x i64> %res, ptr %dst
  ret void
}

define void @add_and_column_store_stride_eq_rows_i64_v8(<8 x i64> %a, <8 x i64> %b, ptr %dst) {
; CHECK-LABEL: @add_and_column_store_stride_eq_rows_i64_v8(
; CHECK-NEXT:    [[SPLIT:%.*]] = shufflevector <8 x i64> [[A:%.*]], <8 x i64> poison, <1 x i32> zeroinitializer
; CHECK-NEXT:    [[SPLIT1:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 1>
; CHECK-NEXT:    [[SPLIT2:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 2>
; CHECK-NEXT:    [[SPLIT3:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 3>
; CHECK-NEXT:    [[SPLIT4:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 4>
; CHECK-NEXT:    [[SPLIT5:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 5>
; CHECK-NEXT:    [[SPLIT6:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 6>
; CHECK-NEXT:    [[SPLIT7:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 7>
; CHECK-NEXT:    [[SPLIT8:%.*]] = shufflevector <8 x i64> [[B:%.*]], <8 x i64> poison, <1 x i32> zeroinitializer
; CHECK-NEXT:    [[SPLIT9:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 1>
; CHECK-NEXT:    [[SPLIT10:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 2>
; CHECK-NEXT:    [[SPLIT11:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 3>
; CHECK-NEXT:    [[SPLIT12:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 4>
; CHECK-NEXT:    [[SPLIT13:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 5>
; CHECK-NEXT:    [[SPLIT14:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 6>
; CHECK-NEXT:    [[SPLIT15:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 7>
; CHECK-NEXT:    [[TMP1:%.*]] = add <1 x i64> [[SPLIT]], [[SPLIT8]]
; CHECK-NEXT:    [[TMP2:%.*]] = add <1 x i64> [[SPLIT1]], [[SPLIT9]]
; CHECK-NEXT:    [[TMP3:%.*]] = add <1 x i64> [[SPLIT2]], [[SPLIT10]]
; CHECK-NEXT:    [[TMP4:%.*]] = add <1 x i64> [[SPLIT3]], [[SPLIT11]]
; CHECK-NEXT:    [[TMP5:%.*]] = add <1 x i64> [[SPLIT4]], [[SPLIT12]]
; CHECK-NEXT:    [[TMP6:%.*]] = add <1 x i64> [[SPLIT5]], [[SPLIT13]]
; CHECK-NEXT:    [[TMP7:%.*]] = add <1 x i64> [[SPLIT6]], [[SPLIT14]]
; CHECK-NEXT:    [[TMP8:%.*]] = add <1 x i64> [[SPLIT7]], [[SPLIT15]]
; CHECK-NEXT:    store <1 x i64> [[TMP1]], ptr [[DST:%.*]], align 4
; CHECK-NEXT:    [[VEC_GEP:%.*]] = getelementptr i64, ptr [[DST]], i64 1
; CHECK-NEXT:    store <1 x i64> [[TMP2]], ptr [[VEC_GEP]], align 4
; CHECK-NEXT:    [[VEC_GEP16:%.*]] = getelementptr i64, ptr [[DST]], i64 2
; CHECK-NEXT:    store <1 x i64> [[TMP3]], ptr [[VEC_GEP16]], align 4
; CHECK-NEXT:    [[VEC_GEP17:%.*]] = getelementptr i64, ptr [[DST]], i64 3
; CHECK-NEXT:    store <1 x i64> [[TMP4]], ptr [[VEC_GEP17]], align 4
; CHECK-NEXT:    [[VEC_GEP18:%.*]] = getelementptr i64, ptr [[DST]], i64 4
; CHECK-NEXT:    store <1 x i64> [[TMP5]], ptr [[VEC_GEP18]], align 4
; CHECK-NEXT:    [[VEC_GEP19:%.*]] = getelementptr i64, ptr [[DST]], i64 5
; CHECK-NEXT:    store <1 x i64> [[TMP6]], ptr [[VEC_GEP19]], align 4
; CHECK-NEXT:    [[VEC_GEP20:%.*]] = getelementptr i64, ptr [[DST]], i64 6
; CHECK-NEXT:    store <1 x i64> [[TMP7]], ptr [[VEC_GEP20]], align 4
; CHECK-NEXT:    [[VEC_GEP21:%.*]] = getelementptr i64, ptr [[DST]], i64 7
; CHECK-NEXT:    store <1 x i64> [[TMP8]], ptr [[VEC_GEP21]], align 4
; CHECK-NEXT:    ret void
;
  %res = add <8 x i64> %a, %b
  call void @llvm.matrix.column.major.store.v8i64(<8 x i64> %res, ptr %dst, i64 1, i1 false, i32 1, i32 8)
  ret void
}

define void @add_and_column_store_stride_gt_rows_i64_v8(<8 x i64> %a, <8 x i64> %b, ptr %dst) {
; CHECK-LABEL: @add_and_column_store_stride_gt_rows_i64_v8(
; CHECK-NEXT:    [[SPLIT:%.*]] = shufflevector <8 x i64> [[A:%.*]], <8 x i64> poison, <1 x i32> zeroinitializer
; CHECK-NEXT:    [[SPLIT1:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 1>
; CHECK-NEXT:    [[SPLIT2:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 2>
; CHECK-NEXT:    [[SPLIT3:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 3>
; CHECK-NEXT:    [[SPLIT4:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 4>
; CHECK-NEXT:    [[SPLIT5:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 5>
; CHECK-NEXT:    [[SPLIT6:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 6>
; CHECK-NEXT:    [[SPLIT7:%.*]] = shufflevector <8 x i64> [[A]], <8 x i64> poison, <1 x i32> <i32 7>
; CHECK-NEXT:    [[SPLIT8:%.*]] = shufflevector <8 x i64> [[B:%.*]], <8 x i64> poison, <1 x i32> zeroinitializer
; CHECK-NEXT:    [[SPLIT9:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 1>
; CHECK-NEXT:    [[SPLIT10:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 2>
; CHECK-NEXT:    [[SPLIT11:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 3>
; CHECK-NEXT:    [[SPLIT12:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 4>
; CHECK-NEXT:    [[SPLIT13:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 5>
; CHECK-NEXT:    [[SPLIT14:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 6>
; CHECK-NEXT:    [[SPLIT15:%.*]] = shufflevector <8 x i64> [[B]], <8 x i64> poison, <1 x i32> <i32 7>
; CHECK-NEXT:    [[TMP1:%.*]] = add <1 x i64> [[SPLIT]], [[SPLIT8]]
; CHECK-NEXT:    [[TMP2:%.*]] = add <1 x i64> [[SPLIT1]], [[SPLIT9]]
; CHECK-NEXT:    [[TMP3:%.*]] = add <1 x i64> [[SPLIT2]], [[SPLIT10]]
; CHECK-NEXT:    [[TMP4:%.*]] = add <1 x i64> [[SPLIT3]], [[SPLIT11]]
; CHECK-NEXT:    [[TMP5:%.*]] = add <1 x i64> [[SPLIT4]], [[SPLIT12]]
; CHECK-NEXT:    [[TMP6:%.*]] = add <1 x i64> [[SPLIT5]], [[SPLIT13]]
; CHECK-NEXT:    [[TMP7:%.*]] = add <1 x i64> [[SPLIT6]], [[SPLIT14]]
; CHECK-NEXT:    [[TMP8:%.*]] = add <1 x i64> [[SPLIT7]], [[SPLIT15]]
; CHECK-NEXT:    store <1 x i64> [[TMP1]], ptr [[DST:%.*]], align 4
; CHECK-NEXT:    [[VEC_GEP:%.*]] = getelementptr i64, ptr [[DST]], i64 2
; CHECK-NEXT:    store <1 x i64> [[TMP2]], ptr [[VEC_GEP]], align 4
; CHECK-NEXT:    [[VEC_GEP16:%.*]] = getelementptr i64, ptr [[DST]], i64 4
; CHECK-NEXT:    store <1 x i64> [[TMP3]], ptr [[VEC_GEP16]], align 4
; CHECK-NEXT:    [[VEC_GEP17:%.*]] = getelementptr i64, ptr [[DST]], i64 6
; CHECK-NEXT:    store <1 x i64> [[TMP4]], ptr [[VEC_GEP17]], align 4
; CHECK-NEXT:    [[VEC_GEP18:%.*]] = getelementptr i64, ptr [[DST]], i64 8
; CHECK-NEXT:    store <1 x i64> [[TMP5]], ptr [[VEC_GEP18]], align 4
; CHECK-NEXT:    [[VEC_GEP19:%.*]] = getelementptr i64, ptr [[DST]], i64 10
; CHECK-NEXT:    store <1 x i64> [[TMP6]], ptr [[VEC_GEP19]], align 4
; CHECK-NEXT:    [[VEC_GEP20:%.*]] = getelementptr i64, ptr [[DST]], i64 12
; CHECK-NEXT:    store <1 x i64> [[TMP7]], ptr [[VEC_GEP20]], align 4
; CHECK-NEXT:    [[VEC_GEP21:%.*]] = getelementptr i64, ptr [[DST]], i64 14
; CHECK-NEXT:    store <1 x i64> [[TMP8]], ptr [[VEC_GEP21]], align 4
; CHECK-NEXT:    ret void
;
  %res = add <8 x i64> %a, %b
  call void @llvm.matrix.column.major.store.v8i64(<8 x i64> %res, ptr %dst, i64 2, i1 false, i32 1, i32 8)
  ret void
}

declare void @llvm.matrix.column.major.store.v8i64(<8 x i64>, ptr, i64, i1, i32, i32)
